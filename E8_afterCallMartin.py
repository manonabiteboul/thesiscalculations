import math
from collections import Counter
import itertools
import re
from tensor_wedge import wedge2
from compare import checker
from compare import order
from compare import expand
from tensor_wedge import latex
from tensor_wedge import latexWithoutDollar
from compare import dimChecker
from compare import classifyIncomplete
#from compare import classifyIncomplete2
from compare import classify
from compare import perm
from tensor_wedge import concat
from remove_tensor_A1 import removeFirstA1
from remove_tensor_A1 import removeA1
from remove_tensor_A1 import diagA1
from tensor_wedge import printLE8

def lambda2fct(test):
    soltest=[]
    for i in range(0,len(test)):
        if test[i][0]==0:
            x=(test[i][1],)
            for j in range(2,len(test[i])):
                x=x+(test[i][j],)
            soltest.append(x)
    return(soltest)

def lambda5fct(test):
    soltest=[]
    for i in range(0,len(test)):
        if test[i][0]==1:
            x=(test[i][1],)
            for j in range(2,len(test[i])):
                x=x+(test[i][j],)
            soltest.append(x)
    return(soltest)

###############################################################
###############################################################
###########A18
###############################################################
###############################################################
print("A18")
basisA18=[[0]]

l1=[(1,1,0,0,0,0),(0,0,1,1,0,0),(0,0,0,0,1,1)]
l2=wedge2(l1)
l5=[(1,0,1,0,0,1),(1,0,0,1,1,0),(0,1,1,0,1,0),(0,1,0,1,0,1)]
l5b=[(0,1,1,0,0,1),(0,1,0,1,1,0),(1,0,1,0,1,0),(1,0,0,1,0,1)]

temp=concat([(1,1)],l1)
temp = temp+concat([(1,0)],l5)
temp = temp+[(2,0,0,0,0,0,0,0),(0,2,0,0,0,0,0,0)]
temp=temp+concat([(0,0)],l2)
L = temp+concat([(0,1)],l5b)

print(dimChecker(L))
#a=expand("[(2,0,0,0,0,0,0,0)/(0,2,0,0,0,0,0,0)/(0,0,2,0,0,0,0,0)/(0,0,0,2,0,0,0,0)/(0,0,0,0,2,0,0,0)/(0,0,0,0,0,2,0,0)/(0,0,0,0,0,0,2,0)/(0,0,0,0,0,0,0,2)/(1,1,1,1,0,0,0,0)/(1,1,0,0,1,1,0,0)/(1,1,0,0,0,0,1,1)/(1,0,1,0,1,0,0,1)/(1,0,1,0,0,1,1,0)/(1,0,0,1,1,0,1,0)/(1,0,0,1,0,1,0,1)/(0,0,1,1,1,1,0,0)/(0,0,1,1,0,0,1,1)/(0,0,0,0,1,1,1,1)/(0,1,1,0,1,0,0,1)/(0,1,1,0,0,1,1,0)/(0,1,0,1,1,0,1,0)/(0,1,0,1,0,1,0,1)]")
basisA18.append(L)
#print(latex(L))

###############################################################
###############################################################
###########A17
###############################################################
###############################################################
print("A17")
a=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
orderList7 = order(7)
basisA17=[[0]]
#We make the basis from basis of A18

a[0]=diagA1(basisA18[1],2,3)
a[1]=removeA1(basisA18[1],2)




for i in range(0,2):
    #print("LE8 \downarrow A17")
    basisA17.append(a[i])
    #print(latex(a[i]))



#In D8

a[1]=expand("[(1,1,0,0,0,0,0)/(0,0,1,1,0,0,0)/(0,0,0,0,1,1,0)/(0,0,0,0,0,1)^2]")

a[2]=expand("[(1,1,0,0,0,0,0)/(0,0,1,1,0,0,0)/(0,0,0,0,1,1,0)/(0,0,0,0,0,2)/(0,0,0,0,0,0,0)]")
orderList7=order(7)

print("In D8")
w=[0,0,0,0,0]
w[1]=expand("[(2,0,0,0,0,0,0)/(0,2,0,0,0,0,0)/(1,1,1,1,0,0,0)/(1,1,0,0,1,1,0)/(1,1,0,0,0,0,1)^2/(0,0,2,0,0,0,0)/(0,0,0,2,0,0,0)/(0,0,1,1,1,1,0)/(0,0,1,1,0,0,1)^2/(0,0,0,0,2,0,0)/(0,0,0,0,0,2,0)/(0,0,0,0,1,1,1)^2/(0,0,0,0,0,0,2)/(0,0,0,0,0,0,0)^3]")
w[2]=expand("[(2,0,0,0,0,0,0)/(0,2,0,0,0,0,0)/(1,1,1,1,0,0,0)/(1,1,0,0,1,1,0)/(1,1,0,0,0,0,2)/(1,1,0,0,0,0,0)/(0,0,2,0,0,0,0)/(0,0,0,2,0,0,0)/(0,0,1,1,1,1,0)/(0,0,1,1,0,0,2)/(0,0,1,1,0,0,0)/(0,0,0,0,2,0,0)/(0,0,0,0,0,2,0)/(0,0,0,0,1,1,2)/(0,0,0,0,1,1,0)/(0,0,0,0,0,0,2)^2]")



#print(classifyIncomplete(w[1],basisA17,orderList7))
#print(classifyIncomplete(w[2],basisA17,orderList7))






###############################################################
###############################################################
###########A16
###############################################################
###############################################################
print("//////////////////////////////////////////////////")
print("A16")
print("//////////////////////////////////////////////////")

orderList = order(6)

a=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
additional = []
basisA16 =[[0]]



l1=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
l2=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
l5=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
l5b=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
L=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

#ORDERED as in final table

#2 and 6 are conjugate(checked)---->1

l1[1]=expand("[(1,1,0,0)/(0,1,1,0)/(0,0,1,1)]")
l5[1]=expand("[(1,1,0,1)/(1,0,2,0)/(1,0,0,0)/(0,2,1,0)/(0,0,1,0)/(0,1,1,1)]")
l5b[1]=expand("[(1,1,1,0)/(1,0,1,1)/(0,2,0,1)/(0,0,0,1)/(0,1,2,0)/(0,1,0,0)]")

#l1[6]=expand("[(1,1,0,0)/(0,1,1,0)/(0,0,0,2)/(0,0,0,0)]")
#l5[6]=expand("[(1,1,0,1)/(1,0,1,1)/(0,2,0,1)/(0,0,0,1)/(0,1,1,1)]")
#l5b[6]=expand("[(1,1,0,1)/(1,0,1,1)/(0,2,0,1)/(0,0,0,1)/(0,1,1,1)]")


#4 and 8 are conjugate(checked) -->2

l1[2]=expand("[(1,1,0,0)/(0,0,1,0)^2/(0,0,0,1)^2]")
l5[2]=expand("[(1,0,1,0)^2/(1,0,0,1)^2/(0,1,1,1)/(0,1,0,0)^4]")
l5b[2]=expand("[(0,1,1,0)^2/(0,1,0,1)^2/(1,0,1,1)/(1,0,0,0)^4]")

#l1[8]=expand("[(1,1,0,0)/(0,0,1,1)/(0,0,0,0)^4]")
#l5[8]=expand("[(1,0,1,0)^2/(1,0,0,1)^2/(0,1,1,0)^2/(0,1,0,1)^2]")
#l5b[8]=expand("[(1,0,1,0)^2/(1,0,0,1)^2/(0,1,1,0)^2/(0,1,0,1)^2]")


#1 and 11 are conjugate(checked) -->3

l1[3]=expand("[(4,0,0,0)/(0,1,1,0)/(0,0,0,2)]")
l5[3]=expand("[(3,1,0,1)/(3,0,1,1)]")
l5b[3]=expand("[(3,1,0,1)/(3,0,1,1)]")

#l1[11]=expand("[(3,1,0,0)/(0,0,1,1)]")
#l5[11]=expand("[(4,0,1,0)/(0,2,1,0)/(3,1,0,1)]")
#l5b[11]=expand("[(4,0,0,1)/(0,2,0,1)/(3,1,1,0)]")


#3 and 9 are conjugate(checked) -->4

l1[4]=expand("[(1,1,0,0)/(0,0,1,1)^2]")
l5[4]=expand("[(1,0,1,1)^2/(0,1,2,0)/(0,1,0,0)/(0,1,0,2)/(0,1,0,0)]")
l5b[4]=expand("[(0,1,1,1)^2/(1,0,2,0)/(1,0,0,0)/(1,0,0,2)/(1,0,0,0)]")

#l1[9]=expand("[(1,1,0,0)/(0,0,2,0)/(0,0,0,2)/(0,0,0,0)^2]")
#l5[9]=expand("[(1,0,1,1)^2/(0,1,1,1)^2]")
#l5b[9]=expand("[(1,0,1,1)^2/(0,1,1,1)^2]")



#5


l1[5]=expand("[(1,1,0,0)/(0,0,1,1)/(0,0,0,2)/(0,0,0,0)]")
l5[5]=expand("[(1,0,1,1)/(1,0,0,2)/(1,0,0,0)/(0,1,1,1)/(0,1,0,2)/(0,1,0,0)]")
l5b[5]=expand("[(1,0,1,1)/(1,0,0,2)/(1,0,0,0)/(0,1,1,1)/(0,1,0,2)/(0,1,0,0)]")



#7 and 13 are conjugate(checked) -->6

l1[6]=expand("[(1,1,0,0)/(0,0,1,0)^2/(0,0,0,2)/(0,0,0,0)]")
l5[6]=expand("[(1,0,1,1)/(1,0,0,1)^2/(0,1,1,1)/(0,1,0,1)^2]")
l5b[6]=expand("[(1,0,1,1)/(1,0,0,1)^2/(0,1,1,1)/(0,1,0,1)^2]")

#l1[13]=expand("[(1,1,0,0)/(0,0,1,1)/(0,0,0,1)^2]")
#l5[13]=expand("[(1,0,1,0)^2/(1,0,0,2)/(1,0,0,0)/(0,1,1,1)/(0,1,0,1)^2]")
#l5b[13]=expand("[(1,0,1,1)/(1,0,0,1)^2/(0,1,1,0)^2/(0,1,0,2)/(0,1,0,0)]")



#7


l1[7]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)]")
l5[7]=expand("[(1,1,1,1)^2]")
l5b[7]=expand("[(1,1,1,1)^2]")


#8


l1[8]=expand("[(1,1,0,0)/(0,1,1,0)/(0,0,0,1)^2]")
l5[8]=expand("[(1,1,0,0)^2/(1,0,1,1)/(0,2,0,1)/(0,0,0,1)/(0,1,1,0)^2]")
l5b[8]=expand("[(1,1,0,1)/(1,0,1,0)^2/(0,2,0,0)^2/(0,0,0,0)^2/(0,1,1,1)]")


#9

l1[9]=expand("[(1,1,0,0)/(0,1,1,0)/(0,1,0,1)]")
l5[9]=expand("[(1,1,0,1)/(1,1,1,0)/(0,3,0,0)/(0,1,0,0)^2/(0,1,1,1)]")
l5b[9]=expand("[(1,2,0,0)/(1,0,0,0)/(1,0,1,1)/(0,2,0,1)/(0,0,0,1)/(0,2,1,0)/(0,0,1,0)]")





basisA16=[[0]]
orderList6=order(6)
basisA16Lambda1=[[0]]

for i in range(1,10):
    l2[i]=wedge2(l1[i])

print("Building the basis")
for i in range(1,10):
    temp=concat([(1,1)],l1[i])
    temp = temp+concat([(1,0)],l5[i])
    temp = temp+[(2,0,0,0,0,0),(0,2,0,0,0,0)]
    temp=temp+concat([(0,0)],l2[i])
    L[i] = temp+concat([(0,1)],l5b[i])
    print("i= "+str(i))
    t=checker(L[i],basisA16,orderList6)
    print(t)
    if t==-1:
        basisA16.append(L[i])
        basisA16Lambda1.append(l1[i])


#print("This is the basis of A16")
#for i in range(0,len(basisA16)):
#    print(str(i)+" : "+latex(basisA16Lambda1[i]))

#LATEX
#print("A16 for latex")


test=[(1,2,3),(3,4,5),(1,2,3)]
lat=latex(test)
La=[]
i=1
while i<len(lat)-1:
    temp=""
    while lat[i]!="/" and i<len(lat)-1:
        temp=temp+lat[i]
        i=i+1
    i=i+1
    La.append(temp)



for i in range(1,1):
    #test=[(1,2,3),(3,4,5),(1,2,3)]
    lat=latex(L[i])
    Lie=[]
    i2=1
    while i2<len(lat)-1:
        temp=""
        while lat[i2]!="/" and i2<len(lat)-1:
            temp=temp+lat[i2]
            i2=i2+1
        i2=i2+1
        Lie.append(temp)

    lat=latex(l1[i])
    lambda1=[]
    i2=1
    while i2<len(lat)-1:
        temp=""
        while lat[i2]!="/" and i2<len(lat)-1:
            temp=temp+lat[i2]
            i2=i2+1
        i2=i2+1
        lambda1.append(temp)
    
    j=0
    j2=0
    p=str(i)+"&"
    while j<len(Lie):
        t=0
        t2=0
        tester = False
        c=0
        while j2+t2<len(lambda1) and t2<2:
            if tester==False:
                p=p+"$"
            tester=True
            p=p+lambda1[j2+t2]
            if j2+t2!=len(lambda1)-1:
                p=p+"/"
            t2=t2+1
        if tester:
            p=p+"$ & "
        else :
            p=p+"&"
            
        while j+t<len(Lie) and t<4:
            if t==0:
                p=p+"$"
            p=p+Lie[j+t]
            if j+t!=len(Lie)-1:
                p=p+"/"
            t=t+1
            
        j=j+4
        j2=j2+2
        print(p+"$  \\\\ " )
        print(" ")
        p="&"
    print("\\hline")
    

for i in range(1,1):
    
    j=0
    j2=0
    p=str(i)+"&"
    while j<len(L[i]):
        t=0
        t2=0
        tester = False
        c=0
        while j2+t2<len(l1[i]) and t2<2:
            if tester==False:
                p=p+"$"
            tester=True
            p=p+str(l1[i][j2+t2])
            if j2+t2!=len(l1[i])-1:
                p=p+"/"
            t2=t2+1
        if tester:
            p=p+"$ & "
        else :
            p=p+"&"
            
        while j+t<len(L[i]) and t<4:
            if t==0:
                p=p+"$"
            p=p+str(L[i][j+t])
            if j+t!=len(L[i])-1:
                p=p+"/"
            t=t+1
            
        j=j+4
        j2=j2+2
        print(p+"$  \\\\ " )
        print(" ")
        p="&"
    print("\\hline")



print("Checking that the basis has len 7:")
print(len(basisA16))




#A15 is in D6
print("A15 is in D6")
print("First one")
t=removeA1(basisA18[1],1)
t2=diagA1(t,1,2)      
print(checker(t2,basisA16,orderList6))
#print(latex(t2))

print("Second one ")
t=removeA1(basisA18[1],1)
t2=removeA1(t,1)   
print(checker(t2,basisA16,orderList6))
#print(latex(t2))
#basisA16.append(t2)





#A15 in A1D6 with diag
print("A15 is in A1D6 with diag ")
print(len(basisA17))
t=diagA1(basisA18[1],2,3)
t2=diagA1(t,1,2)      
print("1: "+str(checker(t2,basisA16,orderList6)))
#basis2.append(t2)

     
t=diagA1(basisA18[1],2,3)
t2=diagA1(t,2,3)
print("2 : "+str(checker(t2,basisA16,orderList6)))
#basis2.append(t2)

t=diagA1(basisA18[1],2,3)
t2=diagA1(t,2,4)
print("3 : "+str(checker(t2,basisA16,orderList6)))
#basis2.append(t2)

t=removeA1(basisA18[1],2)
t2=diagA1(t,1,3)
print("4 : "+str(checker(t2,basisA16,orderList6)))
#basis2.append(t2)

#t=diagA1(basisA18[1],2,7)
#t2=removeA1(t,7)
#print(t2[1])
#print(checker(t2,basis2,orderList6))
#basis2.append(t2)





#In A1B4 in A1F4

temp=expand("[(1,1,1,0,1,0)/(1,1,1,0,0,1)/(1,1,0,1,1,0)/(1,1,0,1,0,1)/(1,1,1,1,0,0)/(1,1,0,0,1,1)/(1,1,0,0,0,0)^2/(1,3,0,0,0,0)/(0,2,1,1,0,0)/(0,2,0,0,1,1)/(0,2,0,0,0,0) /(0,2,1,0,1,0)/(0,2,1,0,0,1)/(0,2,0,1,1,0)/(0,2,0,1,0,1)/(0,2,0,0,0,0)^2/(0,0,2,0,0,0)/(0,0,0,2,0,0)/(0,0,0,0,2,0)/(0,0,0,0,0,2)/(0,0,1,1,1,1)/(0,0,1,1,0,0)/(0,0,0,0,1,1)/ (0,0,1,0,1,0)/(0,0,1,0,0,1)/(0,0,0,1,1,0)/(0,0,0,1,0,1)/(2,0,0,0,0,0)]")
print("In A1B4 in A1F4")
print(dimChecker(temp))
print(checker(temp,basisA16,orderList6))



# In G2C3
print("in G2C3")

temp2=expand("[ (1,0,2,1,0,0)/(1,1,1,1,0,0)/(1,0,2,0,1,0)/(1,1,1,0,1,0)/(1,0,2,0,0,1)/(1,1,1,0,0,1)/(1,0,0,1,1,1)/(1,0,0,1,0,0)/(1,0,0,0,1,0)/(1,0,0,0,0,1)/ (0,0,2,0,0,0)^2/(0,1,1,0,0,0)^2/(0,0,2,1,1,0)/(0,1,1,1,1,0)/(0,0,2,1,0,1)/(0,1,1,1,0,1)/(0,0,2,0,1,1)/(0,1,1,0,1,1)/(0,2,0,0,0,0)/(0,0,2,0,0,0)/ (0,1,3,0,0,0)/(0,0,0,2,0,0)/(0,0,0,0,2,0)/(0,0,0,0,0,2)/(0,0,0,1,1,0)/(0,0,0,1,0,1)/ (0,0,0,0,1,1)/(2,0,0,0,0,0)]")
print(dimChecker(temp2))
print(checker(temp2,basisA16,orderList6))















#In E7
print("In E7:")

orderList6=order(6)

print("A")
tester1 = removeA1(basisA18[1],1)
tester1= diagA1(tester1,1,2)
print(checker(tester1,basisA16,orderList6))
print(dimChecker(tester1))

print("B")
tester2 = removeA1(basisA18[1],1)
tester2= removeA1(tester2,1)
print(checker(tester2,basisA16,orderList6))
print(dimChecker(tester2))




#InA1E7withdiag

orderList6=order(6)
#print("A16 in A17 with diag")
tester1 = diagA1(basisA16[1],1,2)
tester2 = diagA1(basisA16[1],1,3)
tester3 = diagA1(basisA16[2],1,2)
#print(checker(tester1,basis2,orderList6))
#print(checker(tester2,basis2,orderList6))
#print(checker(tester3,basis2,orderList6))

#print(len(basisA16))
temp=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
testBasisA16=[[0]]
#Removing two
temp[0]=removeA1(basisA18[1],1)
a[0]=removeA1(temp[0],1)

temp[1]=removeA1(basisA18[1],1)
a[1]=removeA1(temp[1],2)

temp[2]=removeA1(basisA18[1],3)
a[2]=removeA1(temp[2],3)

temp[3]=removeA1(basisA18[1],3)
a[3]=removeA1(temp[3],4)

#Diag of 3 A1
temp[4]=diagA1(basisA18[1],1,2)
a[4]=diagA1(temp[4],1,2)

temp[5]=diagA1(basisA18[1],1,3)
a[5]=diagA1(temp[5],1,3)

temp[6]=diagA1(basisA18[1],1,3)
a[6]=diagA1(temp[6],1,4)

temp[7]=diagA1(basisA18[1],3,4)
a[7]=diagA1(temp[7],1,4)

temp[8]=diagA1(basisA18[1],3,5)
a[8]=diagA1(temp[8],1,6)



#Diag 2 and remove one

temp[9]=diagA1(basisA18[1],1,2)
a[9]=removeA1(temp[9],2)

temp[9]=diagA1(basisA18[1],3,4)
a[10]=removeA1(temp[9],2)

temp[9]=diagA1(basisA18[1],3,4)
a[11]=removeA1(temp[9],4)

temp[9]=diagA1(basisA18[1],3,5)
a[12]=removeA1(temp[9],2)

temp[9]=diagA1(basisA18[1],3,5)
a[13]=removeA1(temp[9],4)

temp[9]=diagA1(basisA18[1],3,5)
a[14]=removeA1(temp[9],6)

for i in range(0,0):
    print("Case "+str(i))
    t=checker(a[i],basisA16,orderList6)
    print(t)
    if t==-1:
        #basisA16.append(a[i])
        basis2.append(a[i])
        #print("it's index in basisA16:")
        #print(checker(a[i],basis2,orderList6))
#print("len ="+str(len(basis2)))



#In D8
        
#In D8
print("In D8:")
d=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
sol=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
e=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]


d[1]=expand("[(1,1,0,0,0,0)/(0,0,1,1,0,0)/(0,0,0,0,1,1)/(0,0,0,0,0,0)^4]")
d[2]=expand("[(1,1,0,0,0,0)/(0,0,1,1,0,0)/(0,0,0,0,1,1)^2]")
d[3]=expand("[(1,1,0,0,0,0)/(0,0,1,1,0,0)/(0,0,0,0,1,1)/(1,0,1,0,0,0)]")
d[4]=expand("[(1,1,0,0,0,0)/(0,0,1,1,0,0)/(0,0,0,0,1,1)/(0,0,0,0,0,1)^2]")
d[5]=expand("[(1,1,0,0,0,0)/(0,0,1,1,0,0)/(0,0,0,1,1,0)/(0,0,0,0,0,1)^2]")
d[6]=expand("[(1,1,0,0,0,0)/(0,0,1,1,0,0)/(0,0,0,0,1,0)^2/(0,0,0,0,0,1)^2]")
d[7]=expand("[(1,0,0,0,0,0)^2/(0,1,1,0,0,0)/(0,0,0,1,1,0)/(0,0,0,0,0,2)/(0,0,0,0,0,0)]")
d[8]=expand("[(1,1,0,0,0,0)/(0,1,1,0,0,0)/(0,0,0,1,1,0)/(0,0,0,0,0,2)/(0,0,0,0,0,0)]")
d[9]=expand("[(1,0,0,0,0,1)/(0,1,1,0,0,0)/(0,0,0,1,1,0)/(0,0,0,0,0,2)/(0,0,0,0,0,0)]")


for i in range(1,10):
        sol[i]= wedge2(d[i])


for i in range(1,1):
        print(i)
        print(classifyIncomplete(sol[i],basisA16,orderList))

        
#In G2F4
print("G2F4")
t=expand("[(0,2,1,1,0,0)/(0,2,0,0,1,1)/(0,2,0,0,0,0)/(1,1,1,1,0,0)/(1,1,0,0,1,1)/(1,1,0,0,0,0)/(0,2,1,0,1,0)/(0,2,1,0,0,1)/(0,2,0,1,1,0)/(0,2,0,1,0,1)/(1,1,1,0,1,0)/(1,1,1,0,0,1)/(1,1,0,1,1,0)/(1,1,0,1,0,1)/(0,2,0,0,0,0)/(1,1,0,0,0,0)/(2,0,0,0,0,0)/(0,2,0,0,0,0)/(1,3,0,0,0,0)/(0,0,2,0,0,0)/(0,0,0,2,0,0)/(0,0,1,1,1,1)/(0,0,1,1,0,0)/(0,0,0,0,2,0)/(0,0,0,0,0,2)/(0,0,0,0,1,1)/(0,0,1,0,1,0)/(0,0,1,0,0,1)/(0,0,0,1,1,0)/(0,0,0,1,0,1)]")
print(checker(t,basisA16,orderList))


        

print("len of basisA16: "+str(len(basisA16)))

#//////////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////
#A15 //////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////
print("//////////////////////////////////////////////////")
print("A15")
print("//////////////////////////////////////////////////")

#In A1E7



#A14inE7 with final order
orderList = order(4)
a=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
lambda1=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
lambda2=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
lambda5=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
lambda6=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
LE8=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]

additional = []


#1rst case is 7 and 13 (already checked and are equal)
#7&      $ (3,0,0)^2/(0,1,1)$		&  $
a[1]=expand("[(0,6,0,0)/(0,4,0,0)^3/(0,3,1,1)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(1,4,0,1)/(1,3,1,0)^2/(1,0,0,1)^3/(0,0,0,0)^3]")
lambda1[1]=expand("[(3,0,0)^2/(0,1,1)]")
lambda2[1]=wedge2(lambda1[1])
lambda5[1]=expand("[(3,1,0),(3,1,0),(4,0,1),(0,0,1)^3]")
lambda6[1]=expand("[(3,0,1),(3,0,1),(4,1,0),(0,1,0)^3]")


#13 (4,0,0)/(0,1,1)/(0,0,0)^3
#lambda1[2]=expand("[(4,0,0)/(0,1,1)/(0,0,0)^3]")
#lambda2[2]=wedge2(lambda1[2])
#lambda5[2]=expand("[(3,1,0)^2,(3,0,1)^2]")
#lambda6[2]=expand("[(3,1,0)^2,(3,0,1)^2]")




#20&      $ (1,0,0)^2/(0,1,0)^2/(0,0,1)^2$		&  $
a[2]=expand("[  (2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,1,1,0)^4/(0,1,0,1)^4/(0,0,1,1)^4/(0,0,0,0)^9/(1,1,1,0)^2/(1,1,0,1)^2/ (1,0,0,0)^8/(1,0,1,1)^2/]")
lambda1[2]=expand("[(1,0,0)^2/(0,1,0)^2/(0,0,1)^2]")
lambda2[2]=wedge2(lambda1[2])
lambda5[2]=expand("[(1,1,0)^2/(1,0,1)^2/(0,1,1)^2/(0,0,0)^8]")
lambda6[2]=expand("[(1,1,1)/(1,0,0)^4/(0,1,0)^4/(0,0,1)^4]")




#27&      $ (1,1,0)/(0,0,1)^2/$		&  $
a[3]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(1,1,1,0)^2/(1,1,0,1)^2/(1,0,1,1)^2/(0,1,1,0)^4/(0,1,0,1)^4/(0,0,1,1)^4/(1,0,0,0)^8/(0,0,0,0)^9]")
a[3]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,1,1,1)^2/(0,1,1,0)^4/(0,0,0,1)^8/(1,1,0,1)^2/(1,1,0,0)^4/(1,0,1,1)^2/(1,0,1,0)^4/(0,0,0,0)^9]")

lambda1[3]=expand("[(1,1,0)/(0,0,1)^2/(0,0,0)^4]")
lambda2[3]=wedge2(lambda1[3])
lambda5[3]=expand("[(1,0,1)^2/(1,0,0)^4/(0,1,1)^2/(0,1,0)^4]")
lambda6[3]=expand("[(1,0,1)^2/(1,0,0)^4/(0,1,1)^2/(0,1,0)^4]")



#28&      $ (1,1,0)/(0,2,0)/$		&    $
a[4]=expand("[(0,0,2,2)/(0,1,3,0)/(1,0,2,1)^2/(0,1,1,2)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^4/(0,0,0,2)^3/(1,1,1,1)^2/(1,0,0,1)^2/(0,1,1,0)^3/(0,0,0,0)  ]")
lambda1[4]=expand("[ (1,1,0)/(0,2,0)/(0,0,2)/(0,0,0)^2]")
lambda2[4]=wedge2(lambda1[4])
lambda5[4]=expand("[(1,1,1)^2/(0,2,1)^2/(0,0,1)^2]")
lambda6[4]=expand("[(1,1,1)^2/(0,2,1)^2/(0,0,1)^2]")


#25&      $ (1,0,0)^2/(0,1,0)^2/$		&  $
a[5]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)^2/(0,1,0,2)^2/(0,0,1,2)^2/(0,1,1,0)^4/(0,1,0,0)^2/(0,0,1,0)^2/(1,1,1,1)/(1,1,0,1)^2/(1,0,1,1)^2/ (1,0,0,1)^4/(0,0,0,0)^6]")
lambda1[5]=expand("[(1,0,0)^2/(0,1,0)^2/(0,0,2)/(0,0,0)]")
lambda2[5]=wedge2(lambda1[5])
lambda5[5]=expand("[(1,1,1)/(1,0,1)^2/(0,1,1)^2/(0,0,1)^4]")
lambda6[5]=expand("[(1,1,1)/(1,0,1)^2/(0,1,1)^2/(0,0,1)^4]")




#26&      $ (1,1,0)/(0,1,1)/$		&  $
a[6]=expand("[(0,1,2,1)/(1,0,2,0)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^2/(0,0,0,2)/(1,1,1,0)^2/(1,1,0,1)^2/(1,0,1,1)^2/(0,1,1,0)^4/(0,1,0,1)/(0,0,1,1)^4/(1,0,0,0)^2/(0,0,0,0)^6]")
lambda1[6]=expand("[(1,1,0)/(0,1,1)/(0,0,0)^4]")
lambda2[6]=wedge2(lambda1[6])
lambda5[6]=expand("[(1,1,0)^2/(1,0,1)^2/(0,2,0)^2/(0,0,0)^2/(0,1,1)^2]")
lambda6[6]=expand("[(1,1,0)^2/(1,0,1)^2/(0,2,0)^2/(0,0,0)^2/(0,1,1)^2]")



# 30 and 32 are conjugate (already checked and are equal)
#30&      $ (1,1,0)/(0,0,2)/$		&  $
a[7]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)^6/(0,1,1,2)/(0,1,1,0)^5/(1,1,0,1)^4/(1,0,1,1)^4/(0,0,0,0)^{10}]")
lambda1[7]=expand("[(1,1,0)/(0,0,2)/(0,0,0)^5]")
lambda2[7]=wedge2(lambda1[7])
lambda5[7]=expand("[(1,0,1)^4/(0,1,1)^4]")
lambda6[7]=expand("[(1,0,1)^4/(0,1,1)^4]")
#32& $(1,1,0)/(0,0,1)^4$ &$
#a[8]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)^6/(0,1,1,2)/(0,1,1,0)^5/(1,1,0,1)^4/(1,0,1,1)^4/(0,0,0,0)^9/(0,0,0,0)]")
#lambda1[8]=expand("[(1,1,0)/(0,0,1)^4]")
#lambda2[8]=wedge2(lambda1[8])
#lambda5[8]=expand("[(1,0,1)^4/(0,1,2)/(0,1,0)^5]")
#lambda6[8]=expand("[(1,0,2)/(1,0,0)^5/(0,1,1)^4]")




# 29 and 17 are conjugate (already checked and are equal)
#29&      $ (1,0,0)^2/(0,2,0)/$		&  $
a[8]=expand("[(0,2,2,0)/(1,2,0,0)^2/(1,0,2,0)^2/(2,0,0,0)/(0,2,0,0)^3/(0,0,2,0)^3/(0,0,0,2)/(1,1,1,1)^2/(0,1,1,1)^4/(1,0,0,0)^4/(0,0,0,0)^4]")
lambda1[8]=expand("[(1,0,0)^2/(0,2,0)/(0,0,2)/(0,0,0)^2]")
lambda2[8]=wedge2(lambda1[8])
lambda5[8]=expand("[(1,1,1)^2/(0,1,1)^4]")
lambda6[8]=expand("[(1,1,1)^2/(0,1,1)^4]")

#17&      $ (1,1,0)^2/(0,0,1)^2$		&  $
#a[8]=expand("[(0,2,2,0)/(1,2,0,0)^2/(1,0,2,0)^2/(2,0,0,0)/(0,2,0,0)^3/(0,0,2,0)^3/(0,0,0,2)/(1,1,1,1)^2/(0,1,1,1)^4/(1,0,0,0)^4/(0,0,0,0)^4]")
#lambda1[9]=expand("[(1,1,0)^2/(0,0,1)^2]")
#lambda2[9]=wedge2(lambda1[9])
#lambda5[9]=expand("[(2,0,0)^2/(0,0,0)^2/(1,1,1)^2/(0,2,0)^2/(0,0,0)^2]")
#lambda6[9]=expand("[(2,0,1)/(0,0,1)/(1,1,0)^4/(0,2,1)/(0,0,1)]")






#1&      $ (2,1,1)$		&  $
a[9]=expand("[(0,4,2,0)/(0,4,0,2)/(0,2,2,2)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(1,2,1,2)/(1,4,1,0)/(1,0,3,0)]")
lambda1[9]=expand("[(2,1,1)]")
lambda2[9]=wedge2(lambda1[9])
lambda5[9]=lambda5fct(a[9])
lambda6[9]=lambda5fct(a[9])

#2&      $ (2,2,0)/(0,0,2)$		&  $
a[10]=expand("[(0,4,2,0)/(0,2,4,0)/(1,3,1,1)/(1,1,3,1)/(0,2,2,2)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)]")
lambda1[10]=expand("[(2,2,0)/(0,0,2)]")
lambda2[10]=wedge2(lambda1[10])
lambda5[10]=lambda5fct(a[10])
lambda6[10]=lambda5fct(a[10])
#print("220/002 lambda5:")
#print(latex(lambda5[10]))



#3&      $ (3,1,0)/(0,1,1)$		&  $
a[11]=expand("[(0,6,0,0)/(0,4,2,0)/(0,3,2,1)/(0,3,0,1)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^2/(0,0,0,2)/  (1,3,2,0)/(1,4,0,1)/(1,0,2,1)/(1,3,0,0)]")
lambda1[11]=expand("[(3,1,0)/(0,1,1)]")
lambda2[11]=wedge2(lambda1[11])
lambda5[11]=[(3,2,0),(3,0,0),(4,0,1),(0,2,1)]
lambda6[11]=[(3,1,1),(4,1,0),(0,3,0),(0,1,0)]

#a[4]=expand("[(0,6,0,0)/(0,4,2,0)/(0,3,2,1)/(0,3,0,1)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^2/(0,0,0,2)/ (1,4,1,0)/(1,3,1,1)/(1,0,3,0)/(1,0,1,0)]")


#4&      $ (3,1,0)/(1,0,1)$		&  $
a[12]=expand("[  (0,6,0,0)/(0,4,2,0)/(0,4,1,1)/(0,2,1,1)/(2,0,0,0)/(0,2,0,0)^2/(0,0,2,0)/(0,0,0,2)/ (1,4,1,0)/(1,2,1,0)/(1,4,0,1)/(1,0,2,1)]")
lambda1[12]=expand("[(3,1,0)/(1,0,1)]")
lambda2[12]=wedge2(lambda1[12])
lambda5[12]=[(3,1,1),(5,0,0),(3,0,0),(1,2,0)]
lambda6[12]=[(4,1,0),(2,1,0),(4,0,1),(0,2,1)]

#5&      $ (3,1,0)/(0,0,1)^2$		&  $
a[13]=expand("[(0,6,0,0)/(0,4,2,0)/(0,3,1,1)^2/(1,3,1,0)^2/(1,4,0,1)/(1,0,2,1)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,0,0,0)^3]")
lambda1[13]=expand("[(3,1,0)/(0,0,1)^2]")
lambda2[13]=wedge2(lambda1[13])
lambda5[13]=expand("[(3,1,1),(4,0,0)^2,(0,2,0)^2]")
lambda6[13]=expand("[(3,1,0)^2,(4,0,1),(0,2,1)]")




#6&      $ (3,1,0)/(0,0,2)/$		&  $
a[14]=expand("[(0,6,0,0)/(0,4,2,0)/(0,3,1,2)/(1,3,1,1)/(1,4,0,1)/(0,3,1,0)/(1,0,2,1)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)^2]")
lambda1[14]=expand("[(3,1,0)/(0,0,2)/(0,0,0)]")
lambda2[14]=wedge2(lambda1[14])
lambda5[14]=[(3,1,1),(4,0,1),(0,2,1)]
lambda6[14]=[(3,1,1),(4,0,1),(0,2,1)]



#8&      $ (6,0,0)/(0,1,1)/$		&  $
a[15]=expand("[(0,10,0,0)/(1,6,1,0)/(0,6,1,1)/(1,6,0,1)/(0,6,0,0)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,0,1,1)/(1,0,0,1)/(1,0,1,0)]")
lambda1[15]=expand("[(6,0,0)/(0,1,1)/(0,0,0)]")
lambda2[15]=wedge2(lambda1[15])
lambda5[15]=lambda5fct(a[15])
lambda6[15]=lambda5fct(a[15])
print("lambda5 for 600/011/000")
print(lambda5[15])

#9&      $ (4,0,0)/(1,1,0)/$		& $
a[16]=expand("[(0,6,0,0)/(0,4,0,2)/(1,4,0,1)/(0,5,1,0)/(1,3,1,1)/(0,3,1,0)/(0,1,1,2)/(1,2,0,1)/(2,0,0,0)/(0,2,0,0)^2/(0,0,2,0)/(0,0,0,2)]")
lambda1[16]=expand("[(4,0,0)/(1,1,0)/(0,0,2)]")
lambda2[16]=wedge2(lambda1[16])
lambda5[16]=[(4,0,1),(2,0,1),(3,1,1)]
lambda6[16]=[(4,0,1),(2,0,1),(3,1,1)]




#10&      $ (4,0,0)/(0,1,1)/$		&  $
a[17]=expand("[(0,6,0,0)^2/(1,4,1,0)/(1,4,0,1)/(0,4,1,1)/(0,4,0,0)/(1,2,1,0)/(1,2,0,1)/(0,2,1,1)/(2,0,0,0)/(0,2,0,0)^3/(0,0,2,0)/(0,0,0,2)]")
lambda1[17]=expand("[(4,0,0)/(0,1,1)/(2,0,0)]")
lambda2[17]=wedge2(lambda1[17])
lambda5[17]=expand("[(4,1,0)/(2,1,0)/(4,0,1)/(2,0,1)]")
lambda6[17]=expand("[(4,1,0)/(2,1,0)/(4,0,1)/(2,0,1)]")

#11&      $ (4,0,0)/(0,1,1)/$		&  $
lambda1[18]=expand("[(4,0,0)/(0,1,1)/(0,0,2)]")
lambda2[18]=wedge2(lambda1[18])
lambda5[18]=expand("[(3,1,1)/(3,0,2)/(3,0,0)]")
lambda6[18]=expand("[(3,1,1)/(3,0,2)/(3,0,0)]")


#12&      $ (4,0,0)/(0,1,0)^2/$		&  $
a[19]=expand("[(0,6,0,0)/(0,4,0,2)/(0,4,1,0)^2/(1,3,1,1)/(1,3,0,1)^2/(0,0,1,2)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,0,0,0)^3]")
lambda1[19]=expand("[(4,0,0)/(0,1,0)^2/(0,0,2)]")
lambda2[19]=wedge2(lambda1[19])
lambda5[19]=expand("[(3,1,1)/(3,0,1),(3,0,1)]")
lambda6[19]=expand("[(3,1,1)/(3,0,1),(3,0,1)]")


#14&      $ (4,0,0)/(0,2,0)/$		&  $
a[20]=expand("[(0,6,0,0)/(0,4,2,0)/(0,4,0,2)/(1,3,1,1)^2/(0,4,0,0)/(0,0,2,2)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^2/(0,0,0,2)^2]")
lambda1[20]=expand("[(4,0,0)/(0,2,0)/(0,0,2)/(0,0,0)]")
lambda2[20]=wedge2(lambda1[20])
lambda5[20]=expand("[(3,1,1)^2]")
lambda6[20]=expand("[(3,1,1)^2]")

#16&      $ (1,1,0)/(1,0,1)/$		&  $
a[21]=expand("[(0,2,1,1)/(0,1,2,1)/(0,1,1,2)/(2,0,0,0)/(0,2,0,0)^2/(0,0,2,0)^2/(0,0,0,2)^2/(0,1,1,0)/(0,1,0,1)/(0,0,1,1)/(1,2,1,0)/(1,0,2,1)/(1,1,0,2)/(1,1,0,0)/(1,0,1,0)/(1,0,0,1)/(1,1,1,1)]")
lambda1[21]=expand("[ (1,1,0)/(1,0,1)/(0,1,1)]")
lambda2[21]=wedge2(lambda1[21])
lambda5[21]=expand("[(2,0,1)/(0,0,1)/(1,1,1)/(1,2,0)/(1,0,0)/(0,1,2)/(0,1,0)]")
lambda6[21]=expand("[(2,1,0)/(0,1,0)/(1,0,2)/(1,0,0)/(1,1,1)/(0,2,1)/(0,0,1)]")



#18&      $ (1,1,0)/(0,1,1)/$		&  $
a[22]=expand("[(0,1,2,1)/(0,0,1,2)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^2/(0,0,0,2)^2/(0,1,1,1)^2/(0,1,0,1)/(0,0,1,0)^2/(0,0,0,0)^3/(1,1,1,1)/(1,0,2,0)^2/(1,0,1,2)/(1,1,0,1)^2/(1,0,1,0)/(1,0,0,0)^2 ]")
lambda1[22]=expand("[(1,1,0)/(0,1,1)/(0,0,1)^2]")
lambda2[22]=wedge2(lambda1[22])
lambda5[22]=expand("[(1,1,0)^2/(1,0,2)/(1,0,0)/(0,2,1)/(0,0,1)/(0,1,1)^2]")
lambda6[22]=expand("[(1,1,1)/(1,0,1)^2/(0,2,0)^2/(0,0,0)^2/(0,1,2)/(0,1,0)]")


#21&      $ (1,1,0)^2/(0,0,2)/$		&  $
a[23]=expand("[  (0,2,2,0)/(1,2,0,1)/(1,0,2,1)/(0,1,1,2)^2/(2,0,0,0)/(0,2,0,0)^3/(0,0,2,0)^3/(0,0,0,2)^2/(1,1,1,1)^2/(1,0,0,1)^2/(0,1,1,0)^2/(0,0,0,0)]")
lambda1[23]=expand("[(1,1,0)^2/(0,0,2)/(0,0,0)]")
lambda2[23]=wedge2(lambda1[23])
lambda5[23]=expand("[(2,0,1)/(0,0,1)/(1,1,1)^2/(0,2,1)/(0,0,1)]")
lambda6[23]=expand("[(2,0,1)/(0,0,1)/(1,1,1)^2/(0,2,1)/(0,0,1)]")

#22&      $ (1,1,0)/(0,1,1)/$		&  $
a[24]=expand("[(0,0,1,3)/(0,1,2,1)/(0,1,1,2)/(1,1,0,2)/(1,0,1,2)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^2/(0,0,0,2)^3/(1,1,1,1)/(1,1,0,0)/(1,0,1,0)/(1,0,0,1)/(0,1,1,0)/(0,1,0,1)/(0,0,1,1)^2]")
a[24]=expand("[(2,0,0,0)/(0,2,0,0)/(0,3,1,0)/(0,1,1,0)^2/(0,2,1,1)/(0,2,0,0)^2/(0,0,2,0)^2/(0,1,2,1)/(0,1,0,1)/(0,0,0,2)/(0,0,1,1)/(1,2,1,0)/(1,0,1,0)/(1,1,1,1)/(1,2,0,1)/(1,0,0,1)/(1,1,2,0)/(1,1,0,0)]")
lambda1[24]=expand("[(1,1,0)/(0,1,1)/(0,0,2)/(0,0,0)]")
lambda2[24]=wedge2(lambda1[24])
lambda5[24]=expand("[(1,1,1)/(1,0,2)/(1,0,0)/(0,2,1)/(0,0,1)/(0,1,2)/(0,1,0)]")
lambda6[24]=expand("[(1,1,1)/(1,0,2)/(1,0,0)/(0,2,1)/(0,0,1)/(0,1,2)/(0,1,0)]")

#23&      $ (1,1,0)/(1,0,0)^2/$		&  $
a[25]=expand("[(0,1,1,2)/(0,2,1,0)^2/(0,1,0,2)^2/(2,0,0,0)/(0,2,0,0)^2/(0,0,2,0)/(0,0,0,2)^2/(0,1,1,0)/(0,0,1,0)^2/(0,1,0,0)^2/(1,2,0,1)/(1,0,0,1)/(1,1,0,1)^2/(1,0,1,1)^2/(1,1,1,1)/(0,0,0,0)^3]")
lambda1[25]=expand("[(1,1,0)/(1,0,0)^2/(0,0,2)/(0,0,0)]")
lambda2[25]=wedge2(lambda1[25])
lambda5[25]=expand("[(2,0,1)/(0,0,1)/(1,0,1)^2/(1,1,1)/(0,1,1)^2]")
lambda6[25]=expand("[(2,0,1)/(0,0,1)/(1,0,1)^2/(1,1,1)/(0,1,1)^2]")

#24&      $ (0,1,1)/(1,0,0)^2/$		&  $
a[26]=expand("[(3,0,0,0)^2/(2,1,1,0)/(2,1,0,1)/(2,0,1,1)/(2,0,0,0)^3/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(1,1,1,0)^2/(1,1,0,1)^2/(1,0,1,1)^2/(0,1,1,0)/ (0,1,0,1)/(0,0,1,1)/(1,0,0,0)^4/(0,0,0,0)^3]")
lambda1[26]=expand("[(0,1,1)/(1,0,0)^2/(2,0,0)/(0,0,0)]")
lambda2[26]=wedge2(lambda1[26])
lambda5[26]=expand("[(1,0,1)^2/(1,1,0)^2/(2,1,0)/(0,1,0)/(2,0,1)/(0,0,1)]")
lambda6[26]=expand("[(1,1,0)^2/(1,0,1)^2/(2,0,1)/(0,0,1)/(2,1,0)/(0,1,0)]")





#31&      $ (2,0,0)/(0,2,0)/$		&  $
a[27]=expand("[(0,2,2,0)/(0,2,0,2)/(0,0,2,2)/(2,0,0,0)/(0,2,0,0)^4/(0,0,2,0)^4/(0,0,0,2)^4/(1,1,1,1)^4/(0,0,0,0)^3]")
lambda1[27]=expand("[(2,0,0)/(0,2,0)/(0,0,2)/(0,0,0)^3]")
lambda2[27]=wedge2(lambda1[27])
lambda5[27]=expand("[(1,1,1)^4]")
lambda6[27]=expand("[(1,1,1)^4)]")



#33& $(2,0,0)^2/(0,2,0)/$ & $ INCOMPLETE

#In case 28 to get full Le8 restriction:
#temp=expand("[(2,0,0,0,0)/(0,2,0,0,0)/(0,0,2,0,0)/(0,0,0,2,0)/(0,0,0,0,2)/(0,2,2,0,0)/(0,2,0,2,0)/(0,2,0,0,2)/(0,0,2,2,0)/(0,0,2,0,2)/(0,0,0,2,2)/(1,1,1,1,1)^2]")
#print("THIS IS FIXING OF CASE 28")
#temp2=diagA1(temp,2,3)
temp3=expand("[(0,4,0,0)/(0,2,2,0)^2/(0,2,0,2)^2/(1,2,1,1)^2/(0,0,2,2)/(0,2,0,0)^3/(0,0,2,0)/(0,0,0,2)/(2,0,0,0)/(1,0,1,1)^2/(0,0,0,0)]")
#print("CASE 33 :dim of the new LE7 is "+str(dimChecker(temp3)))
#basistemp=[]
#basistemp.append(temp2)
#basistemp.append(temp3)
#a[28]=expand("[(2,0,0,0)/(0,2,0,0)^3/(0,0,2,0)/(0,0,0,2)/(0,4,0,0)/(0,2,2,0)^2/(0,2,0,2)^2/(0,0,2,2)/(0,0,0,0) ]")
a[28]=temp3
#print("checking if coincide with previous fact:")
#o4=order(4)
#print(classifyIncomplete(a[28],basistemp,o4))
lambda1[28]=expand("[(2,0,0)^2/(0,2,0)/(0,0,2)]")
lambda2[28]=wedge2(lambda1[28])
lambda5[28]=lambda5fct(a[28])
lambda6[28]=lambda5fct(a[28])


#34& $(1,1,0)/(0,0,2)^2$ & $
a[29]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)^7/(0,0,0,4)/(0,1,1,2)^2/(1,1,0,2)^2/(1,0,1,2)^2/(0,1,1,0)^2/(1,1,0,0)^2/(1,0,1,0)^2/(0,0,0,0)^2]")
lambda1[29]=expand("[(1,1,0)/(0,0,2)^2/(0,0,0)^2]")
lambda2[29]=wedge2(lambda1[29])
lambda5[29]=expand("[(1,0,2)/(1,0,0)/(1,0,2)/(1,0,0)/(0,1,2)/(0,1,0)/(0,1,2)/(0,1,0)]")
lambda6[29]=expand("[(1,0,2)/(1,0,0)/(1,0,2)/(1,0,0)/(0,1,2)/(0,1,0)/(0,1,2)/(0,1,0))]")


#35& $(1,1,0)/(0,1,1)$ & $
a[30]=expand("[(0,1,3,0)/(0,0,3,1)/(0,1,2,1)/(1,1,2,0)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^4/(0,0,0,2)/(1,1,1,1)/(1,1,0,0)/(0,1,1,0)^2/(0,0,1,1)^2/(0,1,0,1)/ (1,0,3,0)/(1,0,2,1)/(1,0,1,0)^2/(1,0,0,1)]")
lambda1[30]=expand("[(1,1,0)/(0,1,1)/(0,2,0)/(0,0,0)]")
lambda2[30]=wedge2(lambda1[30])
lambda5[30]=expand("[(1,1,1)/(1,2,0)/(1,0,0)/(0,3,0)/(0,1,0)^2/(0,2,1)/(0,0,1)]")
lambda6[30]=expand("[(1,1,1)/(1,2,0)/(1,0,0)/(0,3,0)/(0,1,0)^2/(0,2,1)/(0,0,1)]")


a[31]=expand("[(0,1,3,0)/(0,0,3,1)/(0,1,2,1)/(1,1,2,0)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^4/(0,0,0,2)/(1,1,1,1)/(1,1,0,0)/(0,1,1,0)^2/(0,0,1,1)^2/(0,1,0,1)/(1,0,3,0)^2/(1,0,1,0)^4]")
lambda1[31]=expand("[(1,1,0)/(0,1,1)/(0,2,0)/(0,0,0)]")
lambda2[31]=wedge2(lambda1[31])
lambda5[31]=lambda5fct(a[31])
lambda6[31]=lambda5fct(a[31])




#36& $(1,0,0)^2/(0,1,1)$ & $
a[32]=expand("[(0,0,0,0)^3/(0,0,1,3)/(0,1,0,2)^2/(1,0,0,2)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)^3/(1,0,1,1)^2/(0,1,1,1)^2/(0,0,1,1)^2/(0,1,0,0)^2/(1,0,0,0)^2/(1,1,1,1)/(1,1,0,2)/(1,1,0,0)]")
lambda1[32]=expand("[(1,0,0)^2/(0,1,1)/(0,0,2)/(0,0,0)]")
lambda2[32]=wedge2(lambda1[32])
lambda5[32]=expand("[(0,1,1)^2/(0,0,2)^2/(0,0,0)^2/(1,1,1)/(1,0,2)/(1,0,0)]")
lambda6[32]=expand("[(0,1,1)^2/(0,0,2)^2/(0,0,0)^2/(1,1,1)/(1,0,2)/(1,0,0))]")



a[33]=expand("[(0,0,0,0)^3/(0,0,1,3)/(0,1,0,2)^2/(1,0,0,2)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)^3/(1,0,1,1)^2/(0,1,1,1)^2/(0,0,1,1)^2/(0,1,0,0)^2/(1,0,0,0)^2/(1,1,1,1)^2]")
lambda1[33]=expand("[(1,0,0)^2/(0,1,1)/(0,0,2)/(0,0,0)]")
lambda2[33]=wedge2(lambda1[33])
lambda5[33]=lambda5fct(a[33])
lambda6[33]=lambda5fct(a[33])



#17 (1,1,0)^2/(0,0,1)^2
a[34]=expand("[(0,2,2,0)/(2,0,0,0)/(0,2,0,0)^3/(0,0,2,0)^3/(0,0,0,2)/(0,1,1,1)^4/(0,0,0,0)^4/(1,2,0,1)/(1,0,2,1)/(1,1,1,0)^4/(1,0,0,1)^2]")
lambda1[34]=expand("[(1,1,0)^2/(0,0,1)^2]")
lambda2[34]=wedge2(lambda1[34])
lambda5[34]=expand("[(2,0,0)^2/(0,0,0)^2/(1,1,1)^2/(0,2,0)^2/(0,0,0)^2]")
lambda6[34]=expand("[(2,0,1)/(0,0,1)/(1,1,0)^4/(0,2,1)/(0,0,1)]")

#37 110/101/100^2
a[35]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(2,2,0,0)/(2,0,2,0)/(2,0,0,2)/(0,2,2,0)/(0,2,0,2)/(0,0,2,2)/(1,1,1,1)^4/(0,0,0,0)^3]")
lambda1[35]=expand("[(1,1,0)/(1,0,1)/(1,0,0)^2]")
lambda2[35]=wedge2(lambda1[35])
lambda5[35]=expand("[(2,0,0)^2/(0,0,0)^2/(2,0,1)/(0,0,1)/(2,1,0)/(0,1,0)/(0,1,1)^2]")
lambda6[35]=expand("[(3,0,0)/(1,0,0)^2/(1,0,1)^2/(1,1,0)^2/(1,1,1)]")

#15&      $ (1,1,0)^2/(0,1,1)$		&  $
a[36]=expand("[(0,2,2,0)/(0,1,2,1)^2/(2,0,0,0)/(0,2,0,0)^3/(0,0,2,0)^4/(0,0,0,2)/(0,1,0,1)^2/(0,0,0,0)/(1,0,3,0)/(1,2,1,0)/(1,1,1,1)^2/(1,0,1,0)^3  ]")
lambda1[36]=expand("[(1,1,0)^2/(0,1,1)]")
lambda2[36]=wedge2(lambda1[36])
lambda5[36]=expand("[(2,0,1)/(0,0,1)/(1,2,0)/(1,0,0)/(1,2,0)/(1,0,0)/(0,2,1)/(0,0,1)]")
lambda6[36]=expand("[(2,1,0)/(0,1,0)/(1,1,1)^2/(0,3,0)/(0,1,0)^2]")


#ADDITIONAL
lambda1[37]=[(2,1,1)]
lambda2[37]=[(2,2,2),(4,2,0),(4,0,2),(2,0,0),(0,2,0),(0,0,2)]
lambda5[37]=[(2,1,2),(4,1,0),(0,3,0)]
lambda6[37]=[(2,2,1),(4,0,1),(0,0,3)]

orderList5=order(5)
basisA15=[[0]]
basisA15Lambda1=[[0]]

for i in range(1,38):
    #print(latex(lambda1[i]))
    #print(latex(lambda2[i]))
    #print(latex(lambda5[i]))
    LE8[i]=[]
    LE8[i]=concat([(1,1)],lambda1[i])
    LE8[i]=LE8[i]+concat([(1,0)],lambda5[i])
    LE8[i]=LE8[i]+[(2,0,0,0,0),(0,2,0,0,0)]
    LE8[i]=LE8[i]+concat([(0,0)],lambda2[i])
    LE8[i]=LE8[i]+concat([(0,1)],lambda6[i])
#    print("cases "+str(i))
#    print(dimChecker(LE8[i]))
    if dimChecker(LE8[i])!=248:
        print("LE8 does not have dim 248 at i=")
        print(i)
        
    temp=checker(LE8[i],basisA15,orderList5)
    p1=str(i)+"&"+latex(lambda1[i])+"&$"
    counter = 0
    index=0
    lat1=latexWithoutDollar(LE8[i])
    while counter<4 and index<len(lat1):
        p1=p1+lat1[index]
        if lat1[index]=="/":
            counter=counter+1
        index=index+1
    p1=p1+"$ \\\\"
    n=2
    #print(p1)
    while index<len(lat1):   
        p2="&& $"
        while counter<4*n and index<len(lat1):
            p2=p2+lat1[index]
            
            if lat1[index]=="/":
                counter=counter+1
            index=index+1
            
        n=n+1
        p2=p2+"$ \\\\ "

        #print(p2)
    #print("&& \\\\ \\hline")
    #print(str(i)+"&"+latex(lambda1[i])+"\\\\ \\hline")
    #print(p2)
#    print("i = "+str(i))
#    print("is it equal to any of the previous ones?")
#    print(temp)
    if temp==-1:
        basisA15.append(LE8[i])
        basisA15Lambda1.append(lambda1[i])
##    else:
##        print("This is :")
##        print(latex(lambda1[i]))
##        print("cpnjugate to")
##        print(latex(basisA15Lambda1[temp]))


#print(latex(LE8[37]))
#print(checker(LE8[i],basisA15,orderList5))








#LATEX
print("A15 for latex")
print(len(basisA15))

test=[(1,2,3),(3,4,5),(1,2,3)]
lat=latex(test)
La=[]
i=1
while i<len(lat)-1:
    temp=""
    while lat[i]!="/" and i<len(lat)-1:
        temp=temp+lat[i]
        i=i+1
    i=i+1
    La.append(temp)



for i in range(1,1):
    #test=[(1,2,3),(3,4,5),(1,2,3)]
    lat=latex(basisA15[i])
    Lie=[]
    i2=1
    while i2<len(lat)-1:
        temp=""
        while lat[i2]!="/" and i2<len(lat)-1:
            temp=temp+lat[i2]
            i2=i2+1
        i2=i2+1
        Lie.append(temp)

    lat=latex(basisA15Lambda1[i])
    lambda1=[]
    i2=1
    while i2<len(lat)-1:
        temp=""
        while lat[i2]!="/" and i2<len(lat)-1:
            temp=temp+lat[i2]
            i2=i2+1
        i2=i2+1
        lambda1.append(temp)
    
    j=0
    j2=0
    p=str(i)+"&"
    while j<len(Lie):
        t=0
        t2=0
        tester = False
        c=0
        while j2+t2<len(lambda1) and t2<2:
            if tester==False:
                p=p+"$"
            tester=True
            p=p+lambda1[j2+t2]
            if j2+t2!=len(lambda1)-1:
                p=p+"/"
            t2=t2+1
        if tester:
            p=p+"$ & "
        else :
            p=p+"&"
            
        while j+t<len(Lie) and t<4:
            if t==0:
                p=p+"$"
            p=p+Lie[j+t]
            if j+t!=len(Lie)-1:
                p=p+"/"
            t=t+1
            
        j=j+4
        j2=j2+2
        print(p+"$  \\\\ " )
        
        p="&"
    print("\\hline")
    print(" ")





print("This is the len before adding last 2 "+str(len(basisA15)))









t1=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)]")
t5=expand("[(1,1,1,1)^2]")
t5b=expand("[(1,1,1,1)^2]")
t2=wedge2(t1)
temp=concat([(1,1)],t1)
temp = temp+concat([(1,0)],t5)
temp = temp+[(2,0,0,0,0,0),(0,2,0,0,0,0)]
temp=temp+concat([(0,0)],t2)
f = temp+concat([(0,1)],t5b)

a=removeA1(f,1)
b=diagA1(f,1,2)
#print("Last 2 basis of A15")
#print("checking index of a and b:")
#print(checker(a,basisA15,orderList5))
#print(checker(b,basisA15,orderList5))

basisA15.append(a)
basisA15.append(b)

#print(checker(a,basisA15,orderList5))
#print(checker(b,basisA15,orderList5))
#print(dimChecker(a))

#print(dimChecker(b))
a=removeA1(basisA16[7],1)

b=diagA1(basisA16[7],1,3)

#print("Is the problem a?")
#for i in range(0,len(a)):
#    print(len(a[i]))
#print("Is the problem b?")
#for i in range(0,len(b)):
#    print(len(b[i]))


#print("checking index of a and b:")
#print(checker(a,basisA15,orderList5))
#print(checker(b,basisA15,orderList5))




















#A15 in E7

print("A15 in E7( obtained by removin the first A1 in each A16)")
##for i in range(1,len(basisA16)):
##    print("i="+str(i))
##    a[i]=removeA1(basisA16[i],1)
##    #print(dimChecker(a[i]))
##    print(checker(a[i],basisA15,orderList5))

for i in range(1,1):
    p=str(i)+"&"
    p=p+"$(0,1,"+latexWithoutDollar(l1[i])+")$&"
    #print("i="+str(i))
    a[i]=removeA1(L[i],1)
    #print(dimChecker(a[i]))
    p=p+str(checker(a[i],basisA15,orderList5))
    p=p+"\\\\"
    print(p)
##
##
##print("Fixing case 4")
##for i in range(1,7):
##    print("removing A_1 number"+str(i))
##    a[4]=removeA1(basisA16[4],i)
##    #print(dimChecker(a[i]))
##    print(checker(removeA1(basisA16[4],i),basisA15,orderList5))
##
##print("Fixing case 8")
##for i in range(1,7):
##    print("removing A_1 number"+str(i))
##    a[8]=removeA1(basisA16[8],i)
##    #print(dimChecker(a[i]))
##    print(checker(removeA1(basisA16[8],i),basisA15,orderList5))
##
##print("Fixing case 9")
##for i in range(1,7):
##    print("removing A_1 number"+str(i))
##    a[9]=removeA1(basisA16[9],i)
##    #print(dimChecker(a[i]))
##    print(checker(removeA1(basisA16[9],i),basisA15,orderList5))
##    



#A15 in A16 in A1E7 with diag
print("A15 in A16 with diagonal between \\bar{A1} and the ith A1")

pb=[1,2,3,4,5,6,7]
pb2=[[2,3,4],[2,3,5],[2,3,4,6],[2,3,5],[2,3,5,6],[2,3,5,6],[2,3]]
#pb2=[[2,3,4,5,6],[2,3,4,5,6],[2,3,4,5,6],[2,3,4,5,6],[2,3,4,5,6],[2,3,4,5,6],[2,3,4,5,6]]
pb=[]
for j in range(0,len(pb)):
    print("//////////////")
    print("Case "+str(pb[j]))
    for i in pb2[j]:
        print("i= "+str(i))
        tester = diagA1(basisA16[pb[j]],1,i)
        #print(latex(tester))
        print("Corresponds to :" +str(checker(tester,basisA15,orderList5)))
        if checker(tester,basisA15,orderList5)==-1:
            basisA15.append(tester)
            print(latex(tester))



#i=1
#print(latex2(lambda1[i]))
#print(latex2(basisA15[i]))
#print("lambda_1:")
#print(latex2(lambda1[7]))
#print("LE8 38 ")
#print(latex2((basisA15[38])))

#print("len(lambda1)"+str(len(lambda1)))

for i in range(1,1):
    printLE8(i,latex2(lambda1[i]),latex2(basisA15[i]))
    print(" \\thickhline")

#Adding the 39th case of table A15inE7 (actually nb 41 right now)
temp=expand("[(2, 0, 0, 0, 0)^2/(0, 2, 0, 0, 0)^2/(0, 0, 2, 0, 0)^2/(0, 0, 0, 2, 0)^2/(0, 0, 0, 0, 2)^2/(0, 2, 0, 2, 0)/(0, 2, 0, 0, 2)/(0, 0, 2, 2, 0)/(0, 0, 2, 0, 2)/(0, 0, 0, 2, 2)/(1, 1, 1, 1, 1)^4/(0, 2, 2, 0, 0)/(2, 2, 0, 0, 0)/(2, 0, 2, 0, 0)/(2, 0, 0, 2, 0)/(2, 0, 0, 0, 2)]")
#basisA15.append(temp)
#print("This the actual nb of new element: "+str(len(basisA15)))










#InG2F4

#with diag
t=expand("[(0,2,1,1,0,0)/(0,2,0,0,1,1)/(0,2,0,0,0,0)/(1,1,1,1,0,0)/(1,1,0,0,1,1)/(1,1,0,0,0,0)/(0,2,1,0,1,0)/(0,2,1,0,0,1)/(0,2,0,1,1,0)/(0,2,0,1,0,1)/(1,1,1,0,1,0)/(1,1,1,0,0,1)/(1,1,0,1,1,0)/(1,1,0,1,0,1)/(0,2,0,0,0,0)/(1,1,0,0,0,0)/(2,0,0,0,0,0)/(0,2,0,0,0,0)/(1,3,0,0,0,0)/(0,0,2,0,0,0)/(0,0,0,2,0,0)/(0,0,1,1,1,1)/(0,0,1,1,0,0)/(0,0,0,0,2,0)/(0,0,0,0,0,2)/(0,0,0,0,1,1)/(0,0,1,0,1,0)/(0,0,1,0,0,1)/(0,0,0,1,1,0)/(0,0,0,1,0,1)]")
temp2 = diagA1(t,2,3)
print("In G2F4 with diag:")
print(checker(temp2,basisA15,orderList5))

#A1inG2
print("A14 in G2F4 with A1 in G2 and A14 in F4")
#first one is and second one are A1s in A12 inG2, third is diag of the two A1 in A12. Third different.
print("case 2:")
temp2 = removeA1(t,1)
print(checker(temp2,basisA15,orderList5))

print("case 1:")
temp2 =removeA1(t,2)
print(checker(temp2,basisA15,orderList5))

print("case 4:")
temp2 = diagA1(t,1,2)
print(checker(temp2,basisA15,orderList5))

#third

LF4=expand("[(1,1,1,1)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/ (1,1,0,0)/(1,0,1,0)/(1,0,0,1)/(0,1,1,0)/(0,1,0,1)/(0,0,1,1)]")
s=concat([(0,)],LF4)
G2=[(10,0,0,0,0),(2,0,0,0,0)]
s=s+G2
print(s)
#print("A14 in F4")
orderList5=order(5)
print("case 3:")
print("is a still the pb?")
#a=removeA1(basisA16[8],1)
#print(checker(a,basisA15,orderList5))
#for i in range(1,len(basisA15)):

#    print("i= "+str(i))
#    for j in range(0,len(basisA15[i])):
#        if len(basisA15[i][j])!=5 :
 #           print("PROBLEM")
#            print(basisA15[i][j])
        
print(classifyIncomplete(s,basisA15,orderList5))


#A12inG2
print("A15 in G2F4 with A12 in G2 and A13 in F4")
G2=[(2,0,0,0,0),(0,2,0,0,0),(1,3,0,0,0)]
LF4=[0,0,0,0,0,0]

LF4[1]= expand("[(1,1,1)^2/(2,0,0)/(0,2,0)/(0,0,2)/(1,1,0)/(1,0,1)/(0,1,1)/(1,0,0)^2/(0,1,0)^2/(0,0,1)^2/(0,0,0)^3]")
             
LF4[2]= expand("[(1,2,1)/(2,0,0)/(0,2,0)^3/(0,0,2)/(1,1,0)^2/(1,0,1)^2/(0,1,1)^2/(0,0,0)]")

LF4[3]= expand("[(1,4,1)/(0,4,2)/(1,0,3)/(2,0,0)/(0,2,0)/(0,0,2)]")
#more precisely for case 3:
#a=expand("[(0,2,1,2,1)/(1,1,1,2,1)/(0,2,0,2,2)/(1,1,0,2,2)/(0,2,0,4,0)/(1,1,0,4,0)/(2,0,0,0,0)/(0,2,0,0,0)/(1,3,0,0,0)/(0,0,1,4,1)/(0,0,1,0,3)/(0,0,2,0,0)]")

LF4[4]= expand("[(0,6,0)/(1,4,1)/(1,3,0)/(0,3,1)/(2,0,0)/(0,2,0)/(0,0,2)]")

LF4[5]= expand("[(2,2,0)/(2,0,2)/(0,2,2)/(2,0,0)/(0,2,0)/(0,0,2)]")

print("HERE: A12A13 in G2F4")
orderList5=order(5)
for i in range(1,6):
    print("i= "+str(i))
    s=concat([(0,0)],LF4[i])
    s=s+G2
    #for i in range(0,len(s)):
    #    print(len(s[i]))
    print(classifyIncomplete(s,basisA15,orderList5))
    if len(classifyIncomplete(s,basisA15,orderList5))==1:
        print(latexWithoutDollar(s)+" \\ldots ")

##print("Case 5")
##a=[(0,2,2,0,0),(1,1,2,0,0),(0,2,0,2,0),(1,1,0,2,0),(0,2,0,0,2),(1,1,0,0,2),(1,1,0,0,0),(0,1,0,0,0),(2,0,0,0,0),(0,2,0,0,0),(1,3,0,0,0),(0,0,2,0,0),(0,0,0,2,0),(0,0,0,0,2),(0,0,2,2,0),(0,0,2,0,2),(0,0,0,2,2)]
##print(classifyIncomplete(a,basisA15,orderList5))
##print(latex(a))
##for i in range(0,len(a)):
##    print(len(a[i]))
##print(dimChecker(a))
##input("")




























#IN E6A2
print("In E6A2")
a[1]=expand("[(1,1,1,0)/(1,2,0,1)/(1,0,2,1)/(1,1,1,0)/(2,0,0,0)/(0,2,2,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,1,1,1)^2/(0,0,0,0)]")

a[2]=expand("[(1,0,1,0)^2 / (1,0,0,1)^2/(1,1,0,0)^2/(0,1,1,0)^2/ (0,1,0,1)^2/(0,0,1,1)^2/  (1,1,1,1)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,0,0,0)^2]")
for i in range(1,3):
    Lt=[]
    Lt=concat(a[i],[(0,)])
    Lt1=Lt+concat([(0,0,0,0)],[(4,),(2,)])
    Lt2=Lt+concat([(0,0,0,0)],[(2,),(1,),(1,),(0,)])
    print("LT1")
    print(latex(Lt1))
    print(classifyIncomplete(Lt1,basisA15,orderList5))

    print("LT2")
    print(latex(Lt2))
    print(classifyIncomplete(Lt2,basisA15,orderList5))



a=[[(0, 0, 0, 1, 1),(0,0,0,1,1)], [(2, 0, 0, 0, 0)], [(0, 0, 0, 0, 0)], [(0, 1, 1, 0, 0)]]
res=[]
for x in a:
    for y in x:
        res.append(y)
    
print(res)
print(checker(res,basisA15,orderList5))


#In D8
print("In D8")
lambda1=[]
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 2, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (4, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 2, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 2, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(0, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 0, 0, 0), (0, 1, 0, 0, 0), (0, 0, 2, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 2, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 2, 0, 0), (0, 0, 0, 2, 0), (0, 0, 0, 0, 2)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 4, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (1, 1, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (1, 1, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 1, 0, 1, 0), (0, 1, 0, 0, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 1, 0, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 3)])
lambda1.append([(0, 0, 0, 0, 0), (6, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 0, 0, 0), (0, 1, 0, 0, 0), (0, 0, 1, 0, 0), (0, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 0, 0, 0), (0, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 0, 0, 0), (0, 1, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 2, 0, 0), (0, 0, 0, 2, 0), (0, 0, 0, 0, 2)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 4, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 1, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 1, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 1, 0, 1, 0), (0, 1, 0, 0, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 1, 0, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 3)])
lambda1.append([(2, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 2, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(2, 0, 0, 0, 0), (4, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(2, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 2, 0, 0), (0, 0, 0, 2, 0), (1, 0, 0, 0, 1)])
lambda1.append([(2, 0, 0, 0, 0), (0, 4, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(2, 0, 0, 0, 0), (0, 4, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(2, 0, 0, 0, 0), (0, 4, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 2, 2)])
lambda1.append([(3, 0, 0, 0, 0), (3, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 1, 0, 0, 0), (1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 1, 0, 0, 0), (1, 1, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (1, 0, 0, 1, 0), (1, 0, 0, 0, 1)])
lambda1.append([(1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (1, 0, 0, 1, 0), (0, 1, 0, 0, 1)])
lambda1.append([(1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 1, 0, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 3)])
lambda1.append([(1, 1, 0, 0, 0), (0, 0, 1, 1, 0), (1, 0, 0, 0, 3)])
lambda1.append([(1, 1, 0, 0, 0), (0, 0, 1, 1, 0), (3, 0, 0, 0, 1)])
lambda1.append([(1, 1, 0, 0, 0), (0, 0, 1, 1, 2)])


for i in range(1,len(lambda1)):
        print(i)
        print(lambda1[i])
        sol[i]= wedge2(lambda1[i])
        
j=0
orderList5=order(5)
for i in range(1,len(lambda1)):
        print(i)
        print(latex(lambda1[i]))
        print(classifyIncomplete(sol[i],basisA15,orderList5))


print(0)
print(latex(lambda1[0]))
sol[0]= wedge2(lambda1[0])
print(classifyIncomplete(sol[0],basisA15,orderList5))

        
print("39:")
print(latex(sol[39]))


print("14:")
print(latex(sol[14]))









LF4[5]= expand("[(2,2,0)/(2,0,2)/(0,2,2)/(2,0,0)/(0,2,0)/(0,0,2)]")
G2=[(2,0,0,0,0),(0,2,0,0,0),(1,3,0,0,0)]
s=concat([(0,0)],LF4[5])
s=s+G2
print("TESTING HERE")
print(classifyIncomplete(s,basisA15,orderList5))






#A12inD6








   


