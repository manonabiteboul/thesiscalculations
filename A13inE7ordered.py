import math
from collections import Counter
from compare import order


import re
def expand(in_str):
	regex = r"(\([^\)]+\))(?:\^(\d+))?"
	groups = re.findall(regex, in_str)
	out_list = []
	for group, mult in groups:
		if not mult:
			mult = 1
		for i in range(int(mult)):
			out_list.append(eval(group))

	return out_list


#This is a permutation function it takes an ordering an applies it to a restriction
#Example: perm((1,0,2),[(1,2,3),(4,5,6)]) = [(2,1,3),(5,4,6)]
def perm(order, xx):
    a=order[0]
    b=order[1]
    c=order[2]
    p = [(xx[0][order[0]],xx[0][order[1]],xx[0][order[2]] )]
    
    for i in range(1 ,len(xx)):
        p.append((xx[i][order[0]],xx[i][order[1]],xx[i][order[2]] ))
    return p

#This fction checks if x and y are equal when you do not consider order
def eq(x,y):
    yy=y
    if len(x)!=len(yy):
        #print("Not the same length")
        return False
    for i in range(0,len(x)):
        if x[i] in yy:
           # print "i=", i," and x[i] = ",x[i]," and is in y" )
            yy.remove(x[i])
        else:
            return False
    return True

#Same as previous function but x is imcomplete
def eqIncomplete(x,y):
    for i in range(0,len(x)):
        if x[i] in y:
           # print "i=", i," and x[i] = ",x[i]," and is in y" )
            y.remove(x[i])
        else:
            return False
        #print(y)
    return True


#How to test if everything is a cubic
#count = ['a','b','c','a','a','c','c','b','b']
#print(Counter(count))
#b=Counter(count)
#testing = True
#for x in b:
#        if b[x]!=3:
 #                print(b[x])
 #                testing = False
        
#print(testing)

def eqIncompleteCubic(x,y):
    for i in range(0,len(x)):
        if x[i] in y:
           # print "i=", i," and x[i] = ",x[i]," and is in y" )
            y.remove(x[i])
        else:
            return False

    b=Counter(y)
    #print(b)
    testing = True
    for x in b:
             if b[x]%3!=0:
                     #print(b[x])
                     testing = False

    #if testing:
             #print("We have found a match with cubic remainder since the counter read")
             #print(b)
#print(testing)   
    return testing


#Function checks right dimension (should return 133 in E7)
def dimChecker(x):
    sol=0
    for i in range(0,len(x)):
        temp=1
        for j in range(0,len(x[i])):
            temp = temp*(x[i][j]+1)
        sol = sol+temp
    return(sol)


#This function finds in which class tester is.
#The arguments are: tester (element that needs classifying), basis (restriction of LE8 in each class), orderList (all possible orderings of 012 if we are in A13 of 0123 if we are in A14 ect)

def classify(tester, basis,orderList ):
    sol = -1
    for i in range(0,len(basis)):
       
        #print("i="+str(i))
        #print("basis[i]=")
        #print(basis[i])
        if len(tester) != len( basis[i]):
           # print("not same length so I skip:")
            #print(basis[i])
            continue
    
        for j in range(0,len(orderList)):

            vector = perm(orderList[j], basis[i])
            tt=list(tester)
            if eq(vector, tt):
              #  print("WE HAVE FOUND A MATCH using orderList[j] =")
                #print(orderList[j])
                sol = i;
                
          
            else:
                manon=1
              #  print("It is not a match, we have have used orderList[j] =")
                #print(orderList[j])
            
    return(sol)

#Same as classify but tester is incomplete

def classifyIncomplete(tester, basis,orderList ):
    sol = [-1]
    for i in range(0,len(basis)):
    
        for j in range(0,len(orderList)):
            vector = perm(orderList[j], basis[i])

            tt=list(tester)
            if eqIncomplete(tester,vector):
               # print("WE HAVE FOUND A MATCH using at element "+str(i))
                #print(orderList[j])
                sol.append(i);
                
          
            else:
                manon=1
              #  print("It is not a match, we have have used orderList[j] =")
                #print(orderList[j])
            
    return(sol)


def classifyIncompleteCubic(tester, basis,orderList ):
    sol = [-1]
    for i in range(0,len(basis)):
    
        for j in range(0,len(orderList)):
            vector = perm(orderList[j], basis[i])

            tt=list(tester)
            if eqIncompleteCubic(tester,vector):
               # print("WE HAVE FOUND A MATCH using at element "+str(i))
                #print(orderList[j])
                sol.append(i);
                
          
            else:
                manon=1
              #  print("It is not a match, we have have used orderList[j] =")
                #print(orderList[j])
            
    return(sol)

#Classify but taking into account the ones that are incomplete
#CHECK THIS
def checker(tester, basis,orderList ):
    incomplete=[22,23]
    #incomplete=[23,24]
    print("Which complete option is it equal to?")
    print(classify(tester, basis,orderList ))

    bIncomplete=list(basis)
    bIncomplete.append(tester)
   # for i in range(0,len(options)):
      #  if i==0 and eq( tester,options[1]):
     #           print("This is conjugate to the second option of I1, case 64")
        #if i==1 and eq(tester,options[2]):
               # print("This is conjugate to the second option of I2, case 65")

  #  if classify(tester, options,orderList )== 0:
  #      print("This is conjugate to the second option of I1 (65)")
  #  if classify(tester, options,orderList )== 1:
  #      print("This is conjugate to the second option of I2 (66)")

    print("Now check the incomplete")
    for i in incomplete:
        print("Is it potentially conjugate to "+str(i))
        print(classifyIncomplete(basis[i], bIncomplete,orderList ))
        if i==63 or i==77:
                if len(classifyIncomplete(basis[i], bIncomplete,orderList ))>3:
                    print("yes")
                else:
                    print("no")
        else :
                if len(classifyIncomplete(basis[i], bIncomplete,orderList ))>2:
                    print("yes")
                else:
                    print("no")



                    

#EXAMPLE OF USE OF THE FUNCTION
orderList= [(0,1,2), (0,2,1),(1,0,2),(1,2,0),(2,0,1),(2,1,0)]
basis2 = [[(0,14,0),(0,10,0),(0,8,2)],[(0,6,0),(1,2,3),(4,5,6),(7,8,9)],[(0,6,0),(0,4,2),(0,4,1),(0,2,1)]]
#print(basis2)
tester2 = [(0,0,6),(0,2,4),(0,1,4),(0,1,2)]
#print(tester2)
number = classify(tester2, basis2, orderList)
#print("The index of the sol is :"+str(number))
#print("So our tester:")
#print(tester2)
#print("is equal to")
#print(basis2[number])



#A13inE7
#A1A12 in A1D6, creating the basis
#Case 1 (1)
basis = [[(0,0,0)],[(0,4,2), (0,4,2), (0,2,4),(1,4,1),(1,2,1),(1,2,3),(1,0,3),(0,2,2),(2,0,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2)]]

#Case 2 (2)
a=[ (0,14,0),(0,10,0),(0,8,2),(1,10,1),(0,6,0),(1,4,1),(2,0,0),(0,2,0),(0,0,2)]
basis.append(a)

#Case 3 (3 and 4)
a=[(0,6,0),(0,4,2),(0,4,2),(0,4,0),(0,2,2),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2),(1,5,0),(1,3,0),(1,3,0),(1,3,2),(1,1,2)]
b= [(0,6,0),(0,4,2),(0,4,2),(0,4,0),(0,2,2),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2),(1,4,1),(1,4,1),(1,0,3),(1,2,1),(1,0,1)]



basis.append(a)

basis.append(b)


#Case 4 $ (3,1),(1,0)^2$	(5 and 6)
a = [(0,6,0),(0,4,2),(0,4,1),(0,4,1),(0,2,1),(0,2,1),(2,0,0),(0,2,0),(0,2,0),(0,0,2),(0,0,0),(0,0,0),(0,0,0),(1,5,0),(1,3,1),(1,3,1),(1,3,0),(1,1,2)]
b=[(0,6,0),(0,4,2),(0,4,1),(0,4,1),(0,2,1),(0,2,1),(2,0,0),(0,2,0),(0,2,0),(0,0,2),(0,0,0),(0,0,0),(0,0,0),(1,4,1),(1,4,0),(1,4,0),(1,2,1),(1,0,2),(1,0,2)]



basis.append(a)



basis.append(b)




#Case 5 $ (3,1),(0,1)^2$ (7 and 8)
a=[(0,6,0),(0,4,2),(0,3,2),(0,3,2),(0,3,0),(0,3,0),(2,0,0),(0,2,0),(0,0,2),(0,0,2),(0,0,0),(0,0,0),(0,0,0),(1,4,1),(1,3,1),(1,3,1),(1,0,3),(1,0,1)]
b=[(0,6,0),(0,4,2),(0,3,2),(0,3,2),(0,3,0),(0,3,0),(2,0,0),(0,2,0),(0,0,2),(0,0,2),(0,0,0),(0,0,0),(0,0,0),(1,4,0),(1,4,0),(1,3,2),(1,3,0),(1,0,2),(1,0,2)]



basis.append(a)




basis.append(b)

#Case 6 $ (3,0)^2,(1,1)$(9 and 10)
a=[(0,6,0),(0,4,0),(0,4,0),(0,4,0),(0,4,1),(0,4,1),(0,2,1),(0,2,1),(2,0,0),(0,2,0),(0,2,0),(0,0,2),(0,0,0),(0,0,0),(0,0,0),(1,5,0),(1,3,1),(1,3,1),(1,3,0),(1,1,0),(1,1,0),(1,1,0)]
b=[(0,6,0),(0,4,0),(0,4,0),(0,4,0),(0,4,1),(0,4,1),(0,2,1),(0,2,1),(2,0,0),(0,2,0),(0,2,0),(0,0,2),(0,0,0),(0,0,0),(0,0,0),(1,4,1),(1,4,0),(1,4,0),(1,2,0),(1,2,0),(1,0,1),(1,0,1),(1,0,1)]


#this is conj to 22 
#basis.append(a)



basis.append(b)


#Case 7 $ (3,0)^2,(0,1)^2$(11)
a=[(0,6,0),(0,4,0),(0,4,0),(0,4,0),(0,3,1),(0,3,1),(0,3,1),(0,3,1),(2,0,0),(0,2,0),(0,0,2),(1,4,1),(1,3,0),(1,3,0),(1,3,0),(1,3,0),(1,0,1),(1,0,1),(1,0,1),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]


#Case 8 $ (3,1),(2,0),00$(12)
b=[(0,6,0),(0,5,1),(0,4,2),(0,3,1),(0,3,1),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,1,1),(1,4,1),(1,2,1),(1,5,0),(1,3,0),(1,1,2)]



#Case 9 $ 3,1),(0,2),00$(13)
c=[(0,6,0),(1,4,1),(0,3,3),(1,3,2),(0,3,1),(0,3,1),(1,0,3),(0,4,2),(1,3,0),(2,0,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(1,0,1)]


#Case 10 $ (3,0)^2,(0,2),00$(14)
d=[(0,6,0),(0,4,0),(0,4,0),(0,4,0),(0,3,2),(0,3,2),(0,3,0),(0,3,0),(2,0,0),(0,2,0),(0,0,2),(0,0,2),(0,0,0),(0,0,0),(0,0,0),(1,4,1),(1,3,1),(1,3,1),(1,0,1),(1,0,1),(1,0,1)]

basis.append(a)

basis.append(b)

basis.append(c)

basis.append(d)



#Case 11 $  (3,1),(0,0)^4$(15)
a=[ (0,6,0),(0,4,2),(1,3,1),(1,3,1),(0,3,1),(0,3,1),(0,3,1),(0,3,1),(1,4,0),(1,4,0),(1,0,2),(1,0,2),(2,0,0),(0,2,0),(0,0,2),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]


#Case 12 $ (6,0),(0,4)$(16)
b=[(0,6,4),(1,6,3),(0,6,0),(0,0,6),(0,10,0),(1,0,3),(2,0,0),(0,2,0),(0,0,2)]

#Case 13 $(6,0),(1,1),00$(17)
c=[(0,10,0),(1,7,0),(0,7,1),(1,6,1),(0,6,0),(0,6,0),(1,5,0),(0,5,1),(2,0,0),(0,2,0),(0,2,0),(0,0,2),(1,1,0),(1,0,1),(0,1,1)]

#Case 14 $ (6,0),(0,1)^2,00$(18)
d=[(0,10,0),(1,6,1),(1,6,0),(1,6,0),(0,6,0),(0,6,0),(0,6,1),(0,6,1),(2,0,0),(0,2,0),(0,0,2),(0,0,1),(0,0,1),(1,0,1),(1,0,0),(1,0,0),(0,0,0),(0,0,0),(0,0,0)]

#Case 15 $ (6,0),(0,2),00^2$(19)
e=[(0,10,0),(1,6,1),(1,6,1),(0,6,0),(0,6,0),(0,6,0),(0,6,2),(2,0,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(1,0,1),(1,0,1),(0,0,0)]


basis.append(a)

basis.append(b)

basis.append(c)

basis.append(d)

basis.append(e)



#Case 16 $  4,0),(0,4),,(0,0)^2$(20)
a=[(0,6,0),(0,0,6),(0,4,4),(0,0,4),(0,0,4),(0,4,0),(0,4,0),(1,3,3),(1,3,3),(2,0,0),(0,2,0),(0,0,2),(0,0,0)]

#Case 17 $  (4,0),(1,1),20$(21)
b=[(0,6,0),(0,6,0),(1,5,0),(0,5,1),(1,4,1),(0,4,0),(0,3,1),(0,3,1),(1,3,0),(1,3,0),(1,2,1),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(1,1,0),(0,1,1)]

#Case 18 $  (4,0),(1,1),02$(22)
c=[(0,6,0),(0,5,1),(0,4,2),(1,4,1),(1,3,2),(1,3,0),(0,1,3),(0,3,1),(2,0,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2),(1,2,1),(0,1,1)]


#Case 19 $  (4,0),(0,1)^2,20$ (23)INCOMPLETE
#IN THESE CASES WE CHECK AT THE END USING classifyIncomplete
d=[(0,6,0),(0,6,0),(0,4,1),(0,4,1),(0,4,0),(0,2,1),(0,2,1),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,0,0),(0,0,0),(0,0,0)]


#Case 20 $  (4,0),(0,1)^2,02$(24)INCOMPLETE
e=[(0,6,0),(0,4,2),(0,4,1),(0,4,1),(0,0,3),(0,0,3),(2,0,0),(0,2,0),(0,0,2),(0,0,2),(0,0,1),(0,0,1),(0,0,0),(0,0,0),(0,0,0)]



basis.append(a)

basis.append(b)





basis.append(c)


basis.append(d)

basis.append(e)


#basis.append(d)
#basis.append(e)

#Case 21 $ (4,0),(1,0)^2,02$
a=[(0,6,0),(0,5,0),(0,5,0),(0,4,2),(0,3,0),(0,3,0),(2,0,0),(0,2,0),(0,2,0),(0,0,2),(0,1,2),(0,1,2),(1,4,1),(1,2,1),(1,3,1),(1,3,1),(0,0,0),(0,0,0),(0,0,0)]

#Case 22 $ (4,0),(1,1),,(0,0)^3$
b=[(0,6,0),(0,5,1),(1,4,0),(1,4,0),(0,4,0),(0,4,0),(0,4,0),(1,3,1),(1,3,1),(0,3,1),(1,2,0),(1,2,0),(2,0,0),(0,2,0),(0,2,0),(0,0,2),(0,1,1),(0,1,1),(0,1,1),(0,0,0),(0,0,0),(0,0,0)]


#Case 23 $  (4,0),(0,1)^2,,(0,0)^3$
c=[(0,6,0),(0,4,1),(0,4,1),(0,4,0),(0,4,0),(0,4,0),(1,3,1),(1,3,1),(1,3,0),(1,3,0),(1,3,0),(1,3,0),(2,0,0),(0,2,0),(0,0,2),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]

#Case 24 $ (4,0),(0,2)^2,,(0,0)$
d=[(0,6,0),(0,4,2),(0,4,2),(0,4,0),(0,0,4),(1,3,2),(1,3,2),(1,3,0),(1,3,0),(2,0,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,0)]

#Case 25 $ (4,0),(0,2),20,00$
e=[(0,6,0),(0,6,0),(0,4,2),(1,4,1),(1,4,1),(0,4,0),(0,4,0),(0,2,2),(1,2,1),(1,2,1),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2)]


basis.append(a)


# conjugate of case 9 of final table (or case 6a of table A13inA1D6)
basis.append(b)

basis.append(c)

basis.append(d)

basis.append(e)




#Case 26 $ (4,0),(1,0)^2,02$
a=[(0,6,0),(0,4,2),(0,4,0),(0,4,0),(0,4,0),(0,4,0),(2,0,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(1,3,1),(1,3,1),(1,3,1),(1,3,1),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]

#Case 27 $ (4,0),(1,0)^2,02$
b=[(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,2,2),(0,2,2),(0,2,2),(1,3,0),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,1,2),(1,1,2),(1,1,2),(0,0,0),(0,0,0),(0,0,0)]

#Case 28 $ (4,0),(1,0)^2,02$
c1=[(0,2,2),(0,1,2),(0,1,2),(0,1,2),(0,1,2),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(1,2,0),(1,2,0),(1,0,2),(1,0,2),(1,1,2),(1,1,2),(1,1,0),(1,1,0),(1,0,0),(1,0,0),(1,0,0),(1,0,0)]


c2=[(0,2,2),(0,1,2),(0,1,2),(0,1,2),(0,1,2),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(1,0,3),(1,2,1),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(1,0,1),(1,0,1),(1,0,1)]

#Case 29 $ (4,0),(1,0)^2,02$
d1=[(0,1,2),(0,1,2),(0,1,2),(0,1,2),(2,0,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(1,1,2),(1,0,2),(1,0,2),(1,0,2),(1,0,2),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,0,0),(1,0,0),(1,0,0),(1,0,0)]

d2=[(0,1,2),(0,1,2),(0,1,2),(0,1,2),(2,0,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(1,0,3),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,0,1) ]


#Case 30 $ (4,0),(1,0)^2,02$
e=[(0,1,2),(0,1,2),(0,2,1),(0,2,1),(2,0,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,0),(0,1,0),(0,0,1),(0,0,1),(1,1,2),(1,2,0),(1,2,0),(1,1,1),(1,1,1),(1,1,0),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,0,0),(1,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]


basis.append(a)

basis.append(b)

basis.append(c1)

basis.append(c2)

basis.append(d1)
# Do not add 29b as it is conjugate to case 40 
#basis.append(d2)

basis.append(e)



   

#Case 31 $ (1,0)^4,(0,1)^2$
a=expand("[(2,0,0)/(0,2,0)^6/(0,0,2)/(0,1,1)^8/(0,0,0)^9/(0,0,0)^4/(1,1,0)^8/(1,0,1)^5/(1,2,1)]")
#manon =[(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,2,1)]


#Case 32 $ ((1,1)^2,(0,0)^4$
b=[(0,2,2),(1,2,0),(1,2,0),(1,0,2),(1,0,2),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(1,0,0),(1,0,0),(1,0,0),(1,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]

#Case 33 $ (1,1),(1,0)^2,00^4$
#case 31b
c=[(0,2,1),(0,2,1),(2,0,0),(0,2,0),(0,2,0),(0,0,2),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,0,1),(0,0,1),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(1,2,0),(1,2,0),(1,1,1),(1,1,1),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,0,0),(1,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]

#Case 34 $ (1,0)^2,(0,1)^2,00^4$
d=[(2,0,0),(0,2,0),(0,0,2),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(0,0,1),(1,1,1),(1,1,1),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,0,0),(1,0,0),(1,0,0),(1,0,0),(1,0,0),(1,0,0),(1,0,0),(1,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]

#Case 35 $ (1,1),(0,0)^8$
e=[(2,0,0),(0,2,0),(0,0,2),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,1,0),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]


basis.append(a)

basis.append(b)

basis.append(c)

basis.append(d)

basis.append(e)



#Case 36 $ (1,1),(0,2)^2,00^2$
a=[(0,0,4),(0,1,3),(0,1,3),(1,0,3),(1,0,3),(1,1,2),(1,1,2),(2,0,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(1,1,0),(1,1,0),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,0,0),(0,0,0)]

#Case 37 $  (1,1),(2,0),02,00^2$
b=[(0,3,1),(0,1,3),(0,2,2),(1,2,1),(1,2,1),(1,1,2),(1,1,2),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(1,1,0),(1,1,0),(1,0,1),(1,0,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,0,0)]

#Case 38 $ (1,1),(0,0)^8$
c=[(0,3,0),(0,3,0),(0,2,2),(0,1,2),(0,1,2),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(1,2,1),(1,2,1),(1,0,1),(1,0,1),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]

#Case 39 $ (1,0)^2,(0,2)^2,00^2$
d=[(0,0,4),(0,1,2),(0,1,2),(0,1,2),(0,1,2),(2,0,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(1,1,2),(1,1,2),(1,0,2),(1,0,2),(1,0,2),(1,0,2),(1,1,0),(1,1,0),(1,0,0),(1,0,0),(1,0,0),(1,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]

#Case 40 $ ((1,1),(2,0),00^5$This is conjugate to 29b so in case 35 (35) 
e=[(0,3,1),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(1,2,0),(1,2,0),(1,2,0),(1,2,0),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(1,0,0),(1,0,0),(1,0,0),(1,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]


basis.append(a)

basis.append(b)

basis.append(c)

basis.append(d)


#This is conjugate to 29b 
basis.append(e)




#Case 41 $ (1,0)^2,(0,2),,00^5$ THIS IS CONJ TO 31 (37)
a=[(0,1,2),(0,1,2),(2,0,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]


#Case 42 $ ((2,0)^3,(0,2)$
b=[(0,4,0),(0,4,0),(0,4,0),(1,3,1),(1,3,1),(0,2,2),(0,2,2),(0,2,2),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(0,0,0),(0,0,0),(0,0,0)]

#Case 43 $ (2,0)^2,(0,2)^2$
c=[(0,4,0),(0,0,4),(1,2,2),(1,2,2),(0,2,2),(0,2,2),(0,2,2),(0,2,2),(1,2,0),(1,0,2),(1,2,0),(1,0,2),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(1,0,0),(1,0,0),(0,0,0),(0,0,0)]

#Case 44 $ (2,0)^2,(0,2),,00^3$
d=[(0,4,0),(0,2,2),(0,2,2),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(1,2,1),(1,2,1),(1,2,1),(1,2,1),(1,0,1),(1,0,1),(1,0,1),(1,0,1),(0,0,0),(0,0,0),(0,0,0),(0,0,0)]


#Case 45 $ ((2,0),(0,2),,00^6$
e=[(0,2,2),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(0,0,2),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0) ]

#Don't add a as this is just case 37 (31 in table of A13in A1D6)
basis.append(a)


basis.append(b)

basis.append(c)

basis.append(d)

basis.append(e)


#46& $(1,1),(2,0),(0,1)^2,(0,0)$ & $
a=[(0,3,1),(1,1,2),(0,2,1),(0,1,2),(1,2,0),(0,2,1),(0,1,2),(1,2,0),(1,2,1),(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(1,1,1),(0,0,2),(1,1,1),(1,1,0),(1,0,1),(0,1,1),(1,0,0),(0,1,0),(0,0,1),(0,1,1),(1,0,0),(0,1,0),(0,0,1),(0,0,0),(0,0,0),(0,0,0)]
basis.append(a)

#47 $(2,0),(1,0)^2,(0,1)^2,00$
#a=[(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,3,0),(0,3,0),(0,1,0),(0,1,0),(0,2,1),(0,2,1),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,0),(0,1,0),(0,0,2),(0,0,1),(0,0,1),(1,2,0),(1,2,0),(1,2,0),(1,2,0),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(1,0,0),(1,0,0),(1,0,0),(1,0,0)]
a=expand("[(0,0,3)^2/(1,1,2)/(1,0,2)^2/(0,1,2)^2/(2,0,0)/(0,2,0)/(0,0,2)^3/(1,1,1)^2/(1,0,1)^4/(1,1,0)/(0,1,1)^4/(1,0,0)^2/(0,1,0)^2/(0,0,1)^4/(0,0,0)^6]")

basis.append(a)



#48 $11,20,10^2,00$
a=[(2,0,0),(0,2,0),(0,2,0),(0,2,0),(0,2,0),(0,0,2),(0,3,1),(0,1,1),(0,1,1),(0,2,1),(0,2,1),(0,0,1),(0,0,1),(0,3,0),(0,3,0),(0,1,0),(0,1,0),(0,1,0),(0,1,0),(0,0,0),(0,0,0),(0,0,0),(1,3,0),(1,2,1),(1,1,1),(1,1,1),(1,2,0),(1,2,0),(1,0,1),(1,1,0),(1,1,0),(1,0,0),(1,0,0)]
basis.append(a)

#49& $(1,1)^2/(2,0)$&$
a=expand("[(0,3,1)^2/(1,3,0)/(1,2,1)^2/(1,1,2)/(0,2,2)/(2,0,0)/(0,2,0)^5/(0,0,2)^3/(1,1,0)^3/(1,0,1)^2/(0,1,1)^4/(0,0,0)]")
basis.append(a)

#Adding Extra elemant, case 50 of A1D6 in E7
a= expand("[(1,2,1)/(0,1,2)^4/(2,0,0)/(0,2,0)^6/(0,0,2)^2/(1,1,1)^4/(1,0,1)^5/(0,1,0)^4/(0,0,0)^9/(0,0,0)]")
basis.append(a)

#51&$(2,1)^2$&$ Maybe case 81??
a[1] = expand("[(2,0,0)/(0,2,0)/(0,0,2)/(0,2,2)^3/(0,4,0)^3/(0,4,2)/(0,0,0)^3]")
basis.append(a[1])

#52&$(5,1)^2  82??
a[1] = expand("[(0,10,0)/(0,8,2)/(0,4,2)/(0,6,0)/(1,8,1)/(1,4,1)/(1,0,3)/(2,0,0)/(0,2,0)/(0,0,2)]")

basis.append(a[1])

#53&$(2,2)/(0,0)^3  82??
a[1] = expand("[(1,3,1)^2/(1,1,3)^2/(2,0,0)/(0,4,2)/(0,2,4)/(0,2,0)/(0,0,2)/(0,2,2)^3/(0,0,0)^3]")
print("This is the last case")
print(dimChecker(a[1]))
orderList3=order(3)
print(checker(a[1],basis,orderList3))
basis.append(a[1])








options=[]
#case 1 (2,1,1)
a=expand("[ (4,2,0)/(4,0,2)/(2,2,2)/(2,0,0)/(0,2,0)/ (0,0,2)/(0,0,0)^3/(2,1,2)^2/(4,1,0)^2/(0,3,0)^2 ]")
basis.append(a)

#case 2
a=expand("[(4,2,0),(2,4,0),(3,1,1)^2,(1,3,1)^2,(2,2,2),(2,0,0),(0,2,0),(0,0,2),(0,0,0)^3]")
basis.append(a)


# case 6  (3,1,0)/(0,0,2)/(0,0,0)$
a=expand("[(6,0,0)/&(4,2,0)/(3,1,2)/(3,1,1)^2/(4,0,1)^2/(3,1,0)/(0,2,1)^2/(2,0,0)/(0,2,0)/ (0,0,2)^2/(0,0,0)^3]")
basis.append(a)


a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
#In case 14  (4,0,0),(0,2,0),(0,0,2),(0,0,0)$
a[1]=expand("[(6,0,0),(4,2,0),(4,0,2),(3,1,1)^4,(4,0,0),(0,2,2),(2,0,0),(0,2,0)^2, \\(0,0,2)^2,(0,0,0)^3]")
basis.append(a[1])

#In case 16  A_1^3 = (1,1,0),(1,0,1),(0,1,1)$
a[2]=expand("[(2,1,1),(1,2,1),(1,1,2),(2,0,0)^2,(0,2,0)^2,(0,0,2)^2,(1,1,0),(1,0,1),(0,1,1),(0,0,0)^3, (2,0,1)^2,(1,2,0)^2,(0,1,2)^2,(1,1,1)^2,(1,0,0)^2,(0,1,0)^2,(0,0,1)^2]")
basis.append(a[2])



#In case 21 (1,1,0)^2,(0,0,2),(0,0,0)nd 
a[4]=expand("[ (2,2,0),(2,0,1)^2,(0,2,1)^2,(1,1,2)^2,(2,0,0)^3,(0,2,0)^3,(0,0,2)^2,(1,1,1)^4,(0,0,1)^4,(1,1,0)^2,(0,0,0)^4]")
basis.append(a[4])

#In case 31 w(2,0,0),(0,2,0),(0,0,2),(0,0,0)^3
a[5]=expand("[ (2,0,0)^4,(0,2,0)^4,(0,0,2)^4,(2,2,0),(2,0,2),(0,2,2),(1,1,1)^8,(0,0,0)^6]")
basis.append(a[5])

#In case 33 we have $V_{D_6}(\lambda_1) \downarrow A_1^3 =  (2,0,0)^2,(0,2,0),(0,0,2)$  thus we find 
a[6]=expand("[(4,0,0),(2,0,0)^3,(0,2,0),(0,0,2),(2,2,0)^2,(2,0,2)^2,(0,2,2),(0,0,0)^4]")
basis.append(a[6])






#A13 in A1D6 with diag

#64I1&9&  $A_1D_6$(1) &    $(1, (2,1,1))$		&$A$&  $ CASE1
a[0]=expand("[(4,2,0)/(4,0,2)/(2,2,2)/(2,0,0)^2/(0,2,0)/ (0,0,2)/ (3,1,2)/ (1,1,2)/(5,1,0)/(3,1,0)/(1,3,0)]") 
basis.append(a[0])

#I1&9&  $A_1D_6$(1) &    $(1, (2,1,1))$		&$A&  $ CASE2 ===> options[0]
ttt=expand("[(4,2,0)/(4,0,2)/(2,2,2)/(2,0,0)^2/(0,2,0)/ (0,0,2)/ (3,2,1)/(5,0,1)/ (1,2,1)/(3,0,1)/(1,0,3)]") 
options.append(ttt)


#print("///////////////////////////////////////////////")
#print(eq( options[0],a[2]))

#65 I2&9&  $A_1D_6$(1) &    $(1, (2,1,1))$		&$C$&  $CASE1
a[2]=expand("[(0,4,2)/(2,4,0)/(2,2,2)/(2,0,0)^2/(0,2,0)/(0,0,2)/(3,2,1)/  (1,2,1)/(1,4,1)/(1,0,3)]") 
basis.append(a[2])   


#&9& I2 $A_1D_6$(1) &    $(1, (2,1,1))$		&$C$&  $CASE2 ====> options[1]
a[3]=expand("[(0,4,2)/(2,4,0)/(2,2,2)/(2,0,0)^2/(0,2,0)/(0,0,2)/(2,2,2)/ (0,2,2)/(2,4,0)/(0,4,0)/(4,0,0)/(2,0,0)]") 
options.append(a[3])



#66 J1&10&  $A_1D_6$(2) &    $(1, (2,2,0)/(0,0,2))$	& $A$	&  $
a[2]=expand("[(4,2,0)/(2,4,0)/(4,1,1)/(2,1,1)/(2,3,1)/(0,3,1)/(2,2,2)/(2,0,0)^2/(0,2,0)/(0,0,2)]") 
basis.append(a[2])

#67 J2&&   &    	& $C$	&  $
a[3]=expand("[(0,4,2)/(0,2,4)/(2,3,1)/(0,3,1)/(2,1,3)/(0,1,3)/(2,2,2)/(2,0,0)^2/(0,2,0)/(0,0,2)]") 
basis.append(a[3])

#68 and 69 K3&11& $A_1D_6$(3) &     $ (1,(3,1,0)/(0,1,1))$	&$C$	&  $
a[4] = expand("[(0,6,0)/(0,4,2)/(1,3,2)/(1,3,0)/(2,0,0)^2/(0,2,0)/(0,0,2)^2/  (1,3,2)/(2,4,0)/(2,0,2)/(0,4,0)/(0,0,2)/(1,3,0)]")
basis.append(a[4])
a[5] = expand("[(0,6,0)/(0,4,2)/(1,3,2)/(1,3,0)/(2,0,0^2)/(0,2,0)/(0,0,2)^2/(1,4,1)/(2,3,1)/(0,3,1)/(1,0,3)/(1,0,1)]")
basis.append(a[5])

#70 L3&12& $A_1D_6$(4) &     $ (1,(3,1,0)/(1,0,1))$	& $C$	&  $
a[6] = expand("[(0,0,2)/(0,6,0)/(0,4,2)/(1,4,1)/(1,2,1)/(2,0,0)^2/(0,2,0)^2/(1,4,1)/(1,2,1)/(2,4,0)/(0,4,0)/(2,0,2)/(0,0,2)]")
basis.append(a[6])


#71 N1&14&   $A_1D_6$(6) &   $ (1,(3,1,0)/(0,0,2)/$	&$A$	&  $
a[0] = expand("[(6,0,0)/(4,2,0)/(3,1,2)/(4,1,1)/(5,0,1)/(2,1,1)/(3,0,1)/(3,1,0)/(1,2,1)/(2,0,0)^2/(0,2,0)/(0,0,2)^2]")

basis.append(a[0])


#72 N2&&   &   	&$B$	&  $
a[1] = expand("[(0,6,0)/(2,4,0)/(1,3,2)/(2,3,1)/(0,3,1)/(1,4,1)/(1,3,0)/(3,0,1)/(1,0,1)/(2,0,0)^2/(0,2,0)/(0,0,2)^2]")

basis.append(a[1])



#73 N3&&  &   	&$C$	&  $
a[2] = expand("[ (0,6,0)/(0,4,2)/(2,3,1)/(2,3,1)/(0,3,1)/(5,0,1)/(3,0,1)/(0,3,1)/(2,0,2)/(2,0,0)^3/(0,2,0)/(0,0,2)/(0,0,2)]")

basis.append(a[2])


#74 T2&&   &   	&$C$	&  $
a[2] = expand("[(0,6,0)/(0,4,2)/(2,4,0)/(2,3,1)^2/(0,3,1)^2/(0,4,0)/(2,0,2)/(2,0,0)/(0,2,0)/(0,0,2)^2/(2,0,0)^2]")

basis.append(a[2])



#75 D3&&     & 	&$C$ &   $
a[2]=expand("[(0,2,2)/(1,3,0)/(1,2,1)^2/(1,1,2)/(2,0,0)^2/(0,2,0)^4/(0,0,2)^3/(2,1,1)^2/(0,1,1)^2/(1,0,1)^2/(1,1,0)^3/(0,0,0) ]") 


basis.append(a[2])


#76 W2&&   &   	&$C$	&  $ (
a[1] = expand("[(0,2,2)/(2,2,0)/(2,0,2)/(0,0,2)/(2,1,1)^2/(2,0,0)^3/(0,2,0)^4/(0,0,2)^3/(2,1,1)^2/(0,1,1)^2/(2,0,0)^2/(0,1,1)^2/(0,0,0)^3]")


basis.append(a[1])

#77AB1&28&$A_1D_6$(33) & $(1,(2,0,0)^2/(0,2,0)/$ &$A$ &$
#INCOMPLETE

a[9] = expand("[(2,0,0)^4/(0,2,0)/(0,0,2)/(4,0,0)/(2,2,0)^2/(2,0,2)^2/(0,2,2)/(0,0,0)]")


basis.append(a[9])



#78 AB2&&& $(1,(2,0,0)^2/(0,2,0)/$ &$C$ &$
#INCOMPLETE
a[10] = expand("[(2,0,0)^2/(0,2,0)^3/(0,0,2)/(0,4,0)/(0,2,2)^2/(2,2,0)^2/(2,0,2)/(0,0,0)]")



basis.append(a[10])






#79& $A_2A_5$ & $(2,(2,0)/(0,2))$ &  $
a[1] = expand("[(2,2,0)^2/(2,0,2)^2/(0,2,2)^2/(2,2,2)^2/(4,0,0)/(0,4,0)/(0,0,4)/(2,0,0)/(0,2,0)/(0,0,2)/(0,0,0)]")
basis.append(a[1])


#80 G2C3 (6,(2,1))
a[1] = expand("[(10,0,0)/(6,4,0)/(6,2,2)/(0,4,2)/(2,0,0)/(0,2,0)/(0,0,2) ]")
#basis.append(a[1])


#checker(a[1],basis, orderList)

###############################################
###############################################
#THIS IS THE ADDITIONAL ONE
#53&$(2,2)/(0,0)^3  82??
a[1] = expand("[(1,3,1)^2/(1,1,3)^2/(2,0,0)/(0,4,2)/(0,2,4)/(0,2,0)/(0,0,2)/(0,2,2)^3/(0,0,0)^3]")
print("There is an additional case 82 to add to latex file")
#print(dimChecker(a[1]))
orderList3=order(3)
#print("Checking not equal to any previous ones")
#print(checker(a[1],basis,orderList3))
basis.append(a[1])
#print("Here is its nb")
#print(checker(a[1],basis,orderList3))
###############################################
###############################################



############################################################
############################################################
#####################TESTING################################
############################################################
############################################################



# in D6
#13b

a[0]= expand("[ (1,2,1)/(0,1,2)^2/(2,0,0)/(0,2,0)^2/(0,0,2)^2/(1,1,1)^2/(1,0,1)/(0,1,0)^2/(0,0,0)^6/(1,1,0)^4/(1,0,2)^2/(1,0,0)^2/(0,2,1)^2/(0,0,1)^2/(0,1,1)^4]")





#14b&      $ (1,1,0)/(0,1,0)^2/$		&  $
a[1]= expand("[ (1,2,0)^2/(2,0,0)/(0,2,0)^2/(0,0,2)/(0,1,1)^4/(1,1,1)^2/(1,0,0)^2/(0,0,0)^9/(1,1,1)^2/(0,2,0)^4/(1,0,0)^8/(0,1,1)^4/(0,0,0)^4]")


#14b&      $ (1,1,0)/(0,1,0)^2/$		&  $
a[2]= expand("[  (1,2,0)^2/(2,0,0)/(0,2,0)^2/(0,0,2)/(0,1,1)^4/(1,1,1)^2/(1,0,0)^2/(0,0,0)^9/(0,2,1)^2/(1,1,0)^4/(1,0,1)^4/(0,0,1)^2/(0,1,0)^8]")

#15b&      $ (1,0,0)^2/(0,1,0)^2/$		&  $
a[3]= expand("[ (2,0,0)/(0,2,0)/(0,0,2)/(1,1,0)^4/(1,0,1)^4/(0,1,1)^4/(0,0,0)^9/(0,0,0)^3/ (1,1,1)^2/(1,0,0)^8/(0,1,0)^8/(0,0,1)^8]")
# other option: (1,1,0)^4/(1,0,1)^4/ (0,0,0)^{16}/(0,1,1)^4/]")


#27b& $(1,1,0)/(0,1,1)/$ & $
a[4]= expand("[(1,3,0)/(0,3,1)/(1,2,1)/(1,2,0)^2/(0,0,0)^3/(2,0,0)/(0,2,0)^4/(0,0,2)/(1,1,1)^2/(1,0,0)^2/(1,1,0)^2/(0,1,1)^2/(1,0,1)/ (0,3,0)^2/(0,2,1)^2/(0,1,0)^4/(0,0,1)^2]")



#27b& $(1,1,0)/(0,1,1)/$ & $
a[5]= expand("[(1,3,0)/(0,3,1)/(1,2,1)/(1,2,0)^2/(0,0,0)^3/(2,0,0)/(0,2,0)^4/(0,0,2)/(1,1,1)^2/(1,0,0)^2/(1,1,0)^2/(0,1,1)^2/(1,0,1)/ (0,3,0)^4/(0,1,0)^8]")


#28b& $(1,0,0)^2/(0,1,1)/$ & $
a[6]= expand("[(0,1,3)/(1,0,2)^2/(0,0,2)^4/(0,0,0)^7/(0,0,0)^3/(2,0,0)/(0,2,0)/(0,0,2)^3/(0,1,1)^4/(1,1,1)^2/(0,1,1)^2/(1,0,0)^2/(1,1,1)^2/(1,0,2)^2/(1,0,0)^2]")

#28b& $(1,0,0)^2/(0,1,1)/$ & $
a[7]= expand("[(0,1,3)/(1,0,2)^2/(0,0,2)^4/(0,0,0)^7/(0,0,0)^3/(2,0,0)/(0,2,0)/(0,0,2)^3/(0,1,1)^4/(1,1,1)^2/(0,1,1)^2/(1,0,0)^2/(1,1,1)^4]")

#29b& $(1,1,0)/(1,0,1)$ & $
a[8]= expand("[(2,0,0)^3/(0,2,0)/(0,0,2)/(2,1,1)/(0,1,1)/(2,1,0)^2/(0,1,0)^2/(2,0,1)^2/(0,0,1)^2/(0,0,0)^9/(0,0,0)/(2,0,0)^4/(2,0,1)^2/(0,0,1)^2/(2,1,0)^2/(0,1,0)^2/(0,1,1)^4]")


#In D6
#D2&   	& 	&$B$ &   $
a[0]= expand("[(0,2,2)/(0,4,0))/(0,2,0)/(1,2,1)^2/(0,2,2)/(0,0,2)/(2,0,0)/(0,2,0)/(0,2,0)^4/(0,0,2)^3/(1,2,1)^2/(1,0,1)^2/(1,0,1)^2/(0,2,0)^3/(0,0,0)^4 ]")

#K1&11 &     $ (1,(3,1,0)/(0,1,1))$	&$A$	&  $
a[1] = expand("[(6,0,0)/(4,2,0)/(3,2,1)/(3,0,1)/(2,0,0)^2/(0,2,0)^2/(0,0,2)/ (4,2,0)/(5,0,1)/(1,2,1)/(4,0,0)/(2,2,0)/(3,0,1)/(2,0,0)]")



#K2&&  	& $B$	&  $
a[2] = expand("[(0,6,0)/(2,4,0)/(2,3,1)/(0,3,1)/(2,0,0)^3/(0,2,0)/ (0,0,2)/ (3,3,0)/ (1,3,0)/(1,4,1)/(3,0,1)/(1,0,1)/(1,3,0)]")



#V2&&       	&$B$&  $
a[3] = expand("[(2,1,1)/(1,0,2)^2/(2,0,0)/(0,2,0)/(2,0,0)^2/(0,0,2)^2/(1,1,1)^2/(0,1,1)/(1,0,0)^2/(0,0,0)^3/(2,1,0)^2/(0,1,0)^2/(1,1,2)/(1,1,0)/(1,0,1)/(3,0,1)/(1,0,1)/(2,0,1)^2/(0,0,1)^2]")


#V3&&     	&$C$&  $
a[4] = expand("[(1,1,2)/(2,0,1)^2/(2,0,0)^3/(0,2,0)/(0,0,2)^2/(1,1,1)^2/(1,0,1)/(0,1,0)^2/(0,0,0)^3/(1,1,1)^2/(3,1,0)/(1,1,0)/(1,1,0)/(2,0,2)/(0,0,2)/(2,0,0)/(2,0,1)^2/(0,0,1)^2/(0,0,0)]")



#AE1&31 & $(1,(1,1,0)/(0,1,1)$ &$A$& $
a[5] = expand("[(1,3,0)/(0,3,1)/(1,2,1)/(2,2,0)/(0,2,0)/(2,0,0)/(2,0,0)/(0,2,0)^4/(0,0,2)/(2,1,1)/(0,1,1)/(2,0,0)/(0,0,0)/(1,1,0)^2/(0,1,1)^2/(1,0,1)/ (1,3,0)^2/(1,1,0)^4 ]")


#AE2&31 & $(1,(1,1,0)/(0,1,1)$ &$B$& $
a[6] = expand("[(3,1,0)/(3,0,1)/(2,1,1)/(3,1,0)/(1,1,0)/(2,0,0)/(0,2,0)/(2,0,0)^4/(0,0,2)/(2,1,1)/(0,1,1)/(1,1,0)/(1,1,0)^2/(1,0,1)^2/ (0,1,1)/ (4,0,0)^2/(2,0,0)^2/(2,0,0)^4/(0,0,0)^4 ]")





#AF1&32 & $(1,(1,0,0)^2/(0,1,1)$ &$A$& $
a[7] = expand("[(0,1,3)/(1,0,2)^2/(1,0,2)^2/(2,0,0)^2/(0,2,0)/(0,0,2)^3/(1,1,1)^2/(1,1,1)^2/(0,1,1)^2/(1,0,0)^2/(1,0,0)^2/(0,0,0)^3(2,1,1)/(0,1,1)/(2,0,2)/(0,0,2)/(2,0,0)/(0,0,0)]")



#AF2& &&$B$& $
a[8] = expand("[(1,0,3)/(0,1,2)^2/(1,0,2)^2/(2,0,0)^2/(0,2,0)/(0,0,2)^3/(2,0,1)^2/(0,0,1)^2/(1,1,1)^2/(1,0,1)^2/(0,1,0)^2/(1,0,0)^2/(0,0,0)^3/ (2,1,1)/(0,1,1)/(1,1,2)/(1,1,0)]")



#AF3&&&$C$& $
a[9] = expand("[(3,0,1)/(2,1,0)^2/(3,0,0)^2/(1,0,0)^2/(2,0,0)^4/(0,2,0)/(0,0,2)/(2,0,1)^2/(0,0,1)^2/(1,1,1)^2/(1,0,1)^2/(0,1,0)^2/(1,0,0)^2/(0,0,0)^3/(2,1,1)/(0,1,1)/(3,1,0)/(1,1,0)/(1,1,0)]")





#AG1&33 & $(1,(1,0,0)^2/(0,1,1)$ &$A$& $
a[10] = expand("[(0,1,3)/(1,0,2)^2/(1,0,2)^2/(2,0,0)^2/(0,2,0)/(0,0,2)^3/(1,1,1)^2/(1,1,1)^2/(0,1,1)^2/(1,0,0)^2/(1,0,0)^2/(0,0,0)^3/(2,1,1)^2/(0,1,1)^2]")


#AG2& &&$B$& $
a[11] = expand("[(1,0,3)/(0,1,2)^2/(1,0,2)^2/(2,0,0)^2/(0,2,0)/(0,0,2)^3/(2,0,1)^2/(0,0,1)^2/(1,1,1)^2/(1,0,1)^2/(0,1,0)^2/(1,0,0)^2/ (0,0,0)^3/  (2,1,1)^2/(0,1,1)^2]")



#AG3&&&$C$& $
a[12] = expand("[(3,0,1)/(2,1,0)^2/(3,0,0)^2/(1,0,0)^2/(2,0,0)^4/(0,2,0)/(0,0,2)/(2,0,1)^2/(0,0,1)^2/(1,1,1)^2/(1,0,1)^2/(0,1,0)^2/(1,0,0)^2/(0,0,0)^3(2,1,1)/(0,1,1)/(3,1,0)/(1,1,0)/(1,1,0)]")


#AH1&34&      $ (1,1,0)^2/(0,0,1)^2$	&$A$	&  $
a[13] = expand("[(2,2,0)/(2,0,0)/(2,0,0)^3/(0,2,0)^3/(0,0,2)/(1,1,1)^4/(0,0,0)^4/(3,0,1)/(1,0,1)/(1,2,1)/(2,1,0)^4/(0,1,0)^4/(1,0,1)^2]")


#AH2&34&      $ (1,1,0)^2/(0,0,1)^2$	&$C$	&  $
a[14] = expand("[(0,2,2)/(2,0,0)/(0,2,0)^3/(0,0,2)^3/(2,0,0)/(1,1,1)^4/(0,0,0)^4/(2,2,0)/(0,2,0)/(2,0,2)/(0,0,2)/(1,1,1)^4/(2,0,0)^2/(0,0,0)^2]")

#AI1& 35 & $(1,1,0)/(1,0,1)$ &$A$& $
a[15] = expand("[(2,0,0)/(2,0,0)^3/(0,2,0)/(0,0,2)/(2,1,1)/(0,1,1)/(2,1,0)^2/(0,1,0)^2/(2,0,1)^2/(0,0,1)^2/(0,0,0)^3/(3,0,0)^2/(1,0,0)^2(1,0,0)^2/(3,0,1)/(1,0,1)/(1,0,1)/(3,1,0)/(1,1,0)/(1,1,0)/(1,1,1)^2]")

#AI2&  & &$C$& $
a[16] = expand("[(2,0,0)/(0,2,0)^3/(0,0,2)/(2,0,0)/(1,2,1)/(1,0,1)/(0,2,1)^2/(0,0,1)^2/(1,2,0)^2/(1,0,0)^2/(0,0,0)^3/(1,2,0)^2/(1,0,0)^2/(2,2,0)/(0,2,0)/(2,0,0)/(0,0,0)/(1,2,1)/(1,0,1)/(2,0,1)^2/(0,0,1)^2]")



#AJ1& 36& $(1,1,0)^2/(0,1,1)$ &$A$&$
a[17] = expand("[(2,2,0)/(1,2,1)^2/(2,0,0)/(2,0,0)^3/(0,2,0)^4/(0,0,2)/(1,0,1)^2/(0,0,0)/(1,3,0)/(2,2,0)/(0,2,0)/(2,0,0)/(0,0,0)/(3,0,1)/(1,0,1)/(1,0,1)^2/(1,2,1)/(1,1,0)^2]")



#AJ2& &  &$B$&$
a[18] = expand("[(2,2,0)/(2,1,1)^2/(2,0,0)/(0,2,0)^3/(2,0,0)^4/(0,0,2)/ (0,1,1)^2/(0,0,0)/(4,0,0)/(2,0,0)/(3,1,0)/(1,1,0)^2/(1,2,1)/ (1,0,1)^2/(3,0,1)/(1,0,1)/(2,0,0)^2/(0,0,0)^2]")



#AJ3& &  &$C$&$
a[19] = expand("[(0,2,2)/(1,1,2)^2/(2,0,0)/(0,2,0)^3/(0,0,2)^4/(2,0,0)/ (1,1,0)^2/(0,0,0)/(1,0,3)/(1,1,2)/(1,1,0)/(2,2,0)/(0,2,0) /(2,0,0)^2/(0,0,0)^2/(2,0,2)/(0,0,2)/(1,0,1)^2]")


#AD2&&  & $B$&$
a[20] = expand("[(3,1,0)/(3,0,1)/(2,1,1)/(3,1,0)/(0,1,0)/(2,0,0)^5/(0,2,0)/(0,0,2)/(2,1,1)/(0,1,1)/(1,1,0)/(1,1,0)^2/(1,0,1)^2/(1,1,0)/(4,0,0)/(2,0,0)^3/(0,0,0)^3/(3,0,1)/(1,0,1)^2]")



a[21] = expand("[(3,1,0)/(3,0,1)/(2,1,1)/(3,1,0)/(1,1,0)/(2,0,0)^5/(0,2,0)/(0,0,2)/(2,1,1)/(0,1,1)/(1,1,0)/(1,1,0)^2/(1,0,1)^2/(1,1,0)/(4,0,0)^2/(2,0,0)^6/(0,0,0)^4]")


for i in range(20,22):
    print(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,")
    print(i)
    print(dimChecker(a[i]))
    checker(a[i], basis, orderList)
   # print(classifyIncompleteCubic(a[i], basis, orderList))




