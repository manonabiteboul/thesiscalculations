import math
import pickle

from collections import Counter
import itertools
import re
from tensor_wedge import wedge2
from tensor_wedge import wedge3
from compare import checker
from compare import order
from compare import expand
from tensor_wedge import latex
from tensor_wedge import latexWithoutDollar
from compare import dimChecker
from compare import classifyIncomplete
#from compare import classifyIncomplete2
from compare import classify
from compare import perm
from tensor_wedge import concat
from remove_tensor_A1 import removeFirstA1
from remove_tensor_A1 import removeA1
from remove_tensor_A1 import diagA1
from tensor_wedge import printLE8
from tensor_wedge import tensor



with open("basis", "rb") as f:
  basisA14 = pickle.load(f)
with open("basis2", "rb") as f:
  basisA14Lambda1 = pickle.load(f)
print("We have imported the basis A14 and basisA14Lambda1 in E8")
print(len(basisA14))
print(len(basisA14Lambda1))
a=expand("[(2, 2, 0, 0)^2/(0, 2, 0, 0)^5/(2, 0, 2, 0)/(0, 0, 2, 0)^2/(2, 0, 0, 2)/(0, 0, 0, 2)^2/(1, 2, 1, 1)^4/(1, 0, 1, 1)^4/(2, 0, 0, 0)^2/(0, 4, 0, 0)/(0, 0, 0, 0)/(0, 2, 2, 0)^2/(0, 2, 0, 2)^2/(0, 0, 2, 2)]")
#print(dimChecker(a))
orderList4 = order(4)
#print(checker(a,basisA14,orderList4))



for i in range(1,len(basisA14)):
    a=dimChecker(basisA14[i])
    if a!=248:
        print("problem in basis A14, one of the vectors has dim:")
        print(dimChecker(basisA14[i]))

##############################################################################################################
##############################################################################################################
print("A14 in D8")
##############################################################################################################
##############################################################################################################

Lambda1D8 = [[0]]
Lambda2D8= [[0]]

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 1, 0), (0, 0, 0, 1), (0, 0, 0, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 1, 0), (1, 0, 0, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 0, 4)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 3)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (4, 0, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (1, 0, 0, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (0, 1, 0, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (0, 0, 1, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 2)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 3, 0, 0), (0, 3, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (0, 1, 1, 0), (0, 0, 1, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 3)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (0, 1, 1, 0), (0, 1, 0, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1), (0, 0, 1, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (1, 0, 0, 3)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 3)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (3, 0, 0, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (0, 3, 0, 1)])

Lambda1D8.append([(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 2)])

Lambda1D8.append([(2, 0, 0, 0), (2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1)])

Lambda1D8.append([(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 1, 0, 1)])

Lambda1D8.append([(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (1, 1, 0, 0)])

Lambda1D8.append([(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 6)])

Lambda1D8.append([(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (0, 0, 0, 4)])

Lambda1D8.append([(2, 0, 0, 0), (4, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(2, 0, 0, 0), (4, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)])

Lambda1D8.append([(2, 0, 0, 0), (0, 4, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(2, 0, 0, 0), (0, 4, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)])

Lambda1D8.append([(2, 0, 0, 0), (0, 4, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)])

Lambda1D8.append([(2, 0, 0, 0), (0, 4, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)])

Lambda1D8.append([(2, 0, 0, 0), (0, 4, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)])

Lambda1D8.append([(2, 0, 0, 0), (0, 4, 0, 0), (0, 1, 1, 0), (0, 0, 1, 1)])

Lambda1D8.append([(2, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)])

Lambda1D8.append([(2, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 3)])

Lambda1D8.append([(2, 0, 0, 0), (0, 8, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(2, 0, 0, 0), (1, 1, 0, 0), (0, 0, 2, 2)])

Lambda1D8.append([(2, 0, 0, 0), (0, 1, 1, 0), (2, 0, 0, 2)])

Lambda1D8.append([(2, 0, 0, 0), (0, 1, 1, 0), (0, 2, 0, 2)])

Lambda1D8.append([(3, 0, 0, 0), (3, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(3, 0, 0, 0), (3, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)])

Lambda1D8.append([(4, 0, 0, 0), (0, 6, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(1, 1, 0, 0), (1, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)])

Lambda1D8.append([(1, 1, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)])

Lambda1D8.append([(1, 1, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)])

Lambda1D8.append([(1, 1, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)])

Lambda1D8.append([(1, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)])

Lambda1D8.append([(1, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 3)])

Lambda1D8.append([(1, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1), (0, 1, 1, 0)])

Lambda1D8.append([(1, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1), (0, 0, 1, 1)])

Lambda1D8.append([(1, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 3)])

Lambda1D8.append([(1, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 3)])

Lambda1D8.append([(1, 1, 0, 0), (1, 0, 1, 0), (3, 0, 0, 1)])

Lambda1D8.append([(1, 1, 0, 0), (1, 0, 1, 0), (0, 3, 0, 1)])

Lambda1D8.append([(1, 1, 0, 0), (0, 0, 1, 1), (1, 3, 0, 0)])

Lambda1D8.append([(1, 1, 0, 0), (0, 0, 1, 1), (1, 0, 3, 0)])

Lambda1D8.append([(1, 1, 0, 0), (0, 0, 1, 2), (0, 0, 1, 2)])

Lambda1D8.append([(1, 1, 0, 0), (0, 0, 1, 5)])

Lambda1D8.append([(1, 1, 0, 0), (1, 0, 1, 2)])

Lambda1D8.append([(1, 1, 0, 0), (2, 0, 1, 1)])

Lambda1D8.append([(1, 3, 0, 0), (0, 0, 1, 3)])

Lambda1D8.append([(1, 1, 1, 1)])


orderList4=order(4)
end=len(Lambda1D8)
end = 1
for i in range(1,end):
    p=str(i)+"& "+latex(Lambda1D8[i])+" & "
    Lambda2D8.append(wedge2(Lambda1D8[i]))
    c=classifyIncomplete(Lambda2D8[i],basisA14,orderList4)
    p=p+str(c)+" \\\\ \\hline"
    print(p)
    print(latex(Lambda2D8[i]))







print("//////////////////////////////////////")
print("new A14inD8, with the zeros")
print("//////////////////////////////////////")


vs = [
  [0],
  [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 1, 0), (0, 0, 0, 1), (0, 0, 0, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 1, 0), (0, 0, 0, 2), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 1, 0), (1, 0, 0, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (2, 0, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 0, 4)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 3)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 4), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 1, 0, 1), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (4, 0, 0, 0), (0, 0, 1, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (1, 0, 0, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (0, 1, 0, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (0, 0, 1, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 1, 1, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 3), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 2)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 3, 0, 0), (0, 3, 0, 0), (0, 0, 1, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 6, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (0, 1, 1, 0), (0, 0, 1, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 3)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (0, 1, 1, 0), (0, 1, 0, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1), (0, 0, 1, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (1, 0, 0, 3)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 3)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (3, 0, 0, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 0), (0, 3, 0, 1)],
  [(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 1, 2)],
  [(2, 0, 0, 0), (2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1)],
  [(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1)],
  [(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1)],
  [(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 1, 0, 1)],
  [(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (2, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (1, 1, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 4), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 6)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (4, 0, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (0, 0, 0, 4)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (1, 0, 0, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 3), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 2), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 3, 0, 0), (0, 3, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (4, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],
  [(2, 0, 0, 0), (4, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],
  [(2, 0, 0, 0), (0, 4, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],
  [(2, 0, 0, 0), (0, 4, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],
  [(2, 0, 0, 0), (0, 4, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],
  [(2, 0, 0, 0), (0, 4, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)],
  [(2, 0, 0, 0), (0, 4, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],
  [(2, 0, 0, 0), (0, 4, 0, 0), (0, 1, 1, 0), (0, 0, 1, 1)],
  [(2, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],
  [(2, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 3)],
  [(2, 0, 0, 0), (0, 6, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 8, 0, 0), (0, 0, 1, 1)],
  [(2, 0, 0, 0), (1, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (1, 1, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (1, 1, 0, 0), (0, 1, 1, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 3), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (1, 1, 0, 0), (0, 0, 2, 2)],
  [(2, 0, 0, 0), (0, 1, 1, 0), (0, 1, 1, 0), (0, 1, 0, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 1, 1, 0), (1, 0, 0, 3), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 3), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 1, 1, 0), (3, 0, 0, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 1, 1, 0), (0, 3, 0, 1), (0, 0, 0, 0)],
  [(2, 0, 0, 0), (0, 1, 1, 0), (2, 0, 0, 2)],
  [(2, 0, 0, 0), (0, 1, 1, 0), (0, 2, 0, 2)],
  [(2, 0, 0, 0), (0, 1, 1, 2), (0, 0, 0, 0)],
  [(3, 0, 0, 0), (3, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],
  [(3, 0, 0, 0), (3, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],
  [(4, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(4, 0, 0, 0), (0, 6, 0, 0), (0, 0, 1, 1)],
  [(4, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(4, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(6, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0)],
  [(6, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1), (0, 0, 0, 0)],
  [(1, 1, 0, 0), (1, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],
  [(1, 1, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],
  [(1, 1, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],
  [(1, 1, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)],
  [(1, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],
  [(1, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 3)],
  [(1, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1), (0, 1, 1, 0)],
  [(1, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1), (0, 0, 1, 1)],
  [(1, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 3)],
  [(1, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 3)],
  [(1, 1, 0, 0), (1, 0, 1, 0), (3, 0, 0, 1)],
  [(1, 1, 0, 0), (1, 0, 1, 0), (0, 3, 0, 1)],
  [(1, 1, 0, 0), (0, 0, 1, 1), (1, 3, 0, 0)],
  [(1, 1, 0, 0), (0, 0, 1, 1), (1, 0, 3, 0)],
  [(1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 1, 0, 0), (0, 0, 1, 2), (0, 0, 1, 2)],
  [(1, 1, 0, 0), (0, 0, 1, 3), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 1, 0, 0), (0, 0, 1, 5)],
  [(1, 1, 0, 0), (0, 0, 2, 2), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)],
  [(1, 1, 0, 0), (1, 0, 1, 2)],
  [(1, 1, 0, 0), (2, 0, 1, 1)],
  [(1, 3, 0, 0), (0, 0, 1, 3)],
  [(1, 1, 1, 1)],
]


A14withZeros = [0]
end = len(vs)
end=1
for i in range(1,end):
    if vs[i] not in Lambda1D8:
#        print(latex(vs[i]))
        A14withZeros.append(vs[i])
print("vs has length : "+str(len(vs)))
print("We have already classified : "+str(len(Lambda1D8)))
print("Left with:")
print(len(A14withZeros))


Lambda2D8=[0]
end = len(A14withZeros)

end=1
for i in range(1,end):
    p=str(80+i)+"& "+latex(A14withZeros[i])+" & "
    Lambda2D8.append(wedge2(A14withZeros[i]))
    c=classifyIncomplete(Lambda2D8[i],basisA14,orderList4)
    p=p+str(c[1])+" \\\\ \\hline"
    p2 =str(c[1])+ "& $D_8$&"+latex(A14withZeros[i])+"& & \\\\"
    print(p2)
    #print(latex(Lambda2D8[i]))







basisA12=[[(0)]]
basisA12Lambda1=[[(0)]]
lambda1=[(0)]
lambda2=[(0)]
lambda5=[(0)]
lambda6=[(0)]


#print("The first 30 cases are A1A1 in A1D6")

lambda1.append([(10,), (0,)])
lambda5.append([(15,),(9,),(5,)])
lambda6.append([(15,),(9,),(5,)])

lambda1.append([(8,), (2,)])
lambda5.append(expand("[(11,)/(9,)/(5,)/(3,)]"))
lambda6.append(expand("[(11,)/(9,)/(5,)/(3,)]"))


lambda1.append([(6,), (4,)])
lambda5.append(expand("[(9,)/(7,)/(5,)/(3,)^2]"))
lambda6.append(expand("[(9,)/(7,)/(5,)/(3,)^2]"))

lambda1.append([(6,), (2,), (0,), (0,)])
lambda5.append(expand("[(7,)^2/(5,)^2/(1,)^2]"))
lambda6.append(expand("[(7,)^2/(5,)^2/(1,)^2]"))


lambda1.append([(6,), (0,), (0,), (0,), (0,), (0,)])
lambda5.append(expand("[(6,)^4/(0,)^4]"))
lambda6.append(expand("[(6,)^4/(0,)^4]"))

lambda1.append([(6,), (0,), (1,), (1,)])
lambda5.append(expand("[(7,)/(5,)/(6,)^2/(0,)^2/(1,)]"))
lambda6.append(expand("[(7,)/(5,)/(6,)^2/(0,)^2/(1,)]"))




lambda1.append([(4,), (2,), (2,), (0,)])
lambda5.append(expand("[(5,)^2/(3,)^4/(1,)^2]"))
lambda6.append(expand("[(5,)^2/(3,)^4/(1,)^2]"))

lambda1.append([(4,), (2,), (0,), (0,), (0,), (0,)])
lambda5.append(expand("[(4,)^4/(2,)^4]"))
lambda6.append(expand("[(4,)^4/(2,)^4]"))

lambda1.append([(4,), (2,), (1,), (1,)])
lambda5.append(expand("[(5,)/(3,)^2/(1,)/(4,)^2/(2,)^2]"))
lambda6.append(expand("[(5,)/(3,)^2/(1,)/(4,)^2/(2,)^2]"))

lambda1.append([(4,), (0,), (0,), (0,), (0,), (0,), (0,), (0,)])
lambda5.append(expand("[(3,)^8]"))
lambda6.append(expand("[(3,)^8]"))

lambda1.append([(4,), (0,), (0,), (0,), (1,), (1,)])
lambda5.append(expand("[(4,)^2/(2,)^2/(3,)^4]"))
lambda6.append(expand("[(4,)^2/(2,)^2/(3,)^4]"))

lambda1.append([(2,), (2,), (2,), (2,)])
lambda5.append(expand("[(4,)^2/(2,)^6/(0,)^4]"))
lambda6.append(expand("[(4,)^2/(2,)^6/(0,)^4]"))

lambda1.append([(2,), (2,), (2,), (0,), (0,), (0,)])
lambda5.append(expand("[(3,)^4/(1,)^8]"))
lambda6.append(expand("[(3,)^4/(1,)^8]"))

lambda1.append([(2,), (2,), (0,), (0,), (0,), (0,), (0,), (0,)])
lambda5.append(expand("[(2,)^8/(0,)^8]"))
lambda6.append(expand("[(2,)^8/(0,)^8]"))

lambda1.append([(2,), (2,), (0,), (0,), (1,), (1,)])
lambda5.append(expand("[(3,)^2/(1,)^4/(2,)^4/(0,)^4]"))
lambda6.append(expand("[(3,)^2/(1,)^4/(2,)^4/(0,)^4]"))

lambda1.append([(2,), (0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,)])
lambda5.append(expand("[(1,)^8/(1,)^8]"))
lambda6.append(expand("[(1,)^8/(1,)^8]"))

lambda1.append([(2,), (0,), (0,), (0,), (0,), (0,), (1,), (1,)])
lambda5.append(expand("[(2,)^4/(1,)^8/(0,)^4]"))
lambda6.append(expand("[(2,)^4/(1,)^8/(0,)^4]"))

lambda1.append([(2,), (0,), (3,), (3,)])
lambda5.append(expand("[(5,)/(4,)^2/(3,)/(2,)^2/(1,)^3]"))
lambda6.append(expand("[(5,)/(4,)^2/(3,)/(2,)^2/(1,)^3]"))

lambda1.append([(2,), (0,), (1,), (1,), (1,), (1,)])
lambda5.append(expand("[(3,)/(2,)^4/(1,)^6/(0,)^4]"))
lambda6.append(expand("[(3,)/(2,)^4/(1,)^6/(0,)^4]"))

lambda1.append([(0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,), (1,), (1,)])
lambda5.append(expand("[(1,)^8/(0,)^8/(0,)^8]"))
lambda6.append(expand("[(1,)^8/(0,)^8/(0,)^8]"))

lambda1.append([(0,), (0,), (0,), (0,), (3,), (3,)])
lambda5.append(expand("[(4,)^2/(3,)^4/(0,)^6]"))
lambda6.append(expand("[(4,)^2/(3,)^4/(0,)^6]"))

lambda1.append([(0,), (0,), (0,), (0,), (1,), (1,), (1,), (1,)])
lambda5.append(expand("[(2,)^2/(1,)^8/(0,)^5/(0,)^5]"))
lambda6.append(expand("[(2,)^2/(1,)^8/(0,)^5/(0,)^5]"))

#2 possible lambda5 in this case
lambda1.append([(3,), (3,), (1,), (1,)])
lambda5.append(expand("[(4,)^4/ (2,)^2/ (0,)^6]"))
lambda6.append(expand("[(5,)/(3,)^5/(1,)^3]"))

lambda1.append([(3,), (3,), (1,), (1,)])
lambda5.append(expand("[(5,)/(3,)^5/(1,)^3]"))
lambda6.append(expand("[(4,)^4/ (2,)^2/ (0,)^6]"))

#2 possible lambda5
lambda1.append([(1,), (1,), (1,), (1,), (1,), (1,)])
lambda5.append(expand("[(2,)^6/(0,)^9/(0,)^5]"))
lambda6.append(expand("[(3,)/(1,)^9/(1,)^5]"))

lambda1.append([(1,), (1,), (1,), (1,), (1,), (1,)])
lambda5.append(expand("[(3,)/(1,)^9/(1,)^5]"))
lambda6.append(expand("[(2,)^6/(0,)^9/(0,)^5]"))

#Check lambda5??
lambda1.append([(8,), (0,), (0,), (0,)])
lambda5.append(expand("[(10,)^2/(4,)^2]"))
lambda6.append(expand("[(10,)^2/(4,)^2]"))

#What is lambda5??
lambda1.append([(4,), (4,), (0,), (0,)])
lambda5.append(expand("[(6,)^2/(4,)^2/(2,)^2/(0,)^2]"))
lambda6.append(expand("[(6,)^2/(4,)^2/(2,)^2/(0,)^2]"))

#What is the spin here?
lambda1.append([(5,), (5,)])
lambda5.append(expand("[(8,)^2/(4,)^2/(0,)^4]"))
lambda6.append(expand("[(5,)^3/(9,)/(3,)]"))

#What is the spin here?
lambda1.append([(5,), (5,)])
lambda5.append(expand("[(5,)^3/(9,)/(3,)]"))
lambda6.append(expand("[(8,)^2/(4,)^2/(0,)^4]"))

for i in range(1,len(lambda1)):
    lambda2.append(wedge2(lambda1[i]))
    #print(dimChecker(lambda2[i]))



orderList3=order(3)
LE8=[0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
basisA13=[[0]]
basisA13Lambda1=[[0]]

for i in range(1,31):
    #print("case "+str(i)+" "+latex(lambda1[i]))
    l1=""
    lam=latexWithoutDollar(lambda1[i])
    for j in range(0,len(lam)):
        if lam[j]!="," and lam[j]!="(" and lam[j]!=")":
            l1 = l1+lam[j]

    LE8[i]=[]
    LE8[i]=concat([(1,1)],lambda1[i])
    LE8[i]=LE8[i]+concat([(1,0)],lambda5[i])
    LE8[i]=LE8[i]+[(2,0,0),(0,2,0)]
    LE8[i]=LE8[i]+concat([(0,0)],lambda2[i])
    LE8[i]=LE8[i]+concat([(0,1)],lambda6[i])
    if dimChecker(LE8[i])!=248:
        print("LE8 does not have dim 248 at i=")
        print(i)

    temp=checker(LE8[i],basisA13,orderList3)
    #print(temp)
    if temp==-1:
        #print("New element, added to basis")
        basisA13.append(LE8[i])
        basisA13Lambda1.append(lambda1[i])
        p=str(checker(LE8[i],basisA13,orderList3))+"& $\\bar{A_1} \\bar{A_1} D_6$& $ (1,1,"+l1+") $ & "+latex(LE8[i])+"\\\\ "
        #print(p)
        #print("& $\\subseteq \\bar{A_1}E_7$ & & $$ \\\\ \\hline ")
        #print(" ")
    #else:
        #print("conjugate to "+latex(basisA13Lambda1[temp]))

#print(len(basisA13))
#print("for latex")
end = 31
end = 1
for i in range(1,end):
    temp=""
    lam=latexWithoutDollar(lambda1[i])
    for j in range(0,len(lam)):
        if lam[j]!="," and lam[j]!="(" and lam[j]!=")":
            temp = temp+lam[j]

    p=str(i)+"& $\\bar{A_1} \\bar{A_1} D_6$& $ (1,1,"+temp+") $ \\\\ \\hline"
    print(p)
end = 92
end = 64
for i in range(64,end):
    p=str(i)+"& $\\bar{A_1} \\bar{A_1} D_6$& $ (1,          ) $ \\\\ \\hline"
    print(p)


#The next ones are in D6
#print("///////////////////////////////////////////")
#print("cases 31 to 63 are in D6")
#print("///////////////////////////////////////////")
lambda1.append(expand("[ (2,2)/(2,0)]"))
lambda5.append(expand("[(4, 1)/(2,1)/(2, 3)/(0,3) ]"))
lambda6.append(expand("[(4, 1)/(2,1)/(2, 3)/(0,3) ]"))



#32
lambda1.append(expand("[(8,0)/(0,2)]"))
lambda5.append(expand("[ (10,1)/(4,1)]"))
lambda6.append(expand("[(10,1)/(4,1) ]"))

#33
lambda1.append(expand("[(3,1)/(1,1)]"))
lambda5.append(expand("[(5,0)/(3,0)/(1,2)/(3,2)/(3,0) ]"))
lambda6.append(expand("[(4,1)^2/(2,1)/(0,3)/(0,1) ]"))


#34
lambda1.append(expand("[(3,1)/(1,1)]"))
lambda5.append(expand("[(4,1)^2/(2,1)/(0,3)/(0,1) ]"))
lambda6.append(expand("[ (5,0)/(3,0)/(1,2)/(3,2)/(3,0)]"))


#35
lambda1.append(expand("[(3,1)/(1,0)^2]"))
lambda5.append(expand("[(4,1)/(2,1)/(4,0)^2/(0,2)^2]"))
lambda6.append(expand("[(5,0)/(3,0)/(1,2)/(3,1)^2 ]"))

#36
lambda1.append(expand("[(3,1)/(1,0)^2]"))
lambda5.append(expand("[ (5,0)/(3,0)/(1,2)/(3,1)^2 ]"))
lambda6.append(expand("[ (4,1)/(2,1)/(4,0)^2/(0,2)^2]"))

lambda1.append(expand("[ (3,1)/(0,1)^2]"))
lambda5.append(expand("[(4,1)/(0,3)/(0,1)/(3,1)^2 ]"))
lambda6.append(expand("[ (3,2)/(3,0)/(4,0)^2/(0,2)^2]"))

lambda1.append(expand("[(3,1)/(0,1)^2]"))
lambda5.append(expand("[ (3,2)/(3,0)/(4,0)^2/(0,2)^2]"))
lambda6.append(expand("[(4,1)/(0,3)/(0,1)/(3,1)^2  ]"))

lambda1.append(expand("[ (3,1)/(2,0)/(0,0)]"))
lambda5.append(expand("[(5,0)/(3,0)/(1,2)/(4,1)/(2,1) ]"))
lambda6.append(expand("[ (5,0)/(3,0)/(1,2)/(4,1)/(2,1)]"))

#40
lambda1.append(expand("[ (3,1)/(0,2)/(0,0)]"))
lambda5.append(expand("[ (3,2)/(3,0)/(4,1)/(0,3)/(0,1)]"))
lambda6.append(expand("[ (3,2)/(3,0)/(4,1)/(0,3)/(0,1)]"))



lambda1.append(expand("[ (3,0)^2/(0,2)/(0,0)]"))
lambda5.append(expand("[ (3,1)^2/(4,1)/(0,1)^3]"))
lambda6.append(expand("[ (3,1)^2/(4,1)/(0,1)^3]"))



lambda1.append(expand("[ (3,1)/(0,0)^4]"))
lambda5.append(expand("[ (3,1)^2/(4,0)^2/(0,2)^2]"))
lambda6.append(expand("[ (3,1)^2/(4,0)^2/(0,2)^2]"))

lambda1.append(expand("[ (6,0)/(0,4)]"))
lambda5.append(expand("[ (6,3)/(0,3)]"))
lambda6.append(expand("[ (6,3)/(0,3)]"))


lambda1.append(expand("[ (6,0)/(0,2)/(0,0)^2]"))
lambda5.append(expand("[ (6,1)^2/(0,1)^2]"))
lambda6.append(expand("[(6,1)^2/(0,1)^2]"))

#45
lambda1.append(expand("[ (4,0)/(0,4)/(0,0)^2]"))
lambda5.append(expand("[ (3,3)^2]"))
lambda6.append(expand("[ (3,3)^2]"))

lambda1.append(expand("[ (4,0)/(1,1)/(0,2)]"))
lambda5.append(expand("[ (4,1)/(2,1)/(3,2)/(3,0)]"))
lambda6.append(expand("[ (4,1)/(2,1)/(3,2)/(3,0)]"))

lambda1.append(expand("[ (4,0)/(0,2)^2/(0,0)]"))
lambda5.append(expand("[ (3,2)^2/(3,0)^2]"))
lambda6.append(expand("[(3,2)^2/(3,0)^2 ]"))

lambda1.append(expand("[ (4,0)/(0,2)/(2,0)/(0,0)]"))
lambda5.append(expand("[ (4,1)^2/(2,1)^2]"))
lambda6.append(expand("[(4,1)^2/(2,1)^2 ]"))

lambda1.append(expand("[ (1,1)^3]"))
lambda5.append(expand("[ (2,1)^3/(0,1)^5/(0,3)]"))
lambda6.append(expand("[(3,0)/(1,2)^3/(1,0)^5 ]"))

#50
lambda1.append(expand("[ (1,0)^2/(2,0)/(0,2)/(0,0)^2]"))
lambda5.append(expand("[ (1,1)^4/(2,1)^2/(0,1)^2]"))
lambda6.append(expand("[(1,1)^4/(2,1)^2/(0,1)^2 ]"))

lambda1.append(expand("[  (1,1)^2/(0,1)^2]"))
lambda5.append(expand("[ (2,1)/(0,1)/(1,1)^4/(0,3)/(0,1)^2]"))
lambda6.append(expand("[(2,0)^2/(0,0)^4/(1,2)^2/(1,0)^2/(0,2)^2 ]"))


lambda1.append(expand("[ (1,1)/(0,1)^2/(1,0)^2]"))
lambda5.append(expand("[ (2,0)^2/(0,0)^2/(1,1)^2/(1,2)/(1,0)/(0,1)^4]"))
lambda6.append(expand("[(2,1)/(0,1)/(1,0)^4/(1,1)^2/(0,2)^2/(0,0)^2]"))




lambda1.append(expand("[ (1,1)^2/(0,0)^4]"))
lambda5.append(expand("[ (2,0)^2/(0,0)^4/(1,1)^4/(0,2)^2]"))
lambda6.append(expand("[(2,0)^2/(0,0)^4/(1,1)^4/(0,2)^2 ]"))

lambda1.append(expand("[(1,1)/(2,0)/(0,2)/(0,0)^2]"))
lambda5.append(expand("[ (2,1)^2/(0,1)^2/(1,2)^2/(1,0)^2)]"))
lambda6.append(expand("[(2,1)^2/(0,1)^2/(1,2)^2/(1,0)^2) ]"))


#55
lambda1.append(expand("[ (2,0)^3/(0,2)]"))
lambda5.append(expand("[ (3,1)^2/(1,1)^4]"))
lambda6.append(expand("[(3,1)^2/(1,1)^4 ]"))


lambda1.append(expand("[(2,0)^2/(0,2)^2]"))
lambda5.append(expand("[ (2,2)^2/(2,0)^2/(0,2)^2/(0,0)^2]"))
lambda6.append(expand("[(2,2)^2/(2,0)^2/(0,2)^2/(0,0)^2 ]"))


lambda1.append(expand("[(2,0)^2/(0,2)/(0,0)^3]"))
lambda5.append(expand("[ (2,1)^4/(0,1)^4]"))
lambda6.append(expand("[(2,1)^4/(0,1)^4]"))

lambda1.append(expand("[(1,1)/(2,0)/(0,1)^2/(0,0)]"))
lambda5.append(expand("[ (1,1)^2/(1,2)/(1,0)/(2,1)/(0,1)/(2,0)^2/(0,0)^2]"))
lambda6.append(expand("[(1,2)/(1,0)/(1,1)^2/(2,0)^2/(0,0)^2/(2,1)/(0,1) ]"))



lambda1.append(expand("[(1,1)^2/(2,0)(0,0)]"))
lambda5.append(expand("[ (3,0)/(1,0)^2/(2,1)^2/(0,1)^2/(1,2)/(1,0)]"))
lambda6.append(expand("[(3,0)/(1,0)^2/(2,1)^2/(0,1)^2/(1,2)/(1,0) ]"))

#60
lambda1.append(expand("[(2,1)^2]"))
lambda5.append(expand("[ (2,2)^2/(0,0)^4/(4,0)^2]"))
lambda6.append(expand("[(2,1)^3/(4,1)/(0,3) ]"))


lambda1.append(expand("[(2,1)^2]"))
lambda5.append(expand("[(2,1)^3/(4,1)/(0,3) ]"))
lambda6.append(expand("[ (2,2)^2/(0,0)^4/(4,0)^2]"))


lambda1.append(expand("[(5,1)]"))
lambda5.append(expand("[ (8,1)/(4,1)/(0,3)]"))
lambda6.append(expand("[(5,2)/(9,0)/(3,0) ]"))

lambda1.append(expand("[(5,1)]"))
lambda6.append(expand("[ (8,1)/(4,1)/(0,3)]"))
lambda5.append(expand("[(5,2)/(9,0)/(3,0) ]"))


lambda1.append(expand("[(2,2)/(0,0)^3]"))
lambda5.append(expand("[ (3,1)^2/(1,3)^2]"))
lambda6.append(expand("[(3,1)^2/(1,3)^2 ]"))

##lambda1.append(expand("[(2,2)/(0,0)^3]"))
##lambda6.append(expand("[ (3,1)^4]"))
##lambda5.append(expand("[(1,3)^4 ]"))

for i in range(31,len(lambda1)):
    lambda2.append(wedge2(lambda1[i]))
    #print(dimChecker(lambda2[i]))

for i in range(31,len(lambda1)):
    LE8[i]=[]
    LE8[i]=concat([(1,)],lambda1[i])
    LE8[i]=LE8[i]+concat([(1,)],lambda1[i])
    LE8[i]=LE8[i]+concat([(1,)],lambda5[i])
    LE8[i]=LE8[i]+[(2,0,0),(0,0,0),(0,0,0),(0,0,0)]
    LE8[i]=LE8[i]+concat([(0,)],lambda2[i])
    LE8[i]=LE8[i]+concat([(0,)],lambda6[i])
    LE8[i]=LE8[i]+concat([(0,)],lambda6[i])
    #print("case "+str(i))
    #print(latex(lambda1[i]))
    #print(latex(LE8[i]))

    #print(dimChecker(LE8[i]))
    if dimChecker(LE8[i])!=248:
        print("LE8 does not have dim 248 at i=")
        print(i)

    temp=checker(LE8[i],basisA13,orderList3)
    #print("is it equal to any of the previous ones?")
    #print(temp)
    if temp==-1:
        basisA13.append(LE8[i])
        basisA13Lambda1.append(lambda1[i])
        p=str(checker(LE8[i],basisA13,orderList3))+"& $\\bar{A_1} \\bar{A_1} D_6$& $ (1,0,"+latexWithoutDollar(lambda1[i])+") $ &"+latex(LE8[i])+"\\\\ "
        #print(p)
        #print("& $\\subseteq \\bar{A_1}E_7$ & & $$ \\\\ \\hline ")
        #print(" ")
    else:
      print("This A13: "+latex(lambda1[i]))
      print("is conjugate to "+latex(basisA13Lambda1[temp]))

#print(latex(basisA13[len(basisA13)-1]))
#print("IS THIS EQUAL TO 61??")
#print(len(basisA13))


#print(" 90??")
#print(len(basisA13))

#print("//////////////////////////////////////////////")
#print("Cases 64 to 92 are in A1D6 with diag")
#print("//////////////////////////////////////////////")
lambda1=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
lambda5=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
lambda6=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
lambda2=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

lambda1[1]=expand("[ (2,2)/(2,0)]")
lambda5[1]=expand("[(4, 1)/(2,1)/(2, 3)/(0,3) ]")
lambda6[1]=expand("[(4, 1)/(2,1)/(2, 3)/(0,3) ]")



lambda1[2]=expand("[(8,0)/(0,2)]")
lambda5[2]=expand("[ (10,1)/(4,1)]")
lambda6[2]=expand("[(10,1)/(4,1) ]")



lambda1[3]=expand("[(3,1)/(1,1)]")
lambda5[3]=expand("[(5,0)/(3,0)/(1,2)/(3,2)/(3,0) ]")
lambda6[3]=expand("[(4,1)^2/(2,1)/(0,3)/(0,1) ]")


lambda1[4]=expand("[(3,1)/(1,1)]")
lambda5[4]=expand("[(4,1)^2/(2,1)/(0,3)/(0,1) ]")
lambda6[4]=expand("[ (5,0)/(3,0)/(1,2)/(3,2)/(3,0)]")

lambda1[5]=expand("[(3,0)^2/(1,1)]")
lambda5[5]=expand("[  (5,0)/(1,0)^3/(3,1)^2/(3,0)]")
lambda6[5]=expand("[ (4,0)^2/(2,0)^2/(4,1)/(0,1)^3]")

lambda1[6]=expand("[ (3,1)/(2,0)/(0,0)]")
lambda5[6]=expand("[(5,0)/(3,0)/(1,2)/(4,1)/(2,1) ]")
lambda6[6]=expand("[ (5,0)/(3,0)/(1,2)/(4,1)/(2,1)]")


lambda1[7]=expand("[ (3,1)/(0,2)/(0,0)]")
lambda5[7]=expand("[ (3,2)/(3,0)/(4,1)/(0,3)/(0,1)]")
lambda6[7]=expand("[ (3,2)/(3,0)/(4,1)/(0,3)/(0,1)]")

lambda1[8]=expand("[ (6,0)/(0,4)]")
lambda5[8]=expand("[ (6,3)/(0,3)]")
lambda6[8]=expand("[ (6,3)/(0,3)]")

lambda1[9]=expand("[ (6,0)/(0,2)/(0,0)^2]")
lambda5[9]=expand("[ (6,1)^2/(0,1)^2]")
lambda6[9]=expand("[(6,1)^2/(0,1)^2]")

lambda1[10]=expand("[ (4,0)/(0,4)/(0,0)^2]")
lambda5[10]=expand("[ (3,3)^2]")
lambda6[10]=expand("[ (3,3)^2]")

lambda1[11]=expand("[ (1,1)^3]")
lambda5[11]=expand("[ (2,1)^3/(0,1)^5/(0,3)]")
lambda6[11]=expand("[(3,0)/(1,2)^3/(1,0)^5 ]")



lambda1[12]=expand("[ (1,1)/(0,2)^2/(0,0)^2]")
lambda5[12]=expand("[ (1,2)^2/(1,0)^2/(0,3)^2/(0,1)^4]")
lambda6[12]=expand("[(1,2)^2/(1,0)^2/(0,3)^2/(0,1)^4]")


lambda1[13]=expand("[ (2,0)^3/(0,2)]")
lambda5[13]=expand("[ (3,1)^2/(1,1)^4]")
lambda6[13]=expand("[(3,1)^2/(1,1)^4 ]")


lambda1[14]=expand("[(2,0)^2/(0,2)^2]")
lambda5[14]=expand("[ (2,2)^2/(2,0)^2/(0,2)^2/(0,0)^2]")
lambda6[14]=expand("[(2,2)^2/(2,0)^2/(0,2)^2/(0,0)^2 ]")

lambda1[15]=expand("[(2,1)^2]")
lambda5[15]=expand("[ (2,2)^2/(0,0)^4/(4,0)^2]")
lambda6[15]=expand("[(2,1)^3/(4,1)/(0,3) ]")

lambda1[16]=expand("[(2,1)^2]")
lambda6[16]=expand("[ (2,2)^2/(0,0)^4/(4,0)^2]")
lambda5[16]=expand("[(2,1)^3/(4,1)/(0,3) ]")


lambda1[17]=expand("[(5,1)]")
lambda5[17]=expand("[(5,2)/(9,0)/(3,0) ]")
lambda6[17]=expand("[ (8,1)/(4,1)/(0,3)]")

lambda1[18]=expand("[(2,2)/(0,0)^3]")
lambda5[18]=expand("[ (3,1)^2/(1,3)^2]")
lambda6[18]=expand("[ (3,1)^2/(1,3)^2 ]")

for i in range(1,19):
    lambda2[i]=wedge2(lambda1[i])
    #print(dimChecker(lambda2[i]))



LE8temp=[0]
for i in range(1,19):
    LE8[i]=[]
    LE8[i]=concat([(1,1)],lambda1[i])
    LE8[i]=LE8[i]+concat([(1,0)],lambda5[i])
    LE8[i]=LE8[i]+[(2,0,0,0),(0,2,0,0)]
    LE8[i]=LE8[i]+concat([(0,0)],lambda2[i])
    LE8[i]=LE8[i]+concat([(0,1)],lambda6[i])
    #print(latex(LE8[i]))
    #print("case "+str(i))
    #print(dimChecker(LE8[i]))

temp=diagA1(LE8[1],2,3)
#print("case 64")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[1],2,4)
#print("case 65")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[2],2,3)
#print("case 66")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[2],2,4)
#print("case 67")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)


temp=diagA1(LE8[3],2,3)
#print("case 68")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[3],2,4)
#print("case 69")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[4],2,3)
#print("case 70")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)


temp=diagA1(LE8[4],2,4)
#print("case 71")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)


temp=diagA1(LE8[5],2,4)
#print("case 72")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[6],2,3)
#print("case 73")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[7],2,4)
#print("case 74")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)


temp=diagA1(LE8[8],2,3)
#print("case 75")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[8],2,4)
#print("case 76")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[9],2,3)
#print("case 77")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[9],2,4)
#print("case 78")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)


temp=diagA1(LE8[10],2,3)
#print("case 79")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[11],2,3)
##print("case 80")
##print(dimChecker(temp))
##print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[11],2,4)
##print("case 81")
##print(dimChecker(temp))
##print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[12],2,3)
##print("case 82")
##print(dimChecker(temp))
##print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[13],2,3)
##print("case 83")
##print(dimChecker(temp))
##print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[13],2,4)
##print("case 84")
##print(dimChecker(temp))
##print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[14],2,3)
##print("case 85")
##print(dimChecker(temp))
##print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[15],2,3)
##print("case 86")
##print(dimChecker(temp))
##print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[15],2,4)
##print("case 87")
##print(dimChecker(temp))
##print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[16],2,3)
##print("case 88")
##print(dimChecker(temp))
##print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[16],2,4)
##print("case 89")
##print(dimChecker(temp))
##print(checker(basisA13,temp,orderList3))
basisA13.append(temp)


temp=diagA1(LE8[17],2,3)
##print("case 90")
##print(dimChecker(temp))
##print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[17],2,4)
##print("case 91")
##print(dimChecker(temp))
##print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

temp=diagA1(LE8[18],2,3)
##print("case 92")
##print(dimChecker(temp))
##print(checker(basisA13,temp,orderList3))
basisA13.append(temp)
#print(latex(basisA13[len(basisA13)-1]))

##for i in range(62,len(basisA13)):
##    p=str(i)+"&$ \\bar{A_1}\\bar{A_1}D_6 $&            &  "+latex(basisA13[i])+" \\\\"
##    print(p)
##    print("& $\\subseteq \\bar{A_1}E_7$ & & $$ \\\\ \\hline ")
##    print(" ")

#print("Cases 93 to 100 are all different")





#print("Case 93: A13 in A1A7 with (1,(4,0)/(0,2))")
temp=expand("[(1,6,0)^2/(1,2,0)^2/(1,4,2)^2/(1,0,2)^2/(2,0,0)/(0,8,0)/(0,6,0)/(0,4,0)^2/(0,2,0)^2/(0,0,0)/(0,4,2)^2/(0,4,0)^2/(0,6,2)^2/(0,2,2)^2]")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

#print("Case 94: A13 in A1A1A1 with (1,1,1)")
temp=expand("[(1,6,3)/(1,4,1)/(1,2,5)/(2,0,0)/(0,2,8)/(0,4,6)/(0,6,4)/(0,2,4)/(0,4,2)/(0,2,0)/(0,0,2)]")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

#print("Case 95: A13 in A1A1G2 with (1,1,6)")
temp=expand("[(1,1,10)/(1,1,2)/(1,3,6)/(2,0,0)/(0,4,6)/(0,2,12)/(0,2,8)/(0,2,4)/(0,2,0)/(0,0,10)/(0,0,2)]")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

#print("Case 96: A13 in A1G2C3 with (1,6,5)")
temp=expand("[(1,6,5)/(1,0,9)/(1,0,3)/(2,0,0)/(0,6,8)/(0,6,4)/(0,10,0)/(0,2,0)/(0,0,10)/(0,0,6)/(0,0,2)]")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)




#print("Case 97: A13 in A1G2C3 with (1,6,2^2)")
temp=expand("[(1,6,2)^2/(1,0,4)^2/(1,0,0)^4/(2,0,0)/(0,6,2)^3/(0,6,4)/(0,10,0)/(0,2,0)/(0,0,4)^3/(0,0,0)^3/(0,0,2)]")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)





#print("Cases 98 and 99  are diag in A14 in A1G2C3 with (1,6,(2,1))")
temp=expand("[(1,6,2,1)/(1,0,4,1)/(1,0,0,3)/(2,0,0,0)/(0,6,2,2)/(0,6,4,0)/(0,10,0,0)/(0,2,0,0)/(0,0,4,2)/(0,0,2,0)/(0,0,0,2)]")
t1=diagA1(temp,2,3)
t2 = diagA1(temp,2,4)

#print(dimChecker(t1))
#print(checker(basisA13,t1,orderList3))
basisA13.append(t1)
#print(dimChecker(t2))
#print(checker(basisA13,t2,orderList3))
basisA13.append(t2)


#print("Case 100: A13 in A1A1A1 in A1F4 with (1,1,1)")
temp=expand("[(1,1,16)/(1,1,8)/(1,3,0)/(2,0,0)/(0,2,16)/(0,2,8)/(0,2,0)/(0,0,22)/(0,0,14)/(0,0,10)/(0,0,2)]")
#print(dimChecker(temp))
#print(checker(basisA13,temp,orderList3))
basisA13.append(temp)

##for i in range(91,len(basisA13)):
##    print("/////////////")
##    print(i)
##    print(latex(basisA13[i]))

print("Finished building the basis, it has length:")
print(len(basisA13))









#///////////////////////////////////////////////
print("A13inE7")
#////////////////////////////////////////////////////

#We start by looking at all the elements of basisA14, then we will check the extra ones

#print(latex(removeA1(basisA14[48],1)))


end = 58
#end = 1
for i in range(1,end):
    temp=removeA1(basisA14[i],1)
    ch=checker(temp,basisA13,orderList3)
    #print("////")
    #print(str(i))
    #print("conj to "+str(ch))
    if ch==-1:
        #print("This A13 was added to the basis")
        #print(latex(temp))
        basisA13.append(temp)
    #else:
       # print("Conjugate to another element!")
    #p = str(ch)+" & $\\bar{A_1}\\bar{A_1} D_6$ &$(0,1,  "+latexWithoutDollar(basisA14Lambda1[i])+" )$ & \\\\ "
    #print(p)
    #print("& $\\subseteq \\bar{A_1}E_7$ & &  \\\\ ")
#print("after up to case 56 basis has len"+str(len(basisA13)))
end = 71
#end = 1
for i in range(58,end):
    temp=removeA1(basisA14[i],2)
    ch=checker(temp,basisA13,orderList3)
    #print("////")
    #print(str(i))
    #print("conj to "+str(ch))
    if ch==-1:
      #  print("This A13 was added to the basis")
        basisA13.append(temp)
        #print(latex(temp))
    #else:
    #    print("Conjugate to another element!")


#print("after up to case 71 basis has len"+str(len(basisA13)))
end = 73
#end = 1
for i in range(71,end):
    temp=removeA1(basisA14[i],1)
    #print("////")
    #print(str(i))
    #print("conj to "+str(checker(temp,basisA13,orderList3)))
    if ch==-1:
      #  print("This A13 was added to the basis")
        basisA13.append(temp)
        #print(latex(temp))

print("Len once we have added A13inE7:")
print(len(basisA13))

##
##
##inE7 = [0]
##inE7.append(removeA1(basisA14[1],1))
##inE7.append(removeA1(basisA14[2],1))
##
###Cases 3 to 8, must add the ones we removed

lambda1[3]=expand("[(3,1)/(1,1)]")
lambda5[3]=expand("[(5,0)/(3,0)/(1,2)/(3,2)/(3,0) ]")
lambda6[3]=expand("[(4,1)^2/(2,1)/(0,3)/(0,1) ]")


lambda1[4]=expand("[(3,1)/(1,1)]")
lambda5[4]=expand("[(4,1)^2/(2,1)/(0,3)/(0,1) ]")
lambda6[4]=expand("[ (5,0)/(3,0)/(1,2)/(3,2)/(3,0)]")



lambda1[5]=expand("[(3,1)/(1,0)^2]")
lambda5[5]=expand("[(4,1)/(2,1)/(4,0)^2/(0,2)^2]")
lambda6[5]=expand("[(5,0)/(3,0)/(1,2)/(3,1)^2 ]")

lambda1[6]=expand("[(3,1)/(1,0)^2]")
lambda5[6]=expand("[ (5,0)/(3,0)/(1,2)/(3,1)^2 ]")
lambda6[6]=expand("[ (4,1)/(2,1)/(4,0)^2/(0,2)^2]")

lambda1[7]=expand("[ (3,1)/(0,1)^2]")
lambda5[7]=expand("[(4,1)/(0,3)/(0,1)/(3,1)^2 ]")
lambda6[7]=expand("[ (3,2)/(3,0)/(4,0)^2/(0,2)^2]")

lambda1[8]=expand("[(3,1)/(0,1)^2]")
lambda6[8]=expand("[(4,1)/(0,3)/(0,1)/(3,1)^2  ]")
lambda5[8]=expand("[ (3,2)/(3,0)/(4,0)^2/(0,2)^2]")

for i in range(3,9):
    lambda2[i]=wedge2(lambda1[i])
    #print(dimChecker(lambda2[i]))

LE8temp=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
for i in range(3,9):
    LE8temp[i]=[]
    LE8temp[i]=concat([(1,1)],lambda1[i])
    LE8temp[i]=LE8temp[i]+concat([(1,0)],lambda5[i])
    LE8temp[i]=LE8temp[i]+[(2,0,0,0),(0,2,0,0)]
    LE8temp[i]=LE8temp[i]+concat([(0,0)],lambda2[i])
    LE8temp[i]=LE8temp[i]+concat([(0,1)],lambda6[i])
    #print(latex(LE8[i]))
    #print("case "+str(i))
    #print(dimChecker(LE8[i]))



##print(checker(removeA1(LE8temp[3],1),basisA13,orderList3))
##print(checker(removeA1(LE8temp[4],1),basisA13,orderList3))
##print(checker(removeA1(LE8temp[5],1),basisA13,orderList3))
##print(checker(removeA1(LE8temp[6],1),basisA13,orderList3))
##print(checker(removeA1(LE8temp[7],1),basisA13,orderList3))
##print(checker(removeA1(LE8temp[8],1),basisA13,orderList3))
##




lambda1[1]=expand("[ (4,0)/(1,1)/(0,0)^3]")
lambda5[1]=expand("[ (4,0)^2/(2,0)^2/(3,1)^2]")
lambda6[1]=expand("[ (4,0)^2/(2,0)^2/(3,1)^2]")

lambda1[2]=expand("[  (4,0)/(0,1)^2/(0,0)^3]")
lambda5[2]=expand("[ (3,1)^2/(3,0)^4]")
lambda6[2]=expand("[ (3,1)^2/(3,0)^4]")


lambda1[3]=expand("[  (1,1)^2/(0,1)^2]")
lambda5[3]=expand("[ (2,1)/(0,1)/(1,1)^4/(0,3)/(0,1)^2]")
lambda6[3]=expand("[(2,0)^2/(0,0)^4/(1,2)^2/(1,0)^2/(0,2)^2 ]")

lambda1[4]=expand("[(1,1)/(2,0)/(0,0)^5]")
lambda5[4]=expand("[ (1,1)^4/(2,0)^4/(0,0)^4]")
lambda6[4]=expand("[(1,1)^4/(2,0)^4/(0,0)^4 ]")


lambda1[5]=expand("[(1,0)^2/(0,2)/(0,0)^5]")
lambda5[5]=expand("[ (1,1)^4/(0,1)^8]")
lambda6[5]=expand("[(1,1)^4/(0,1)^8]")

lambda1[6]=expand("[(2,1)^2]")
lambda5[6]=expand("[ (2,2)^2/(0,0)^4/(4,0)^2]")
lambda6[6]=expand("[(2,1)^3/(4,1)/(0,3) ]")


lambda1[7]=expand("[(2,1)^2]")
lambda5[7]=expand("[(2,1)^3/(4,1)/(0,3) ]")
lambda6[7]=expand("[ (2,2)^2/(0,0)^4/(4,0)^2]")

lambda1[8]=expand("[(5,1)]")
lambda5[8]=expand("[ (8,1)/(4,1)/(0,3)]")
lambda6[8]=expand("[(5,2)/(9,0)/(3,0) ]")

lambda1[9]=expand("[(5,1)]")
lambda5[9]=expand("[(5,2)/(9,0)/(3,0) ]")
lambda6[9]=expand("[ (8,1)/(4,1)/(0,3)]")


for i in range(1,10):
    lambda2[i]=wedge2(lambda1[i])
    #print(dimChecker(lambda2[i]))
#print("next set")
LE8temp=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
for i in range(1,10):
    LE8temp[i]=[]
    LE8temp[i]=concat([(1,1)],lambda1[i])
    LE8temp[i]=LE8temp[i]+concat([(1,0)],lambda5[i])
    LE8temp[i]=LE8temp[i]+[(2,0,0,0),(0,2,0,0)]
    LE8temp[i]=LE8temp[i]+concat([(0,0)],lambda2[i])
    LE8temp[i]=LE8temp[i]+concat([(0,1)],lambda6[i])
    #print(latex(LE8[i]))
    #print("case "+str(i))
    #print(dimChecker(LE8[i]))

#for i in range(1,10):
#    print(checker(removeA1(LE8temp[i],1),basisA13,orderList3))



#Case 76 $\bar{A_1}D_6$&  $ (\underline{1},({3},\underline{1},{0})/({0},\underline{0},{2})/({0},\underline{0},{0})))$

lambda1[1]=expand("[(3,1,0)/(0,0,2)/(0,0,0)]")
lambda5[1]=expand("[(3,1,1)/(4,0,1)/(0,2,1) ]")
lambda6[1]=expand("[ (3,1,1)/(4,0,1)/(0,2,1)]")
temp=[]
temp = temp+concat([(1,)],lambda1[1])
temp = temp+concat([(1,)],lambda1[1])
temp = temp+concat([(0,)],lambda5[1])
temp = temp+concat([(0,)],lambda5[1])
temp = temp+[(0,0,0,0),(0,0,0,0),(0,0,0,0),(2,0,0,0)]
lambda2[1]=wedge2(lambda1[1])
temp = temp+concat([(0,)],lambda2[1])
temp = temp+concat([(1,)],lambda6[1])
orderList4 = order(4)
#print(checker(temp,basisA14,orderList4))
t = diagA1(temp,1,3)
#print(dimChecker(t))
print("case76:")
print(checker(t,basisA13,orderList3))


#68&$\bar{A_1}D_6$ &  $(\underline{1},({4},\underline{0},{0})/({0},\underline{2},{0})/({0},\underline{0},{2})/({0},\underline{0},{0})$&               \\ \hline


lambda1[1]=expand("[(4,0,0)/(0,2,0)/(0,0,2)/(0,0,0)]")
lambda5[1]=expand("[(3,1,1)^2]")
lambda6[1]=expand("[(3,1,1)^2]")
temp=[]
temp = temp+concat([(1,)],lambda1[1])
temp = temp+concat([(1,)],lambda1[1])
temp = temp+concat([(0,)],lambda5[1])
temp = temp+concat([(0,)],lambda5[1])
temp = temp+[(0,0,0,0),(0,0,0,0),(0,0,0,0),(2,0,0,0)]
lambda2[1]=wedge2(lambda1[1])
temp = temp+concat([(0,)],lambda2[1])
temp = temp+concat([(1,)],lambda6[1])
orderList4 = order(4)


#print(checker(temp,basisA14,orderList4))
t = diagA1(temp,1,3)
print("case 68: ")
print(dimChecker(t))
print(checker(t,basisA13,orderList3))





##print(latex(inE7[len(inE7)-1]))
##print(len(inE7))
##
###Adding case 25
##
##for i in range(22,38):
##    inE7.append(removeA1(basisA14[i],1))
##print(latex(inE7[len(inE7)-1]))
##print(len(inE7))
##
#Add cases 44 and 45







print("A13 is in A14 in A1E7 with diag")
end = 50
#end = 1
for i in range(1,end):
    for j in range(2,5):
        temp=diagA1(basisA14[i],1,j)

        a=latexWithoutDollar(basisA14Lambda1[i])
        t2 = ""
        for k in range(0,len(a)):
            if a[k]=="(":
                       t2 = t2+"(\\underline{"
            elif a[k]==",":
                       t2 = t2+"},"
            else:
                      t2=t2+a[k]
        t3 = ""
        for k in range(0,len(a)):
            if a[k]==",":
                       t3 = t3+",\\underline{"
            elif a[k]==")":
                       t3 = t3+"})"
            else:
                       t3=t3+a[k]
        p=""
        p2=""
        if j==2:
            #p is what to print for table in E7 chapter
            #p2 is what to print for A13inE7 table in Tables chapter
            p=str(i)+p+"& (i) "
            p2=str(checker(temp,basisA13,orderList3))+"&  $\\bar{A_1} \\bar{A_1}D_6 $ &$(\\underline{1},\\underline{1},"
            p=p+"& $(\\underline{1},\\underline{1},"
            p=p+a+")$& "
            p2=p2+a+")$& "
            p=p+str(checker(temp,basisA13,orderList3))
            p=p+"\\\\ \\hline"
            p2=p2+"\\\\ "
            
            #print(p2)
            #print("& $\\subseteq \\bar{A_1}E_7$ & &\\\\")

        if j==3:
            p=p+"& (ii) "
            p2=str(checker(temp,basisA13,orderList3))+"&  $\\bar{A_1} \\bar{A_1}D_6 $ &$(\\underline{1},1,"
            p=p+"& $(\\underline{1},1,"
            p=p+t2+")$& "
            p2=p2+t2+")$& "
            p=p+str(checker(temp,basisA13,orderList3))
            p=p+"\\\\ \\hline"
            p2=p2+"\\\\ "
            #print(p2)
            #print("& $\\subseteq \\bar{A_1}E_7$ & &\\\\")
        if j==4:
            p=p+"& (iii) "
            p=p+"& $(\\underline{1},1,"
            p2=str(checker(temp,basisA13,orderList3))+"&  $\\bar{A_1} \\bar{A_1}D_6 $ &$(\\underline{1},1,"
            p=p+t3+")$& "
            p2=p2+t3+")$& "
            p=p+str(checker(temp,basisA13,orderList3))
            p=p+"\\\\ \\hline"
            p2=p2+"\\\\ "
            #print(p2)
            #print("& $\\subseteq \\bar{A_1}E_7$ & &\\\\")
            #print(" ")


        if checker(temp,basisA13,orderList3)==-1:
            #print("We are adding")
            basisA13.append(temp)
            #print(latex(temp))
            #p=str(checker(temp,basisA13,orderList3))+"&$ \\bar{A_1} \\bar{A_1}D_6$ & $(\\underline{1},\\underline{1},"+a+")$& "+latex(temp)+"\\\\"
            #print(p)
            #print("& $\\subseteq \\bar{A_1}E_7$& \\\\ \\hline")
print(len(basisA13))

end = 58
#end = 1
for i in range(50,end):
    for j in range(2,5):
        temp=diagA1(basisA14[i],1,j)

        a=latexWithoutDollar(basisA14Lambda1[i])
        t2 = ""
        for k in range(0,len(a)):
            if a[k]=="(":
                       t2 = t2+"({"
            elif a[k]==",":
                       t2 = t2+"},{"
            elif a[k]==")":
                       t2 = t2+"})"
            else:
                      t2=t2+a[k]
        p=" "
        if j==2:

            p=str(i)+p+"& (i) "
            p=p+"& $(\\underline{1},{0},"
            p=p+t2+")$& "
            p=p+str(checker(temp,basisA13,orderList3))
            p=p+"\\\\ \\hline"
            #print(p)

        if j==3:
            p=p+"& (ii) "
            p=p+"& $(\\underline{1},0,"
            p=p+t2+")$& "
            p=p+str(checker(temp,basisA13,orderList3))
            p=p+"\\\\ \\hline"
            #print(p)
        if j==4:
            p=p+"& (iii) "
            p=p+"& $(\\underline{1},0,"
            p=p+t2+")$& "
            p=p+str(checker(temp,basisA13,orderList3))
            p=p+"\\\\ \\hline"
            #print(p)
            #print(" ")


        if checker(temp,basisA13,orderList3)==-1:
            #print("We are adding")
            basisA13.append(temp)
            #print(latex(temp)
end = len(basisA14Lambda1)
end = 1
for i in range(58,end):
    print("/////////")
    print(i)
    print(latex(basisA14[i]))
    print(" ")

end = len(basisA14Lambda1)
#end = 1
for i in range(58,end):
     for j in range(1,5):
         if j!=2:
            temp=diagA1(basisA14[i],2,j)

            a=latexWithoutDollar(basisA14Lambda1[i])
            p=" "
            if j==1:

                p=str(i)+p+"& (i) "
                p=p+"& $(\\underline{1},\\underline{1},"
                p=p+a+")$& "
                p=p+str(checker(temp,basisA13,orderList3))
                p=p+"\\\\ \\hline"
                #print(p)

            if j==3:
                p=p+"& (ii) "
                p=p+"& $(\\underline{\\underline{1}},\\underline{1},"
                p=p+a+")$& "
                p=p+str(checker(temp,basisA13,orderList3))
                p=p+"\\\\ \\hline"
                #print(p)
            if j==4:
                p=p+"& (iii) "
                p=p+"& $(\\underline{\\underline{1}},\\underline{1},"
                p=p+a+")$& "
                p=p+str(checker(temp,basisA13,orderList3))
                p=p+"\\\\ \\hline"
                #print(p)
                #print(" ")

           # print(temp)
            if checker(temp,basisA13,orderList3)==-1:
                #print("We are adding")
                basisA13.append(temp)
                #print(latex(temp))
                #print(str(checker(temp,basisA13,orderList3)) +"&$\\bar{A_1} \\bar{A_1} D_6$ &$       $&   "+latex(temp))

end = 73
#end = 1
for i in range(71,end):
    print("////")
    print(i)
    for j in range(2,5):
        temp=diagA1(basisA14[i],1,j)
        #print("j = "+str(j))
        #print(checker(temp,basisA13,orderList3))

        if checker(temp,basisA13,orderList3)==-1:
            basisA13.append(temp)
            #print(str(checker(temp,basisA13,orderList3)) +"&$\\bar{A_1} \\bar{A_1} D_6$ &$       $&   "+latex(temp))


print("We have finished building the basis of all A13 in A1E7, it should be have len 157:")
print(len(basisA13))















print("////////////////////")
print("IN E6A2")
print("////////////////////")

LE6=[[(0)]]
LE6l1=[[(0)]]

LE6.append(expand("[(1,9)/(1,5)/(1,3)/(2,0)/(0,10)/(0,8)/(0,6)/(0,4)/(0,2) ]"))


LE6.append(expand("[(0,8)/(1,6)^2/(0,6)/(0,4)^3/(1,2)^2/(2,0)/(0,2)/(0,0)  ]"))


LE6.append(expand("[(0,6)/(1,5)/(0,4)^3/(1,3)^3/(2,0)/(0,2)^4/(1,1)/(0,0)  ]"))


LE6.append(expand("[(0,6)/(1,4)^2/(0,4)/(1,3)^2/(0,3)^4/(2,0)/(0,2)/(1,0)^2/(0,0)^4 ]"))


LE6.append(expand("[(1,4)^2/(0,4)^4/(1,2)^2/(2,0)/(0,2)^4/(1,0)^4/(0,0)^3  ]"))


LE6.append(expand("[(0,4)/(1,3)^2/(0,3)^2/(1,2)^2/(2,0)/(0,2)^4/(1,1)^2/(1,0)^2/(0,1)^4/(0,0)^3  ]"))


LE6.append(expand("[(1,3)/(2,0)/(0,2)^9/(1,1)^8/(0,0)^8  ]"))

LE6.append(expand("[(1,2)^2/(2,0)/(0,2)^4/(1,1)^4/(1,0)^6/(0,1)^8/(0,0)^7  ]"))


LE6.append(expand("[(2,0)/(0,2)/(1,1)^6/(1,0)^8/(0,1)^8/(0,0)^8/(0,0)^8 ]"))


LE6.append(expand("[(0,4)/(1,2)^6/(2,0)/(0,2)^7/(1,0)^2/(0,0)^9  ]"))

#(0,(2,1))
LE6.append(expand("[(4,1)^2/(4,2)/(4,0)/(0,3)^2/(2,1)^2/(2,2)/(2,0)/(0,2)/(0,0)^3  ]"))


LE6.append(expand("[(4,0)/(0,4)/(2,2)^6/(2,0)/(0,2)/(0,0)^8  ]"))


LE6.append(expand("[(3,0)^2/(2,2)/(2,1)^2/(1,2)^2/(2,0)^2/(0,2)/(1,1)^4/(1,0)^2/(0,1)^2/(0,0)^4  ]"))


LE6.append(expand("[(2,2)/(2,0)^5/(0,2)^5/(1,1)^8/(0,0)^7]"))

#(\underline{1},(\underline{2},1))
LE6.append(expand("[(5,1)/(3,1)^2/(1,1)/(1,3)/(2,0)^2/(4,2)/(4,0)/(2,2)/(0,2)]"))

#(\underline{1},(2,\underline{1}))
LE6.append(expand("[(2,4)/(0,4)/(2,2)^2/(0,2)^2/(4,0)/(2,0)^3/(2,4)/(0,4)]"))

LE6.append(expand("[(3,2)^2/(1,2)^2/(1,0)^2/(2,0)^2/(4,0)/(0,4)/(0,2)/(2,2)^2/ (0,0)]"))


LE6.append(expand("[(2,2)^2/(0,2)^5/(1,2)^2/(1,0)^2/(2,0)^2/(0,4)/(1,2)^2/(1,0)^2/(0,0)^2]"))


LE6.append(expand("[(2,1)^2/(0,1)^2/(1,3)/(1,1)^2/(3,1)/(2,0)^2/(2,2)/(0,2)^2/ (1,2)^2/(1,0)^2/(0,0)]"))


LE6.append(expand("[(0,6)/(2,4)/(0,4)/(0,4)/(1,3)^2/(1,3)^2/(2,0)^2/(0,2)/ (2,0)/(0,0)^2]"))

LE6l1.append([(5,)])
LE6l1.append([(4,),(0,)])
LE6l1.append([(3,),(1,)])
LE6l1.append([(2,),(2,)])
LE6l1.append([(2,),(1,),(0,)])
LE6l1.append([(1,),(1,),(1,)])
LE6l1.append([(1,),(1,),(0,),(0,)])
LE6l1.append([(1,),(0,),(0,),(0,),(0,)])
LE6l1.append([(2,),(0,),(0,),(0,)])

#for i in range(1,len(LE6)):
#           print(dimChecker(LE6[i]))


end =len(LE6)
end=1
for i in range(1,end):
    print("////////////////////")
    print("case "+str(i))
    p1=str(2*i+1)+"&$ A_2A_1A_5$ & $(2,        )$ & "+str()
    p2=str(2*i)+""
    l1=[(4,0,0),(2,0,0)]
    l2=[(2,0,0),(1,0,0),(1,0,0),(0,0,0)]
    a=concat([(0,)],LE6[i])
    b=concat([(0,)],LE6[i])
    for j in range(0,len(l1)):
        a.append(l1[j])
    for j in range(0,len(l2)):
        b.append(l2[j])
    #print("First A1 in A2:")
    #print(classifyIncomplete(a,basisA13,orderList3))
    
    #print("Second A1 in A2:")
    #print(classifyIncomplete(b,basisA13,orderList3))
    
    c1=classifyIncomplete(a,basisA13,orderList3)
    c2=classifyIncomplete(b,basisA13,orderList3)
    if len(c1)>1:
        p1=str(2*i-1)+"&$ A_2A_1A_5$ & $(2,        )$ & "+str(c1[1])+"    \\\\ \\hline"
    else:
        p1=str(2*i-1)+"&$ A_2A_1A_5$ & $(2,        )$ & "+str(c1[0])+"    \\\\ \\hline"
    if len(c2)>1:
        p2=str(2*i)+"&$ A_2A_1A_5$ & $(1/0,        )$ & "+str(c2[1])+"    \\\\ \\hline"
    else:
        p2=str(2*i)+"&$ A_2A_1A_5$ & $(1/0,        )$ & "+str(c2[0])+"    \\\\ \\hline"
    print(p1)
    print(latex(a))
    print(" ")
    print(p2)
    print(latex(b))
    print(" ")


##print("Trying to fix the (2,1): calc of (2,1,(2,1))")
##L=expand("[(2,0,2,2)/(2,0,4,0)/(2,0,0,0)/(2,1,2,1)/(4,0,0,0)/(2,0,0,0)/(0,2,0,0)/(0,1,4,1)/(0,1,2,1)/(0,1,0,3)]")
##print("(2,0,2,1)")
##print(classifyIncomplete(removeA1(L,2),basisA13,orderList3))
##print("(2,\\underline{1}, \\underline{2},1)")
##print(classifyIncomplete(diagA1(L,2,3),basisA13,orderList3))
##print("(2,\\underline{1}, \\underline{2},1)")
##print(classifyIncomplete(diagA1(L,2,4),basisA13,orderList3))


##print("A13inA2C4")
L1 = expand("[(2,4,0)^2/(2,3,3)^2/(2,0,4)^2/(2,0,0)^2/(4,0,0)/(2,0,0)/(0,4,4)/(0,3,3)/(0,0,0)/(0,6,0)/(0,2,0)/(0,3,3)/(0,0,6)/(0,0,2)]")
L2 = expand("[(1,4,0)^2/(1,3,3)^2/(1,0,4)^2/(1,0,0)^2/(0,4,0)^2/(0,3,3)^2/(0,0,4)^2/(0,0,0)^2/(2,0,0)/(1,0,0)^2/(0,0,0)/(0,4,4)/(0,3,3)/(0,0,0)/(0,6,0)/(0,2,0)/(0,3,3)/(0,0,6)/(0,0,2)]")
##print(dimChecker(L1))
##print(dimChecker(L2))
#print(checker(L1,basisA13,orderList3))
#print(checker(L2,basisA13,orderList3))
basisA13.append(L1)
##print(latex(L1))
##print(checker(L1,basisA13,orderList3))

#In A2G2

L1=expand("[(2,2,6)^2/(2,4,0)^2/(2,0,0)^2/(4,0,0)/(2,0,0)/(0,4,6)/(0,2,6)/(0,4,0)/(0,2,0)/(0,0,10)/(0,0,2)]")
L2=expand("[(1,2,6)^2/(0,2,6)^2/(1,4,0)^2/(1,0,0)^2/(0,4,0)^2/(0,0,0)^2/(2,0,0)/(1,0,0)^2/(0,0,0)/(0,4,6)/(0,2,6)/(0,4,0)/(0,2,0)/(0,0,10)/(0,0,2)]")
#print(dimChecker(L1))
#print(dimChecker(L2))
#print(checker(L1,basisA13,orderList3))
#print(checker(L2,basisA13,orderList3))

L3=expand("[(2,1,6)^2/(2,0,6)^2/(2,2,0)^2/(2,1,0)^2/(2,0,0)^2/(4,0,0)/(2,0,0)/(0,2,6)/(0,1,6)^2/(0,0,6)/(0,2,0)/(0,1,0)^2/(0,0,0)/(0,0,10)/(0,0,2)]")
L4=expand("[(1,1,6)^2/(1,0,6)^2/(0,1,6)^2/(0,0,6)^2/(1,2,0)^2/(1,1,0)^2/(1,0,0)^2/(0,2,0)^2/(0,1,0)^2/(0,0,0)^2/(2,0,0)/(1,0,0)^2/(0,0,0)/(0,2,6)/(0,1,6)^2/(0,0,6)/(0,2,0)/(0,1,0)^2/(0,0,0)/(0,0,10)/(0,0,2)]")
#print(dimChecker(L3))
#print(dimChecker(L4))
#print(checker(L3,basisA13,orderList3))
#print(checker(L4,basisA13,orderList3))

basisA13.append(L3)
#print(latex(L3))

#In A2B4
L1=expand("[(0,4,2)/(0,2,4)/(0,2,0)/(0,0,2)/(0,2,2)/(0,3,1)^2/(0,1,3)^2/(0,0,0)/(2,2,2)^2/(2,3,1)^2/(2,1,3)^2/(2,0,0)^4/(4,0,0)/(2,0,0)]")
L2=expand("[(0,4,2)/(0,2,4)/(0,2,0)/(0,0,2)/(0,2,2)/(0,3,1)^2/(0,1,3)^2/(0,0,0)/(1,2,2)^2/(0,2,2)^2/(1,3,1)^2/(0,3,1)^2/(1,1,3)^2/(0,1,3)^2/(1,0,0)^4/(0,0,0)^4/(2,0,0)/(1,0,0)^2/(0,0,0)]")
#print(dimChecker(L1))
#print(dimChecker(L2))
#print(checker(L1,basisA13,orderList3))
#print(checker(L2,basisA13,orderList3))


print(len(basisA13))


LE6=[[(0)]]
#15
LE6.append(expand("[(2,0,0)/(0,4,2)/(0,4,0)/(0,2,2)/(0,2,0)/(0,0,2) ]"))


#1,4/0
LE6.append(expand("[(1,2,2)^2/(1,0,0)^2/(2,0,0)/(0,4,0)/(0,0,4)/(0,2,0)/(0,0,2)/(0,2,2)^2/ (0,0,0)]"))

#1,3/1
LE6.append(expand("[(1,2,1)^2/(1,2,0)^2/(1,0,0)^2/(2,0,0)/(0,4,0)/(0,2,1)^2/(0,2,0)^3/(0,0,2)/(0,0,1)^2/(0,0,0)^2]"))

#1,3/0^2
LE6.append(expand("[(1,1,1)^2/(1,3,0)/(1,1,0)/(1,1,2)/(2,0,0)/(0,2,2)/(0,2,0)^2/(0,0,2)/ (0,2,1)^2/(0,0,1)^2/(0,0,0)]"))

#1,2^2)
LE6.append(expand("[(1,1,1)^2/(1,2,0)^2/(1,0,2)^2/(2,0,0)/(0,2,0)/(0,0,2)/(0,2,2)/(0,1,1)^4/ (0,0,0)^4]"))

#1,2/1/0
LE6.append(expand("[(1,1,2)/(2,0,0)/(0,2,0)/(0,0,2)^4/(1,1,0)^3/(1,0,1)^4/(0,1,1)^4/(0,0,0)^4]"))

#1^3
LE6.append(expand("[(2,0,0)/(0,2,0)/(0,0,2)/(1,1,1)^2/(1,1,0)^2/(1,0,1)^2/(0,1,1)^2/(1,0,0)^4/ (0,1,0)^4/(0,0,1)^4/(0,0,0)^5]"))
#1^2/0^2
LE6.append(expand("[(0,6,0)/(1,4,1)/(0,4,0)/(1,3,0)^2/(0,3,1)^2/(2,0,0)/(0,2,0)/(0,0,2)/(1,0,1)/(0,0,0)]"))

#1/0^4
LE6.append(expand("[(1,1,1)^4/(2,2,0)/(2,0,2)/(0,2,2)/(0,2,0)^2/(0,0,2)^2/(2,0,0)^2/(0,0,0)]"))


LE6.append(expand("[(2,2,2)^2/(4,0,0)/(0,4,0)/(0,0,4)/(2,0,0)/(0,2,0)/(0,0,2)]"))


LE6.append(expand("[(2,0,0)/(0,2,0)/(0,0,2)/(2,2,0)/(2,0,2)/(0,2,2)/(2,0,0)/(0,2,0)/(0,0,2)]"))

end =len(LE6)
end=1
for i in range(1,end):
    print("////////////////////")
    print("case "+str(i))
    LE6[i].append((0,0,0))
    LE6[i].append((0,0,0))
    LE6[i].append((0,0,0))
    LE6[i].append((0,0,0))
    LE6[i].append((0,0,0))
    LE6[i].append((0,0,0))
    LE6[i].append((0,0,0))
    LE6[i].append((0,0,0))
    print(classifyIncomplete(LE6[i],basisA13,orderList3))
    print(latex(LE6[i]))



#A13 in A14 in E6A2 with diag

a = expand("[(0,2,2,2)^2/(2,0,2,2)^2/(2,2,0,2)^2/(2,2,2,0)^2/(4,0,0,0)/(0,4,0,0)/(0,0,4,0)/(0,0,0,4)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(2,0,0,0) ]")
print(checker(diagA1(a,1,2),basisA13,orderList3))
print(dimChecker(diagA1(a,1,2)))
print(latex(diagA1(a,1,2)))
basisA13.append(diagA1(a,1,2))
print(len(basisA13))





#IN G2F4
print("InF4")

LF4=[0]

a=expand("[(1,1,1)^2/(2,0,0)/(0,2,0)/(0,0,2)/(1,1,0)/(1,0,1)/(0,1,1)/(1,0,0)^2/(0,1,0)^2/(0,0,1)^2/(0,0,0)^3]")
LF4.append(expand("[(1,1,1)^2/(2,0,0)/(0,2,0)/(0,0,2)/(1,1,0)/(1,0,1)/(0,1,1)/(1,0,0)^2/(0,1,0)^2/(0,0,1)^2/(0,0,0)^3]"))

LF4.append(expand("[(1,2,1)/(2,0,0)/(0,2,0)^3/(0,0,2)/(1,1,0)^2/(1,0,1)^2/(0,1,1)^2/(0,0,0)]"))

LF4.append(expand("[(1,4,1)/(0,4,2)/(1,0,3)/(2,0,0)/(0,2,0)/(0,0,2)]"))

LF4.append(expand("[(0,6,0)/(1,4,1)/(1,3,0)/(0,3,1)/(2,0,0)/(0,2,0)/(0,0,2)]"))

LF4.append(expand("[(2,2,0)/(2,0,2)/(0,2,2)/(2,0,0)/(0,2,0)/(0,0,2)/ (1,1,1)^2]"))


#print(classifyIncomplete(a,basisA13,orderList3))
end = len(LF4)
end = 1
for i in range(1,end):
    for j in range(0,14):
        LF4[i].append((0,0,0))
    print(i)
    print(latex(LF4[i]))
    print(classifyIncomplete(LF4[i],basisA13,orderList3))



print("A1A12 in G2 F4")

LF4=[0]
#1
LF4.append(expand("[(0,10)/(1,9)/(0,6)/(2,0)/(0,2)]"))

LF4.append(expand("[(0,6)/(1,5)/(0,4)/(1,3)^2/(2,0)/(0,2)^3]"))

LF4.append(expand("[(0,6)/(1,4)^2/(1,3)/(0,3)^2/(2,0)/(0,2)/(0,0)^3]"))

LF4.append(expand("[(1,4)^2/(0,4)^3/(2,0)/(0,2)/(1,0)^4/(0,0)^3]"))
#5
LF4.append(expand("[(1,3)/(2,0)/(0,2)^6/(1,1)^5/(0,0)^3]"))

LF4.append(expand("[(1,2)^2/(2,0)/(0,2)^3/(1,1)^2/(1,0)^4/(0,1)^4/(0,0)^4]"))


LF4.append(expand("[(2,0)/(0,2)/(1,1)^5/(1,0)^4/(0,1)^4/(0,0)^5/(0,0)^5]"))

LF4.append(expand("[(4,1)^2/(0,3)^2/(0,0)^3]"))
#10
LF4.append(expand("[(2,2)/(2,0)^4/(0,2)^4/(1,1)^4/(0,0)^3]"))

LF4.append(expand("[(5,1)/(4,2)/(3,1)/(1,3)/(2,0)^2/(0,2)]"))


LF4.append(expand("[(2,4)^2/(4,0)/(0,4)/(2,0)^3/(0,2)]"))

LF4.append(expand("[ (0,6)/(2,4)/(0,4)/(1,3)^2/(2,0)^2/(0,2)]"))

LF4.append(expand("[(4,2)/(2,4)/(0,2)/(2,0)/(3,1)/(1,3)]"))

LF4.append(expand("[(2,2)^2/(2,1)^2/(2,0)^3/(4,0)/(0,2)/(0,1)^2/(0,0)]"))

LF4.append(expand("[(0,10)/(4,6)/(2,0)/(0,2)]"))

end=len(LF4)
end=1
for i in range(1,end):
    print("////////////////////")
    print("case "+str(i))
    l1=[(2,0,0),(1,0,0),(1,0,0),(1,0,0),(1,0,0),(0,0,0),(0,0,0),(0,0,0)]
    l2=[(3,0,0),(3,0,0),(2,0,0),(0,0,0),(0,0,0),(0,0,0)]
    l3=[(4,0,0),(2,0,0),(2,0,0),(2,0,0)]
    l4=[(2,0,0),(10,0,0)]


    a=concat([(0,)],LF4[i])

    lie1=a+l1
    lie2=a+l2
    lie3=a+l3
    lie4=a+l4
    if i ==4:
        lie1=lie1+[(1,1,2),(1,1,2),(1,1,2),(1,1,2),(0,1,2),(0,1,2),(0,1,2),(0,1,2),(0,1,2),(0,1,2)]
    if i ==5:
        lie1=lie1+[(1,1,1),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1),(0,1,1)]
        lie2 = lie2+[(2,1,1),(2,1,1),(2,1,1),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(1,1,1),(1,1,1)]
    if i==6:
        temp=expand("[(1,1,1)^4/(1,1,0)^4/(0,1,0)^6]")
        lie1=lie1+temp
    if i==7:
        temp=expand("[(1,1,1)^2/(1,1,0)^4/(0,1,1)^3/(0,1,0)^6/(0,1,0)^6]")
        lie1=lie1+temp

    print(latex(lie4))

    print(classifyIncomplete(lie1,basisA13,orderList3))
    print(classifyIncomplete(lie2,basisA13,orderList3))
    print(classifyIncomplete(lie3,basisA13,orderList3))
    print(classifyIncomplete(lie4,basisA13,orderList3))


a=expand("[(10,0,0)/(2,0,0)/(0,4,2)/(0,2,4)/(0,2,0)/(0,0,2)/(0,1,3)/(0,3,1)/(6,2,2)/(6,3,1)/(6,1,3)/(6,0,0)]")

#print(dimChecker(a))
#print(checker(a,basisA13,orderList3))
basisA13.append(a)
#print(checker(a,basisA13,orderList3))



b=expand("[(10,0,0)/(2,0,0)/(0,4,6)/(0,2,0)/(0,0,10)/(0,0,2)/(6,2,6)/(6,4,0)]")
#print(dimChecker(b))
#print(checker(b,basisA13,orderList3))
basisA13.append(b)
#print(checker(b,basisA13,orderList3))
print(len(basisA13))



print("in A8")

A8=[0]
l3=[0]
##A8.append(expand("[(1,1,1)/(0,0,0)]"))
##l3.append(expand("[(3,1,1)/(1,3,1)/(1,1,3)/(1,1,1)/(2,2,0)/(2,0,2)/(0,2,2)/(0,0,0)]"))
##
##
##
##A8.append(expand("[(2,1,0)/(0,0,1)/(0,0,0)]"))
##l3.append(expand("[(4,1,0)/(2,1,0)/(0,3,0)/(2,2,1)/(4,0,1)/(0,0,1)/(2,2,0)/(4,0,0)/(0,0,0)/(2,1,1)/(2,1,0)/(0,0,0)]"))
##
##
##
##A8.append(expand("[(1,1,0)/(0,1,1)/(0,0,0)]"))
##l3.append(expand("[(1,1,0)/(2,1,1)/(2,0,0)/(0,3,1)/(0,1,1)/(0,2,0)/(1,3,0)/(1,1,0)/(1,1,2)/(1,2,1)/(1,0,1)/(0,1,1)/(0,2,0)/(0,0,2)]"))
##
##
##
##A8.append(expand("[(1,1,0)/(0,0,4)]"))
##l3.append(expand("[(1,1,0)/(2,0,3)/(2,0,0)/(0,2,3)/(0,2,0)/(1,1,4)/(1,1,0)/(0,0,4)/(0,0,0)]"))
##

A8.append(expand("[(1,1,0)/(0,0,3)/(0,0,0)]"))
l3.append(expand("[(1,1,0)/(2,0,3)/(2,0,0)/(0,2,3)/(0,2,0)/(1,1,4)/(1,1,0)/(1,1,3)/(0,0,4)/(0,0,3)/(0,0,0)]"))


##A8.append(expand("[(1,1,0)/(0,0,2)/(0,0,0)^2]"))
##A8.append(expand("[(1,1,0)/(0,0,2)/(0,0,1)]"))
##A8.append(expand("[(1,1,0)/(0,0,2)/(1,0,0)]"))
##A8.append(expand("[(1,1,0)/(0,0,1)/(0,0,0)^3]"))
##A8.append(expand("[(1,1,0)/(0,0,1)/(1,0,0)/(0,0,0)]"))
##A8.append(expand("[(1,1,0)/(0,0,1)^2/(0,0,0)]"))
##A8.append(expand("[(4,0,0)/(0,1,0)/(0,0,1)]"))
##A8.append(expand("[(3,0,0)/(0,2,0)/(0,0,1)]"))
##A8.append(expand("[(3,0,0)/(0,1,0)/(0,0,1)/(0,0,0)]"))
##A8.append(expand("[(2,0,0)/(0,2,0)/(0,0,2)]"))
##A8.append(expand("[(2,0,0)/(0,2,0)/(0,0,1)/(0,0,0)]"))
##A8.append(expand("[(2,0,0)/(0,1,0)/(0,0,1)/(0,0,0)^2]"))
##A8.append(expand("[(2,0,0)/(0,1,0)/(0,0,1)^2]"))
##A8.append(expand("[(2,0,0)/(0,1,0)/(0,0,1)/(1,0,0)]"))
##A8.append(expand("[(1,0,0)/(0,1,0)/(0,0,1)/(0,0,0)^3]"))
##A8.append(expand("[(1,0,0)/(0,1,0)/(0,0,1)^2/(0,0,0)]"))

lt=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
for i in range(1,len(A8)):
    temp=tensor(A8[i],A8[i])
    temp.pop()
    lt[i] = temp
#    print("/////////////")
#    print(i)
#    print(latex(lt[i]))

##for i in range(1,len(A8)):
##    #print(A8[i])
##    print(dimChecker(A8[i]))


L=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
end =len(A8)
end=1
for i in range(1,end):
   # print("////////////")
  #  print(str(i)+" :     "+latex(A8[i]))

    L[i]=[]
    L[i]=L[i]+l3[i]
    L[i]=L[i]+l3[i]
    L[i]=L[i]+lt[i]

    t=classifyIncomplete(L[i],basisA13,orderList3)
    t=checker(L[i],basisA13,orderList3)
    print("/////////////////////////////")
    print(str(i)+latex(A8[i]))
    print(dimChecker(L[i]))
    print(dimChecker(l3[i]))
    print(dimChecker(lt[i]))
    print(t)
    print("l3:")
    print(latex(l3[i]))
    print("L[i]:")
    print(latex(L[i]))

    p=str(i) + " & "+latex(A8[i])+" & "
   # if len(t)==2:
    #    p=p+str(t[1])
    #else:
    p=p+str(t)
    p=p+"  \\\\ \\hline"
    print(p)


a=expand("[(3, 1, 1)^2/(1, 3, 1)^2/(1, 1, 3)^2/(1, 1, 1)^4/(2, 2, 0)^3/(2, 0, 2)^3/(0, 2, 2)^3/(0, 0, 0)^3/(2, 2, 2)/(2, 0, 0)/(0, 2, 0)/(0, 0, 2)]")
b=expand("[(1, 1, 0)^2/(2, 0, 4)^2/(0, 2, 4)^2/(1, 1, 6)^2/(1, 1, 2)^2/(0, 0, 6)^3/(0, 0, 2)^3/(2, 2, 0)/(2, 0, 0)/(0, 2, 0)/(0, 0, 0)/(1, 1, 4)^2/(0, 0, 8)/(0, 0, 4)]")
basisA13.append(a)
basisA13.append(b)
#print(dimChecker(a))
#print(dimChecker(b))
#print(len(basisA13))


print("In A42")

l1=[0]
l2=[0]
lat=[0]
t=[0]
l1.append([(4,)])
t.append([(8,),(6,),(4,),(2,)])
lat.append("4")

l1.append([(3,),(0,)])
lat.append("3/0")
t.append([(3,),(3,),(6,),(4,),(2,),(0,)])

l1.append([(2,),(0,),(0,)])
lat.append("2/0^2")
t.append([(4,),(2,),(2,),(2,),(2,),(2,),(0,),(0,),(0,),(0,)])

l1.append([(2,),(1,)])
t.append([(4,),(2,),(2,),(1,),(1,),(3,),(3,),(0,)])
lat.append("2/1")

l1.append([(1,),(0,),(0,),(0,)])
lat.append("   1/0^3")
t.append([(2,),(1,),(1,),(1,),(1,),(1,),(1,),(0,),(0,),(0,),(0,),(0,),(0,),(0,),(0,),(0,)])

l1.append([(1,),(1,),(0,)])
lat.append("1^2/0")
t.append([(2,),(2,),(2,),(2,),(1,),(1,),(1,),(1,),(0,),(0,),(0,),(0,)])

for i in range(1,len(l1)):
    #print(dimChecker(l1[i]))
    l2.append(wedge2(l1[i]))


x1=[0]
x2=[0]
x1.append([(1,1),(0,0)])
x1.append([(1,0),(0,1),(0,0)])
x1.append([(2,0),(0,1)])

for i in range(1,len(x1)):
    #print(dimChecker(x1[i]))
    x2.append(wedge2(x1[i]))

L=[0,0,0,0,0,0,00,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,]
count=1
for i in range(1,len(l1)):
    for j in range(1,len(x1)):
        print(" ")
        print(" ")
        p=str(count)+" & $ ("+lat[i]+","+latexWithoutDollar(x1[j])+" )$ & "
        count=count+1
        L[count]=[]
##        print("l1[i]:")
##        print(latex(l1[i]))
##        print("l2[j]:")
##        print(latex(l2[i]))
##        print("x1[j]:")
##        print(latex(x1[j]))
##        print("x2[j]:")
##        print(latex(x2[j]))
        L[count]= L[count]+concat(l1[i],x2[j])
        #print(dimChecker(L[count]))
        L[count]= L[count]+concat(l1[i],x2[j])
        #print(dimChecker(L[count]))
        L[count]= L[count]+concat(l2[i],x1[j])
        #print(dimChecker(L[count]))
        L[count]= L[count]+concat(l2[i],x1[j])
        #print(dimChecker(L[count]))
        temp = tensor(l1[i],l1[i])
        temp.pop()
        temp2 = tensor(x1[j],x1[j])
        temp2.pop()
##        print("l1[i] tensor l1[i]:")
##        print(latex(temp))
##        print("x1[j] tensor x1:")
##        print(latex(temp2))
##        print(dimChecker(t[i]))
##        print(dimChecker(temp2))
##        print(dimChecker(x2[i]))
##        print(dimChecker(l2[j]))
##        print(dimChecker(L[count]))
        L[count] = L[count]+concat(t[i],[(0,0)])
     #   print(dimChecker(L[count]))
        L[count] = L[count]+concat([(0,)],temp2)
        #print(dimChecker(L[count]))
        res=checker(L[count], basisA13,orderList3)
        p=p+str(res)+" \\\\ \\hline"
        print(p)
        print(latex(L[count]))



for i in range(1,len(basisA13)):
    ans=0
    for j in range(0,len(basisA13[i])):
        for k in range(0,3):
            if basisA13[i][j][k]==8:
                ans=1
    if ans==1:
        print(i)
        print(" " )






print("////////////////////////////////////////////")
print("////////////////////////////////////////////")
print("In D8")
print("////////////////////////////////////////////")
print("////////////////////////////////////////////")

print("Length of basis before we start")
print(len(basisA13))


D8=[[0]]
D8.append([(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 4)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 1, 0), (1, 0, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 1), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 3)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (1, 1, 0)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (2, 0, 0), (0, 0, 4)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 2), (4, 0, 0)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 2), (0, 0, 4)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 3), (0, 0, 3)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (1, 1, 0), (1, 0, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 0, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (1, 0, 3)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (3, 0, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 0, 2)])
D8.append([(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 2, 0), (0, 2, 0), (0, 0, 2)])
D8.append([(1, 0, 0), (1, 0, 0), (2, 0, 0), (4, 0, 0), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 4, 0), (1, 0, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 4, 0), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 2, 2)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 0, 2)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 2, 0), (0, 0, 2), (0, 0, 2)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 2, 0), (4, 0, 0), (1, 0, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 2, 0), (4, 0, 0), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 4, 0), (1, 0, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 4, 0), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 4), (1, 1, 0)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 4), (1, 0, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 4), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 8)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 2, 0), (2, 0, 2)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 2, 2)])
D8.append([(1, 0, 0), (1, 0, 0), (3, 0, 0), (3, 0, 0), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 3, 0), (0, 3, 0), (1, 0, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 3, 0), (0, 3, 0), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 4, 0), (0, 0, 6)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 0), (1, 0, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 0), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 1, 0), (1, 0, 1), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 1), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 1, 0), (1, 0, 3)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 3)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 1, 0), (3, 0, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 1, 0), (0, 3, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 1), (0, 1, 1), (0, 1, 1)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 1), (1, 3, 0)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 1), (0, 1, 3)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 1), (3, 1, 0)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 2), (0, 1, 2)])
D8.append([(1, 0, 0), (1, 0, 0), (0, 1, 5)])
D8.append([(1, 0, 0), (1, 0, 0), (1, 1, 2)])
D8.append([(1, 0, 0), (1, 0, 0), (2, 1, 1)])
D8.append([(2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (0, 1, 1)])
D8.append([(2, 0, 0), (2, 0, 0), (2, 0, 0), (0, 2, 0), (1, 0, 1)])
D8.append([(2, 0, 0), (2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 1, 1)])
D8.append([(2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 2, 0), (1, 0, 1)])
D8.append([(2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 0, 2), (1, 1, 0)])
D8.append([(2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 0, 2), (0, 1, 1)])
D8.append([(2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 0, 6)])
D8.append([(2, 0, 0), (2, 0, 0), (0, 4, 0), (0, 0, 4)])
D8.append([(2, 0, 0), (0, 2, 0), (0, 0, 2), (6, 0, 0)])
D8.append([(2, 0, 0), (0, 2, 0), (4, 0, 0), (0, 0, 4)])
D8.append([(2, 0, 0), (0, 2, 0), (0, 0, 4), (0, 0, 4)])
D8.append([(2, 0, 0), (0, 3, 0), (0, 3, 0), (0, 0, 4)])
D8.append([(2, 0, 0), (4, 0, 0), (1, 1, 0), (1, 0, 1)])
D8.append([(2, 0, 0), (4, 0, 0), (1, 1, 0), (0, 1, 1)])
D8.append([(2, 0, 0), (4, 0, 0), (0, 1, 1), (0, 1, 1)])
D8.append([(2, 0, 0), (4, 0, 0), (0, 1, 3)])
D8.append([(2, 0, 0), (0, 4, 0), (1, 1, 0), (1, 0, 1)])
D8.append([(2, 0, 0), (0, 4, 0), (1, 1, 0), (0, 1, 1)])
D8.append([(2, 0, 0), (0, 4, 0), (1, 0, 1), (1, 0, 1)])
D8.append([(2, 0, 0), (0, 4, 0), (1, 0, 1), (0, 1, 1)])
D8.append([(2, 0, 0), (0, 4, 0), (0, 1, 1), (0, 1, 1)])
D8.append([(2, 0, 0), (0, 4, 0), (1, 0, 3)])
D8.append([(2, 0, 0), (0, 4, 0), (0, 1, 3)])
D8.append([(2, 0, 0), (0, 4, 0), (3, 0, 1)])
D8.append([(2, 0, 0), (0, 4, 0), (0, 3, 1)])
D8.append([(2, 0, 0), (8, 0, 0), (0, 1, 1)])
D8.append([(2, 0, 0), (0, 8, 0), (1, 0, 1)])
D8.append([(2, 0, 0), (0, 8, 0), (0, 1, 1)])
D8.append([(2, 0, 0), (1, 1, 0), (2, 0, 2)])
D8.append([(2, 0, 0), (1, 1, 0), (0, 2, 2)])
D8.append([(2, 0, 0), (0, 1, 1), (2, 2, 0)])
D8.append([(2, 0, 0), (0, 1, 1), (0, 2, 2)])
D8.append([(3, 0, 0), (3, 0, 0), (1, 1, 0), (1, 0, 1)])
D8.append([(3, 0, 0), (3, 0, 0), (1, 1, 0), (0, 1, 1)])
D8.append([(3, 0, 0), (3, 0, 0), (0, 1, 1), (0, 1, 1)])
D8.append([(3, 0, 0), (3, 0, 0), (0, 1, 3)])
D8.append([(4, 0, 0), (6, 0, 0), (0, 1, 1)])
D8.append([(4, 0, 0), (0, 6, 0), (1, 0, 1)])
D8.append([(4, 0, 0), (0, 6, 0), (0, 1, 1)])
D8.append([(5, 0, 0), (5, 0, 0), (0, 1, 1)])
D8.append([(6, 0, 0), (0, 2, 2)])
D8.append([(1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 0, 1)])
D8.append([(1, 1, 0), (1, 1, 0), (1, 0, 1), (1, 0, 1)])
D8.append([(1, 1, 0), (1, 1, 0), (1, 0, 1), (0, 1, 1)])
D8.append([(1, 1, 0), (1, 1, 0), (1, 0, 3)])
D8.append([(1, 1, 0), (1, 1, 0), (3, 0, 1)])
D8.append([(1, 1, 0), (1, 0, 1), (1, 3, 0)])
D8.append([(1, 1, 0), (1, 0, 1), (0, 1, 3)])
D8.append([(1, 1, 0), (1, 0, 1), (3, 1, 0)])
D8.append([(1, 1, 0), (1, 0, 2), (1, 0, 2)])
D8.append([(1, 1, 0), (2, 0, 1), (2, 0, 1)])
D8.append([(1, 1, 0), (1, 0, 5)])
D8.append([(1, 1, 0), (5, 0, 1)])
D8.append([(1, 1, 0), (1, 1, 2)])
D8.append([(1, 1, 0), (1, 2, 1)])
D8.append([(1, 1, 1), (1, 1, 1)])
D8.append([(1, 3, 0), (1, 0, 3)])
D8.append([(1, 3, 0), (0, 1, 3)])
D8.append([(1, 3, 0), (0, 3, 1)])
Lambda2D8=[[0]]
print(len(D8))
end = len(D8)
end = 1
for i in range(1,end):
    p=str(i)+"& "+latex(D8[i])+" & "
    Lambda2D8.append(wedge2(D8[i]))
    c=classifyIncomplete(Lambda2D8[i],basisA13,orderList3)
    p=p+latex(Lambda2D8[i])+" \\\\ \\hline"
    print(p)
   



vs = [
  [0],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1)],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 2), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1)],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 2), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 4)],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 2, 0), (1, 0, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 1, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 1, 0), (1, 0, 1)],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 1), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 3)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (2, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (1, 1, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (2, 0, 0), (0, 0, 2), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (2, 0, 0), (0, 0, 4)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (2, 0, 0), (1, 0, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (2, 0, 0), (0, 1, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 2), (0, 0, 2), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 2), (4, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 2), (0, 0, 4)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 2), (1, 1, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 2), (1, 0, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 2), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 3), (0, 0, 3)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 4), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 0, 6), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (1, 1, 0), (1, 0, 1)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 0, 1)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (1, 0, 3)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (3, 0, 1)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 0, 2)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (2, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 2, 0), (0, 2, 0), (0, 0, 2)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 2, 0), (0, 0, 2), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 2, 0), (0, 0, 4), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 2, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 2, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (4, 0, 0), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 4, 0), (1, 0, 1)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 4, 0), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (1, 1, 0), (1, 0, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (1, 1, 0), (0, 1, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (0, 1, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 1, 3), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (2, 0, 0), (0, 2, 2)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 2, 0), (0, 2, 0), (0, 0, 2)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 2, 0), (0, 0, 2), (0, 0, 2)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 2, 0), (0, 0, 2), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 2, 0), (0, 0, 4), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 2, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 2, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 2), (4, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 2), (0, 4, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 2), (1, 1, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 2), (0, 1, 1), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 2), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 3), (0, 0, 3), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (4, 0, 0), (1, 0, 1)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (4, 0, 0), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 4, 0), (1, 0, 1)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 4, 0), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 4), (1, 1, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 4), (1, 0, 1)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 4), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 4), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 6), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 0, 8)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (1, 1, 0), (1, 0, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (1, 1, 0), (0, 1, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (1, 0, 1), (1, 0, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (1, 0, 1), (0, 1, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 1, 1), (0, 1, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (1, 0, 3), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 1, 3), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (3, 0, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 3, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (2, 0, 2)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 0), (0, 2, 2)],
  [(1, 0, 0), (1, 0, 0), (3, 0, 0), (3, 0, 0), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (0, 3, 0), (0, 3, 0), (1, 0, 1)],
  [(1, 0, 0), (1, 0, 0), (0, 3, 0), (0, 3, 0), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (4, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 4, 0), (0, 0, 4), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 4, 0), (0, 0, 6)],
  [(1, 0, 0), (1, 0, 0), (0, 4, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 4, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (6, 0, 0), (0, 1, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 6, 0), (1, 0, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 6, 0), (0, 1, 1), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 0), (1, 0, 1)],
  [(1, 0, 0), (1, 0, 0), (1, 1, 0), (1, 1, 0), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (1, 1, 0), (1, 0, 1), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (1, 1, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 1), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (1, 1, 0), (1, 0, 3)],
  [(1, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 3)],
  [(1, 0, 0), (1, 0, 0), (1, 1, 0), (3, 0, 1)],
  [(1, 0, 0), (1, 0, 0), (1, 1, 0), (0, 3, 1)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 1), (0, 1, 1), (0, 1, 1)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 1), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 1), (1, 3, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 1), (0, 1, 3)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 1), (3, 1, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 2), (0, 1, 2)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 3), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (0, 1, 5)],
  [(1, 0, 0), (1, 0, 0), (0, 2, 2), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 0, 0), (1, 0, 0), (1, 1, 2)],
  [(1, 0, 0), (1, 0, 0), (2, 1, 1)],
  [(2, 0, 0), (2, 0, 0), (2, 0, 0), (2, 0, 0), (0, 1, 1)],
  [(2, 0, 0), (2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 0, 2), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (2, 0, 0), (0, 2, 0), (1, 0, 1)],
  [(2, 0, 0), (2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 1, 1)],
  [(2, 0, 0), (2, 0, 0), (2, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 2, 0), (0, 0, 2), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 2, 0), (1, 0, 1)],
  [(2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 0, 2), (1, 1, 0)],
  [(2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 0, 2), (0, 1, 1)],
  [(2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 0, 2), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 0, 4), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 0, 6)],
  [(2, 0, 0), (2, 0, 0), (0, 2, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (0, 2, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (4, 0, 0), (0, 1, 1), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (0, 4, 0), (0, 0, 4)],
  [(2, 0, 0), (2, 0, 0), (0, 4, 0), (1, 0, 1), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (0, 4, 0), (0, 1, 1), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (1, 1, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (1, 1, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (0, 1, 1), (0, 1, 1), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (0, 1, 3), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (2, 0, 0), (0, 2, 2), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (0, 0, 2), (4, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (0, 0, 2), (6, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (0, 0, 2), (1, 1, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (0, 0, 2), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (0, 0, 3), (0, 0, 3), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (4, 0, 0), (0, 0, 4)],
  [(2, 0, 0), (0, 2, 0), (4, 0, 0), (1, 0, 1), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (4, 0, 0), (0, 1, 1), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (0, 0, 4), (0, 0, 4)],
  [(2, 0, 0), (0, 2, 0), (0, 0, 4), (1, 1, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (0, 0, 4), (1, 0, 1), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (0, 0, 4), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (0, 0, 6), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (0, 0, 8), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (1, 1, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (1, 0, 1), (1, 0, 1), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (1, 0, 1), (0, 1, 1), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (1, 0, 3), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (3, 0, 1), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 0), (2, 0, 2), (0, 0, 0)],
  [(2, 0, 0), (3, 0, 0), (3, 0, 0), (0, 1, 1), (0, 0, 0)],
  [(2, 0, 0), (0, 3, 0), (0, 3, 0), (0, 0, 4)],
  [(2, 0, 0), (0, 3, 0), (0, 3, 0), (1, 0, 1), (0, 0, 0)],
  [(2, 0, 0), (0, 3, 0), (0, 3, 0), (0, 1, 1), (0, 0, 0)],
  [(2, 0, 0), (4, 0, 0), (1, 1, 0), (1, 0, 1)],
  [(2, 0, 0), (4, 0, 0), (1, 1, 0), (0, 1, 1)],
  [(2, 0, 0), (4, 0, 0), (0, 1, 1), (0, 1, 1)],
  [(2, 0, 0), (4, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (4, 0, 0), (0, 1, 3)],
  [(2, 0, 0), (0, 4, 0), (0, 0, 4), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 4, 0), (0, 0, 6), (0, 0, 0)],
  [(2, 0, 0), (0, 4, 0), (1, 1, 0), (1, 0, 1)],
  [(2, 0, 0), (0, 4, 0), (1, 1, 0), (0, 1, 1)],
  [(2, 0, 0), (0, 4, 0), (1, 0, 1), (1, 0, 1)],
  [(2, 0, 0), (0, 4, 0), (1, 0, 1), (0, 1, 1)],
  [(2, 0, 0), (0, 4, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 4, 0), (0, 1, 1), (0, 1, 1)],
  [(2, 0, 0), (0, 4, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 4, 0), (1, 0, 3)],
  [(2, 0, 0), (0, 4, 0), (0, 1, 3)],
  [(2, 0, 0), (0, 4, 0), (3, 0, 1)],
  [(2, 0, 0), (0, 4, 0), (0, 3, 1)],
  [(2, 0, 0), (6, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 6, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 6, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (8, 0, 0), (0, 1, 1)],
  [(2, 0, 0), (0, 8, 0), (1, 0, 1)],
  [(2, 0, 0), (0, 8, 0), (0, 1, 1)],
  [(2, 0, 0), (1, 1, 0), (1, 1, 0), (1, 0, 1), (0, 0, 0)],
  [(2, 0, 0), (1, 1, 0), (1, 1, 0), (0, 1, 1), (0, 0, 0)],
  [(2, 0, 0), (1, 1, 0), (1, 0, 1), (0, 1, 1), (0, 0, 0)],
  [(2, 0, 0), (1, 1, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (1, 1, 0), (0, 1, 1), (0, 1, 1), (0, 0, 0)],
  [(2, 0, 0), (1, 1, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (1, 1, 0), (1, 0, 3), (0, 0, 0)],
  [(2, 0, 0), (1, 1, 0), (0, 1, 3), (0, 0, 0)],
  [(2, 0, 0), (1, 1, 0), (3, 0, 1), (0, 0, 0)],
  [(2, 0, 0), (1, 1, 0), (0, 3, 1), (0, 0, 0)],
  [(2, 0, 0), (1, 1, 0), (2, 0, 2)],
  [(2, 0, 0), (1, 1, 0), (0, 2, 2)],
  [(2, 0, 0), (0, 1, 1), (0, 1, 1), (0, 1, 1), (0, 0, 0)],
  [(2, 0, 0), (0, 1, 1), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 1, 1), (1, 3, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 1, 1), (0, 1, 3), (0, 0, 0)],
  [(2, 0, 0), (0, 1, 1), (3, 1, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 1, 1), (2, 2, 0)],
  [(2, 0, 0), (0, 1, 1), (0, 2, 2)],
  [(2, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 1, 2), (0, 1, 2), (0, 0, 0)],
  [(2, 0, 0), (0, 1, 3), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (0, 1, 5), (0, 0, 0)],
  [(2, 0, 0), (0, 2, 2), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(2, 0, 0), (1, 1, 2), (0, 0, 0)],
  [(2, 0, 0), (2, 1, 1), (0, 0, 0)],
  [(3, 0, 0), (3, 0, 0), (1, 1, 0), (1, 0, 1)],
  [(3, 0, 0), (3, 0, 0), (1, 1, 0), (0, 1, 1)],
  [(3, 0, 0), (3, 0, 0), (0, 1, 1), (0, 1, 1)],
  [(3, 0, 0), (3, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(3, 0, 0), (3, 0, 0), (0, 1, 3)],
  [(4, 0, 0), (4, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0)],
  [(4, 0, 0), (0, 4, 0), (0, 0, 4), (0, 0, 0)],
  [(4, 0, 0), (0, 4, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0)],
  [(4, 0, 0), (6, 0, 0), (0, 1, 1)],
  [(4, 0, 0), (0, 6, 0), (1, 0, 1)],
  [(4, 0, 0), (0, 6, 0), (0, 1, 1)],
  [(4, 0, 0), (1, 1, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(4, 0, 0), (1, 1, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(4, 0, 0), (0, 1, 1), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(4, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(4, 0, 0), (0, 1, 3), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(4, 0, 0), (0, 2, 2), (0, 0, 0), (0, 0, 0)],
  [(5, 0, 0), (5, 0, 0), (0, 1, 1)],
  [(6, 0, 0), (1, 1, 0), (1, 0, 1), (0, 0, 0)],
  [(6, 0, 0), (1, 1, 0), (0, 1, 1), (0, 0, 0)],
  [(6, 0, 0), (0, 1, 1), (0, 1, 1), (0, 0, 0)],
  [(6, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(6, 0, 0), (0, 1, 3), (0, 0, 0)],
  [(6, 0, 0), (0, 2, 2)],
  [(8, 0, 0), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(10, 0, 0), (0, 1, 1), (0, 0, 0)],
  [(1, 1, 0), (1, 1, 0), (1, 1, 0), (1, 0, 1)],
  [(1, 1, 0), (1, 1, 0), (1, 0, 1), (1, 0, 1)],
  [(1, 1, 0), (1, 1, 0), (1, 0, 1), (0, 1, 1)],
  [(1, 1, 0), (1, 1, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 1, 0), (1, 1, 0), (1, 0, 3)],
  [(1, 1, 0), (1, 1, 0), (3, 0, 1)],
  [(1, 1, 0), (1, 0, 1), (0, 1, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 1, 0), (1, 0, 1), (1, 3, 0)],
  [(1, 1, 0), (1, 0, 1), (0, 1, 3)],
  [(1, 1, 0), (1, 0, 1), (3, 1, 0)],
  [(1, 1, 0), (1, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 1, 0), (1, 0, 2), (1, 0, 2)],
  [(1, 1, 0), (2, 0, 1), (2, 0, 1)],
  [(1, 1, 0), (1, 0, 3), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 1, 0), (3, 0, 1), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 1, 0), (1, 0, 5)],
  [(1, 1, 0), (5, 0, 1)],
  [(1, 1, 0), (2, 0, 2), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
  [(1, 1, 0), (1, 1, 2)],
  [(1, 1, 0), (1, 2, 1)],
  [(1, 1, 1), (1, 1, 1)],
  [(1, 3, 0), (1, 0, 3)],
  [(1, 3, 0), (0, 1, 3)],
  [(1, 3, 0), (0, 3, 1)],
  [(1, 1, 2), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
]


A13withZeros = [0]
end = len(vs)
#end=1
for i in range(1,end):
    if vs[i] not in D8:
#        print(latex(vs[i]))
        A13withZeros.append(vs[i])
print("vs has length : "+str(len(vs)))
print("We have already classified : "+str(len(D8)))
print("Left with:")
print(len(A13withZeros))


Lambda2D8=[0]
end = len(A13withZeros)

end=1
start=1
#start=240
for i in range(start,end):
    p=str(116+i)+"& "+latex(A13withZeros[i])+" & "
    Lambda2D8.append(wedge2(A13withZeros[i]))
    c=classifyIncomplete(Lambda2D8[i],basisA13,orderList3)
    if len(c)>1:
        p=p+str(c[1])+" \\\\ \\hline"
        p2 =str(c[1])+ "& $D_8$&"+latex(A13withZeros[i])+"& & \\\\"
    else:
        p=p+str(c)+" \\\\ \\hline"
        p2 =str(c)+ "& $D_8$&"+latex(A13withZeros[i])+"& & \\\\"
    x=116+i
    print(116+i)
    #print(latex(Lambda2D8[i]))
    
    if x==250 or x==256 or x==257:
        p=str(x)+" &$D_8$& "+latex(A13withZeros[i])+" & "+latex(Lambda2D8[i])+"& \\\\ \\hline"
        print(p)
    


















print("Additional cases")
add=[0]

l1=[0]

l1.append(expand("[(2, 0, 0)/(0, 2, 0)/(4, 0, 0)/(0, 0, 4)]"))
add.append(expand("[(2, 0, 0)^3/(2, 2, 0)/(6, 0, 0)^2/(4, 0, 0)/(2, 0, 4)/(0, 2, 0)/(4, 2, 0)/(0, 2, 4)/(4, 0, 4)/(0, 0, 6)/(0, 0, 2)/(4,1,3)^2/(2,1,3)^2]"))

l1.append(expand("[(2, 0, 0)/(0, 3, 0)^2/(0, 0, 4)]"))
add.append(expand("[$(2, 0, 0)/(2, 3, 0)^2/(2, 0, 4)/(0, 4, 0)^3/(0, 6, 0)/(0, 2, 0)/(0, 3, 4)^2/(0, 0, 6)/(0, 0, 2)/(1,3,3)^2/(1,0,3)^3/(1,4,3)/(0,0,0)^3]"))

l1.append(expand("[(2, 0, 0)/(4, 0, 0)/(0, 1, 3)]"))
add.append(expand("[                 (2, 0, 0)^3/(6, 0, 0)^2/(4, 0, 0)/(2, 1, 3)/(4, 1, 3)/(0, 2, 4)/(0, 0, 6)/(0, 2, 0)/(0, 0, 2)/(4,1,3)/(2,1,3)/(4,2,0)/(2,2,0)/(4,0,4)/(2,0,4)]"))

l1.append(expand("[(2, 0, 0)/(0, 4, 0)/(1, 0, 3)]"))
add.append(expand("[                  (2, 0, 0)^2/(2, 4, 0)/(3, 0, 3)/(1, 0, 3)/(0, 6, 0)/(0, 2, 0)/(1, 4, 3)/(2, 0, 4)/(0, 0, 6)/(0, 0, 2)/(2,3,3)/(0,3,3)/(3,3,0)/(1,3,0)/(1,3,4)]"))

l1.append(expand("[(2, 0, 0)/(0, 4, 0)/(0, 1, 3)]"))
add.append(expand("[                  (2, 0, 0)/(2, 4, 0)/(2, 1, 3)/(0, 6, 0)/(0, 2, 0)^2/(0, 5, 3)/(0, 3, 3)/(0, 2, 4)/(0, 0, 6)/(0, 0, 2)/(1,4,3)/(1,2,3)/(1,5,0)/(1,3,0)/(1,1,0)/(1,3,4)]"))

l1.append(expand("[(2, 0, 0)/(0, 4, 0)/(3, 0, 1)]"))
add.append(expand("[(2, 0, 0)^2/(2, 4, 0)/(5, 0, 1)/(3, 0, 1)/(1, 0, 1)/(0, 6, 0)/(0, 2, 0)/(3, 4, 1)/(4, 0, 2)/(6, 0, 0)/(0, 0, 2)/(4,3,1)/(2,3,1)/(1,3,2)/(5,3,0)/(3,3,0)]"))

l1.append(expand("[(2, 0, 0)/(0, 4, 0)/(0, 3, 1)]"))

add.append(expand("[(2, 0, 0)/(2, 4, 0)/(2, 3, 1)/(0, 6, 0)^2/(0, 2, 0)^2/(0, 7, 1)/(0, 5, 1)/(0, 3, 1)/(0, 1, 1)/(0, 4, 2)/(0, 0, 2)/(1,6,1)/(1,4,1)/(1,2,1)/(1,0,1)/(1,3,2)/(1,7,0)/(1,5,0)/(1,3,0)/(1,1,0)]"))

l1.append(expand("[(1, 3, 0)/(0, 1, 3)]"))

add.append(expand("[$(2, 4, 0)/(0, 6, 0)/(2, 0, 0)/(0, 2, 0)^4/(1, 4, 3)/(1, 2, 3)^2/(0, 2, 4)/(0, 0, 6)/(0, 0, 2)/(0,4,4)/(2,0,4)/(0,6,0)/(0,4,0)]"))


l1.append(expand("[(4, 0, 0)/(0, 4, 0)/(0, 0, 4)/(0, 0, 0)]"))

add.append(expand("[(6, 0, 0)/(2, 0, 0)/(4, 4, 0)/(4, 0, 4)/(4, 0, 0)/(0, 6, 0)/(0, 2, 0)/(0, 4, 4)/(0, 4, 0)/(0, 0, 6)/(0, 0, 2)/(0, 0, 4)]"))

l1.append(expand("[(4, 0, 0)/(0, 1, 3)/(0, 0, 0)^3]"))

add.append(expand("[(6, 0, 0)/(2, 0, 0)/(4, 1, 3)/(4, 0, 0)^3/(0, 2, 4)/(0, 0, 6)/(0, 2, 0)/(0, 0, 2)/(0, 1, 3)^3/(3,1,3)^2/(3,2,0)^2/(3,0,4)^2/(0, 0, 0)^3]"))

l1.append(expand("[(4, 0, 0)/(0, 2, 2)/(0, 0, 0)^2]"))

add.append(expand("[(6, 0, 0)/(2, 0, 0)/(4, 2, 2)/(4, 0, 0)^2/(0, 4, 2)/(0, 2, 4)/(0, 2, 0)/(0, 0, 2)/(0, 2, 2)^2/(0, 0, 0)]"))

ord3=order(3)
for i in range(1,len(l1)):
                  print("//////////////////////")
                  print("We are considering case lambda_1 = "+latex(l1[i]))
                  print("Has dim: "+str(dimChecker(add[i])))
                  x=checker(add[i],basisA13,ord3)
                  print(x)
                  if x==-1:
                      basisA13.append(add[i])
                      print("Corresponds to nothing so added as case"+str(checker(add[i],basisA13,ord3)))
                            




