import math
import pickle

from collections import Counter
import itertools
import re
from tensor_wedge import wedge2
from compare import checker
from compare import order
from compare import expand
from tensor_wedge import latex
from tensor_wedge import latexWithoutDollar
from compare import dimChecker
from compare import classifyIncomplete
#from compare import classifyIncomplete2
from compare import classify
from compare import perm
from tensor_wedge import concat
from remove_tensor_A1 import removeFirstA1
from remove_tensor_A1 import removeA1
from remove_tensor_A1 import diagA1
from tensor_wedge import printLE8
from tensor_wedge import tensor

def lambda2fct(test):
    soltest=[]
    for i in range(0,len(test)):
        if test[i][0]==0:
            x=(test[i][1],)
            for j in range(2,len(test[i])):
                x=x+(test[i][j],)
            soltest.append(x)
    return(soltest)

def lambda5fct(test):
    soltest=[]
    for i in range(0,len(test)):
        if test[i][0]==1:
            x=(test[i][1],)
            for j in range(2,len(test[i])):
                x=x+(test[i][j],)
            soltest.append(x)
    return(soltest)

import math
from collections import Counter
import itertools
import re
from tensor_wedge import wedge2
from compare import checker
from compare import order
from compare import expand
from tensor_wedge import latex
from tensor_wedge import latexWithoutDollar
from compare import dimChecker
from compare import classifyIncomplete
#from compare import classifyIncomplete2
from compare import classify
from compare import perm
from tensor_wedge import concat
from remove_tensor_A1 import removeFirstA1
from remove_tensor_A1 import removeA1
from remove_tensor_A1 import diagA1
from tensor_wedge import printLE8

def lambda2fct(test):
    soltest=[]
    for i in range(0,len(test)):
        if test[i][0]==0:
            x=(test[i][1],)
            for j in range(2,len(test[i])):
                x=x+(test[i][j],)
            soltest.append(x)
    return(soltest)

def lambda5fct(test):
    soltest=[]
    for i in range(0,len(test)):
        if test[i][0]==1:
            x=(test[i][1],)
            for j in range(2,len(test[i])):
                x=x+(test[i][j],)
            soltest.append(x)
    return(soltest)

###############################################################
###############################################################
###########A18
###############################################################
###############################################################

basisA18=[[0]]

l1=[(1,1,0,0,0,0),(0,0,1,1,0,0),(0,0,0,0,1,1)]
l2=wedge2(l1)
l5=[(1,0,1,0,0,1),(1,0,0,1,1,0),(0,1,1,0,1,0),(0,1,0,1,0,1)]
l5b=[(0,1,1,0,0,1),(0,1,0,1,1,0),(1,0,1,0,1,0),(1,0,0,1,0,1)]

temp=concat([(1,1)],l1)
temp = temp+concat([(1,0)],l5)
temp = temp+[(2,0,0,0,0,0,0,0),(0,2,0,0,0,0,0,0)]
temp=temp+concat([(0,0)],l2)
L = temp+concat([(0,1)],l5b)


basisA18.append(L)


###############################################################
###############################################################
###########A17
###############################################################
###############################################################

a=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
orderList7 = order(7)
basisA17=[[0]]


a[0]=diagA1(basisA18[1],2,3)
a[1]=removeA1(basisA18[1],2)




for i in range(0,2):
    basisA17.append(a[i])




###############################################################
###############################################################
###########A16
###############################################################
###############################################################

orderList = order(6)

a=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
additional = []
basisA16 =[[0]]



l1=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
l2=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
l5=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
l5b=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
L=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

#ORDERED as in final table

#2 and 6 are conjugate(checked)---->1

l1[1]=expand("[(1,1,0,0)/(0,1,1,0)/(0,0,1,1)]")
l5[1]=expand("[(1,1,0,1)/(1,0,2,0)/(1,0,0,0)/(0,2,1,0)/(0,0,1,0)/(0,1,1,1)]")
l5b[1]=expand("[(1,1,1,0)/(1,0,1,1)/(0,2,0,1)/(0,0,0,1)/(0,1,2,0)/(0,1,0,0)]")



#4 and 8 are conjugate(checked) -->2

l1[2]=expand("[(1,1,0,0)/(0,0,1,0)^2/(0,0,0,1)^2]")
l5[2]=expand("[(1,0,1,0)^2/(1,0,0,1)^2/(0,1,1,1)/(0,1,0,0)^4]")
l5b[2]=expand("[(0,1,1,0)^2/(0,1,0,1)^2/(1,0,1,1)/(1,0,0,0)^4]")


#1 and 11 are conjugate(checked) -->3

l1[3]=expand("[(4,0,0,0)/(0,1,1,0)/(0,0,0,2)]")
l5[3]=expand("[(3,1,0,1)/(3,0,1,1)]")
l5b[3]=expand("[(3,1,0,1)/(3,0,1,1)]")


#3 and 9 are conjugate(checked) -->4

l1[4]=expand("[(1,1,0,0)/(0,0,1,1)^2]")
l5[4]=expand("[(1,0,1,1)^2/(0,1,2,0)/(0,1,0,0)/(0,1,0,2)/(0,1,0,0)]")
l5b[4]=expand("[(0,1,1,1)^2/(1,0,2,0)/(1,0,0,0)/(1,0,0,2)/(1,0,0,0)]")


#5


l1[5]=expand("[(1,1,0,0)/(0,0,1,1)/(0,0,0,2)/(0,0,0,0)]")
l5[5]=expand("[(1,0,1,1)/(1,0,0,2)/(1,0,0,0)/(0,1,1,1)/(0,1,0,2)/(0,1,0,0)]")
l5b[5]=expand("[(1,0,1,1)/(1,0,0,2)/(1,0,0,0)/(0,1,1,1)/(0,1,0,2)/(0,1,0,0)]")


#7 and 13 are conjugate(checked) -->6

l1[6]=expand("[(1,1,0,0)/(0,0,1,0)^2/(0,0,0,2)/(0,0,0,0)]")
l5[6]=expand("[(1,0,1,1)/(1,0,0,1)^2/(0,1,1,1)/(0,1,0,1)^2]")
l5b[6]=expand("[(1,0,1,1)/(1,0,0,1)^2/(0,1,1,1)/(0,1,0,1)^2]")

#7


l1[7]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)]")
l5[7]=expand("[(1,1,1,1)^2]")
l5b[7]=expand("[(1,1,1,1)^2]")


#8


l1[8]=expand("[(1,1,0,0)/(0,1,1,0)/(0,0,0,1)^2]")
l5[8]=expand("[(1,1,0,0)^2/(1,0,1,1)/(0,2,0,1)/(0,0,0,1)/(0,1,1,0)^2]")
l5b[8]=expand("[(1,1,0,1)/(1,0,1,0)^2/(0,2,0,0)^2/(0,0,0,0)^2/(0,1,1,1)]")


#9

l1[9]=expand("[(1,1,0,0)/(0,1,1,0)/(0,1,0,1)]")
l5[9]=expand("[(1,1,0,1)/(1,1,1,0)/(0,3,0,0)/(0,1,0,0)^2/(0,1,1,1)]")
l5b[9]=expand("[(1,2,0,0)/(1,0,0,0)/(1,0,1,1)/(0,2,0,1)/(0,0,0,1)/(0,2,1,0)/(0,0,1,0)]")





basisA16=[[0]]
orderList6=order(6)
basisA16Lambda1=[[0]]

for i in range(1,10):
    l2[i]=wedge2(l1[i])


for i in range(1,10):
    temp=concat([(1,1)],l1[i])
    temp = temp+concat([(1,0)],l5[i])
    temp = temp+[(2,0,0,0,0,0),(0,2,0,0,0,0)]
    temp=temp+concat([(0,0)],l2[i])
    L[i] = temp+concat([(0,1)],l5b[i])
    t=checker(L[i],basisA16,orderList6)
    if t==-1:
        basisA16.append(L[i])
        basisA16Lambda1.append(l1[i])

#//////////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////
#A15 //////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////


#In A1E7



#A14inE7 with final order
orderList = order(4)
a=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
lambda1=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
lambda2=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
lambda5=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
lambda6=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
LE8=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]

additional = []


#1rst case is 7 and 13 (already checked and are equal)
#7&      $ (3,0,0)^2/(0,1,1)$		&  $
a[1]=expand("[(0,6,0,0)/(0,4,0,0)^3/(0,3,1,1)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(1,4,0,1)/(1,3,1,0)^2/(1,0,0,1)^3/(0,0,0,0)^3]")
lambda1[1]=expand("[(3,0,0)^2/(0,1,1)]")
lambda2[1]=wedge2(lambda1[1])
lambda5[1]=expand("[(3,1,0),(3,1,0),(4,0,1),(0,0,1)^3]")
lambda6[1]=expand("[(3,0,1),(3,0,1),(4,1,0),(0,1,0)^3]")






#20&      $ (1,0,0)^2/(0,1,0)^2/(0,0,1)^2$		&  $
a[2]=expand("[  (2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,1,1,0)^4/(0,1,0,1)^4/(0,0,1,1)^4/(0,0,0,0)^9/(1,1,1,0)^2/(1,1,0,1)^2/ (1,0,0,0)^8/(1,0,1,1)^2/]")
lambda1[2]=expand("[(1,0,0)^2/(0,1,0)^2/(0,0,1)^2]")
lambda2[2]=wedge2(lambda1[2])
lambda5[2]=expand("[(1,1,0)^2/(1,0,1)^2/(0,1,1)^2/(0,0,0)^8]")
lambda6[2]=expand("[(1,1,1)/(1,0,0)^4/(0,1,0)^4/(0,0,1)^4]")




#27&      $ (1,1,0)/(0,0,1)^2/$		&  $
a[3]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(1,1,1,0)^2/(1,1,0,1)^2/(1,0,1,1)^2/(0,1,1,0)^4/(0,1,0,1)^4/(0,0,1,1)^4/(1,0,0,0)^8/(0,0,0,0)^9]")
a[3]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,1,1,1)^2/(0,1,1,0)^4/(0,0,0,1)^8/(1,1,0,1)^2/(1,1,0,0)^4/(1,0,1,1)^2/(1,0,1,0)^4/(0,0,0,0)^9]")

lambda1[3]=expand("[(1,1,0)/(0,0,1)^2/(0,0,0)^4]")
lambda2[3]=wedge2(lambda1[3])
lambda5[3]=expand("[(1,0,1)^2/(1,0,0)^4/(0,1,1)^2/(0,1,0)^4]")
lambda6[3]=expand("[(1,0,1)^2/(1,0,0)^4/(0,1,1)^2/(0,1,0)^4]")



#28&      $ (1,1,0)/(0,2,0)/$		&    $
a[4]=expand("[(0,0,2,2)/(0,1,3,0)/(1,0,2,1)^2/(0,1,1,2)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^4/(0,0,0,2)^3/(1,1,1,1)^2/(1,0,0,1)^2/(0,1,1,0)^3/(0,0,0,0)  ]")
lambda1[4]=expand("[ (1,1,0)/(0,2,0)/(0,0,2)/(0,0,0)^2]")
lambda2[4]=wedge2(lambda1[4])
lambda5[4]=expand("[(1,1,1)^2/(0,2,1)^2/(0,0,1)^2]")
lambda6[4]=expand("[(1,1,1)^2/(0,2,1)^2/(0,0,1)^2]")


#25&      $ (1,0,0)^2/(0,1,0)^2/$		&  $
a[5]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)^2/(0,1,0,2)^2/(0,0,1,2)^2/(0,1,1,0)^4/(0,1,0,0)^2/(0,0,1,0)^2/(1,1,1,1)/(1,1,0,1)^2/(1,0,1,1)^2/ (1,0,0,1)^4/(0,0,0,0)^6]")
lambda1[5]=expand("[(1,0,0)^2/(0,1,0)^2/(0,0,2)/(0,0,0)]")
lambda2[5]=wedge2(lambda1[5])
lambda5[5]=expand("[(1,1,1)/(1,0,1)^2/(0,1,1)^2/(0,0,1)^4]")
lambda6[5]=expand("[(1,1,1)/(1,0,1)^2/(0,1,1)^2/(0,0,1)^4]")




#26&      $ (1,1,0)/(0,1,1)/$		&  $
a[6]=expand("[(0,1,2,1)/(1,0,2,0)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^2/(0,0,0,2)/(1,1,1,0)^2/(1,1,0,1)^2/(1,0,1,1)^2/(0,1,1,0)^4/(0,1,0,1)/(0,0,1,1)^4/(1,0,0,0)^2/(0,0,0,0)^6]")
lambda1[6]=expand("[(1,1,0)/(0,1,1)/(0,0,0)^4]")
lambda2[6]=wedge2(lambda1[6])
lambda5[6]=expand("[(1,1,0)^2/(1,0,1)^2/(0,2,0)^2/(0,0,0)^2/(0,1,1)^2]")
lambda6[6]=expand("[(1,1,0)^2/(1,0,1)^2/(0,2,0)^2/(0,0,0)^2/(0,1,1)^2]")



# 30 and 32 are conjugate (already checked and are equal)
#30&      $ (1,1,0)/(0,0,2)/$		&  $
a[7]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)^6/(0,1,1,2)/(0,1,1,0)^5/(1,1,0,1)^4/(1,0,1,1)^4/(0,0,0,0)^{10}]")
lambda1[7]=expand("[(1,1,0)/(0,0,2)/(0,0,0)^5]")
lambda2[7]=wedge2(lambda1[7])
lambda5[7]=expand("[(1,0,1)^4/(0,1,1)^4]")
lambda6[7]=expand("[(1,0,1)^4/(0,1,1)^4]")




# 29 and 17 are conjugate (already checked and are equal)
#29&      $ (1,0,0)^2/(0,2,0)/$		&  $
a[8]=expand("[(0,2,2,0)/(1,2,0,0)^2/(1,0,2,0)^2/(2,0,0,0)/(0,2,0,0)^3/(0,0,2,0)^3/(0,0,0,2)/(1,1,1,1)^2/(0,1,1,1)^4/(1,0,0,0)^4/(0,0,0,0)^4]")
lambda1[8]=expand("[(1,0,0)^2/(0,2,0)/(0,0,2)/(0,0,0)^2]")
lambda2[8]=wedge2(lambda1[8])
lambda5[8]=expand("[(1,1,1)^2/(0,1,1)^4]")
lambda6[8]=expand("[(1,1,1)^2/(0,1,1)^4]")






#1&      $ (2,1,1)$		&  $
a[9]=expand("[(0,4,2,0)/(0,4,0,2)/(0,2,2,2)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(1,2,1,2)/(1,4,1,0)/(1,0,3,0)]")
lambda1[9]=expand("[(2,1,1)]")
lambda2[9]=wedge2(lambda1[9])
lambda5[9]=lambda5fct(a[9])
lambda6[9]=lambda5fct(a[9])

#2&      $ (2,2,0)/(0,0,2)$		&  $
a[10]=expand("[(0,4,2,0)/(0,2,4,0)/(1,3,1,1)/(1,1,3,1)/(0,2,2,2)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)]")
lambda1[10]=expand("[(2,2,0)/(0,0,2)]")
lambda2[10]=wedge2(lambda1[10])
lambda5[10]=lambda5fct(a[10])
lambda6[10]=lambda5fct(a[10])



#3&      $ (3,1,0)/(0,1,1)$		&  $
a[11]=expand("[(0,6,0,0)/(0,4,2,0)/(0,3,2,1)/(0,3,0,1)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^2/(0,0,0,2)/  (1,3,2,0)/(1,4,0,1)/(1,0,2,1)/(1,3,0,0)]")
lambda1[11]=expand("[(3,1,0)/(0,1,1)]")
lambda2[11]=wedge2(lambda1[11])
lambda5[11]=[(3,2,0),(3,0,0),(4,0,1),(0,2,1)]
lambda6[11]=[(3,1,1),(4,1,0),(0,3,0),(0,1,0)]



#4&      $ (3,1,0)/(1,0,1)$		&  $
a[12]=expand("[  (0,6,0,0)/(0,4,2,0)/(0,4,1,1)/(0,2,1,1)/(2,0,0,0)/(0,2,0,0)^2/(0,0,2,0)/(0,0,0,2)/ (1,4,1,0)/(1,2,1,0)/(1,4,0,1)/(1,0,2,1)]")
lambda1[12]=expand("[(3,1,0)/(1,0,1)]")
lambda2[12]=wedge2(lambda1[12])
lambda5[12]=[(3,1,1),(5,0,0),(3,0,0),(1,2,0)]
lambda6[12]=[(4,1,0),(2,1,0),(4,0,1),(0,2,1)]

#5&      $ (3,1,0)/(0,0,1)^2$		&  $
a[13]=expand("[(0,6,0,0)/(0,4,2,0)/(0,3,1,1)^2/(1,3,1,0)^2/(1,4,0,1)/(1,0,2,1)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,0,0,0)^3]")
lambda1[13]=expand("[(3,1,0)/(0,0,1)^2]")
lambda2[13]=wedge2(lambda1[13])
lambda5[13]=expand("[(3,1,1),(4,0,0)^2,(0,2,0)^2]")
lambda6[13]=expand("[(3,1,0)^2,(4,0,1),(0,2,1)]")




#6&      $ (3,1,0)/(0,0,2)/$		&  $
a[14]=expand("[(0,6,0,0)/(0,4,2,0)/(0,3,1,2)/(1,3,1,1)/(1,4,0,1)/(0,3,1,0)/(1,0,2,1)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)^2]")
lambda1[14]=expand("[(3,1,0)/(0,0,2)/(0,0,0)]")
lambda2[14]=wedge2(lambda1[14])
lambda5[14]=[(3,1,1),(4,0,1),(0,2,1)]
lambda6[14]=[(3,1,1),(4,0,1),(0,2,1)]



#8&      $ (6,0,0)/(0,1,1)/$		&  $
a[15]=expand("[(0,10,0,0)/(1,6,1,0)/(0,6,1,1)/(1,6,0,1)/(0,6,0,0)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,0,1,1)/(1,0,0,1)/(1,0,1,0)]")
lambda1[15]=expand("[(6,0,0)/(0,1,1)/(0,0,0)]")
lambda2[15]=wedge2(lambda1[15])
lambda5[15]=lambda5fct(a[15])
lambda6[15]=lambda5fct(a[15])


#9&      $ (4,0,0)/(1,1,0)/$		& $
a[16]=expand("[(0,6,0,0)/(0,4,0,2)/(1,4,0,1)/(0,5,1,0)/(1,3,1,1)/(0,3,1,0)/(0,1,1,2)/(1,2,0,1)/(2,0,0,0)/(0,2,0,0)^2/(0,0,2,0)/(0,0,0,2)]")
lambda1[16]=expand("[(4,0,0)/(1,1,0)/(0,0,2)]")
lambda2[16]=wedge2(lambda1[16])
lambda5[16]=[(4,0,1),(2,0,1),(3,1,1)]
lambda6[16]=[(4,0,1),(2,0,1),(3,1,1)]




#10&      $ (4,0,0)/(0,1,1)/$		&  $
a[17]=expand("[(0,6,0,0)^2/(1,4,1,0)/(1,4,0,1)/(0,4,1,1)/(0,4,0,0)/(1,2,1,0)/(1,2,0,1)/(0,2,1,1)/(2,0,0,0)/(0,2,0,0)^3/(0,0,2,0)/(0,0,0,2)]")
lambda1[17]=expand("[(4,0,0)/(0,1,1)/(2,0,0)]")
lambda2[17]=wedge2(lambda1[17])
lambda5[17]=expand("[(4,1,0)/(2,1,0)/(4,0,1)/(2,0,1)]")
lambda6[17]=expand("[(4,1,0)/(2,1,0)/(4,0,1)/(2,0,1)]")

#11&      $ (4,0,0)/(0,1,1)/$		&  $
lambda1[18]=expand("[(4,0,0)/(0,1,1)/(0,0,2)]")
lambda2[18]=wedge2(lambda1[18])
lambda5[18]=expand("[(3,1,1)/(3,0,2)/(3,0,0)]")
lambda6[18]=expand("[(3,1,1)/(3,0,2)/(3,0,0)]")


#12&      $ (4,0,0)/(0,1,0)^2/$		&  $
a[19]=expand("[(0,6,0,0)/(0,4,0,2)/(0,4,1,0)^2/(1,3,1,1)/(1,3,0,1)^2/(0,0,1,2)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,0,0,0)^3]")
lambda1[19]=expand("[(4,0,0)/(0,1,0)^2/(0,0,2)]")
lambda2[19]=wedge2(lambda1[19])
lambda5[19]=expand("[(3,1,1)/(3,0,1),(3,0,1)]")
lambda6[19]=expand("[(3,1,1)/(3,0,1),(3,0,1)]")


#14&      $ (4,0,0)/(0,2,0)/$		&  $
a[20]=expand("[(0,6,0,0)/(0,4,2,0)/(0,4,0,2)/(1,3,1,1)^2/(0,4,0,0)/(0,0,2,2)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^2/(0,0,0,2)^2]")
lambda1[20]=expand("[(4,0,0)/(0,2,0)/(0,0,2)/(0,0,0)]")
lambda2[20]=wedge2(lambda1[20])
lambda5[20]=expand("[(3,1,1)^2]")
lambda6[20]=expand("[(3,1,1)^2]")

#16&      $ (1,1,0)/(1,0,1)/$		&  $
a[21]=expand("[(0,2,1,1)/(0,1,2,1)/(0,1,1,2)/(2,0,0,0)/(0,2,0,0)^2/(0,0,2,0)^2/(0,0,0,2)^2/(0,1,1,0)/(0,1,0,1)/(0,0,1,1)/(1,2,1,0)/(1,0,2,1)/(1,1,0,2)/(1,1,0,0)/(1,0,1,0)/(1,0,0,1)/(1,1,1,1)]")
lambda1[21]=expand("[ (1,1,0)/(1,0,1)/(0,1,1)]")
lambda2[21]=wedge2(lambda1[21])
lambda5[21]=expand("[(2,0,1)/(0,0,1)/(1,1,1)/(1,2,0)/(1,0,0)/(0,1,2)/(0,1,0)]")
lambda6[21]=expand("[(2,1,0)/(0,1,0)/(1,0,2)/(1,0,0)/(1,1,1)/(0,2,1)/(0,0,1)]")



#18&      $ (1,1,0)/(0,1,1)/$		&  $
a[22]=expand("[(0,1,2,1)/(0,0,1,2)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^2/(0,0,0,2)^2/(0,1,1,1)^2/(0,1,0,1)/(0,0,1,0)^2/(0,0,0,0)^3/(1,1,1,1)/(1,0,2,0)^2/(1,0,1,2)/(1,1,0,1)^2/(1,0,1,0)/(1,0,0,0)^2 ]")
lambda1[22]=expand("[(1,1,0)/(0,1,1)/(0,0,1)^2]")
lambda2[22]=wedge2(lambda1[22])
lambda5[22]=expand("[(1,1,0)^2/(1,0,2)/(1,0,0)/(0,2,1)/(0,0,1)/(0,1,1)^2]")
lambda6[22]=expand("[(1,1,1)/(1,0,1)^2/(0,2,0)^2/(0,0,0)^2/(0,1,2)/(0,1,0)]")


#21&      $ (1,1,0)^2/(0,0,2)/$		&  $
a[23]=expand("[  (0,2,2,0)/(1,2,0,1)/(1,0,2,1)/(0,1,1,2)^2/(2,0,0,0)/(0,2,0,0)^3/(0,0,2,0)^3/(0,0,0,2)^2/(1,1,1,1)^2/(1,0,0,1)^2/(0,1,1,0)^2/(0,0,0,0)]")
lambda1[23]=expand("[(1,1,0)^2/(0,0,2)/(0,0,0)]")
lambda2[23]=wedge2(lambda1[23])
lambda5[23]=expand("[(2,0,1)/(0,0,1)/(1,1,1)^2/(0,2,1)/(0,0,1)]")
lambda6[23]=expand("[(2,0,1)/(0,0,1)/(1,1,1)^2/(0,2,1)/(0,0,1)]")

#22&      $ (1,1,0)/(0,1,1)/$		&  $
a[24]=expand("[(0,0,1,3)/(0,1,2,1)/(0,1,1,2)/(1,1,0,2)/(1,0,1,2)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^2/(0,0,0,2)^3/(1,1,1,1)/(1,1,0,0)/(1,0,1,0)/(1,0,0,1)/(0,1,1,0)/(0,1,0,1)/(0,0,1,1)^2]")
a[24]=expand("[(2,0,0,0)/(0,2,0,0)/(0,3,1,0)/(0,1,1,0)^2/(0,2,1,1)/(0,2,0,0)^2/(0,0,2,0)^2/(0,1,2,1)/(0,1,0,1)/(0,0,0,2)/(0,0,1,1)/(1,2,1,0)/(1,0,1,0)/(1,1,1,1)/(1,2,0,1)/(1,0,0,1)/(1,1,2,0)/(1,1,0,0)]")
lambda1[24]=expand("[(1,1,0)/(0,1,1)/(0,0,2)/(0,0,0)]")
lambda2[24]=wedge2(lambda1[24])
lambda5[24]=expand("[(1,1,1)/(1,0,2)/(1,0,0)/(0,2,1)/(0,0,1)/(0,1,2)/(0,1,0)]")
lambda6[24]=expand("[(1,1,1)/(1,0,2)/(1,0,0)/(0,2,1)/(0,0,1)/(0,1,2)/(0,1,0)]")

#23&      $ (1,1,0)/(1,0,0)^2/$		&  $
a[25]=expand("[(0,1,1,2)/(0,2,1,0)^2/(0,1,0,2)^2/(2,0,0,0)/(0,2,0,0)^2/(0,0,2,0)/(0,0,0,2)^2/(0,1,1,0)/(0,0,1,0)^2/(0,1,0,0)^2/(1,2,0,1)/(1,0,0,1)/(1,1,0,1)^2/(1,0,1,1)^2/(1,1,1,1)/(0,0,0,0)^3]")
lambda1[25]=expand("[(1,1,0)/(1,0,0)^2/(0,0,2)/(0,0,0)]")
lambda2[25]=wedge2(lambda1[25])
lambda5[25]=expand("[(2,0,1)/(0,0,1)/(1,0,1)^2/(1,1,1)/(0,1,1)^2]")
lambda6[25]=expand("[(2,0,1)/(0,0,1)/(1,0,1)^2/(1,1,1)/(0,1,1)^2]")

#24&      $ (0,1,1)/(1,0,0)^2/$		&  $
a[26]=expand("[(3,0,0,0)^2/(2,1,1,0)/(2,1,0,1)/(2,0,1,1)/(2,0,0,0)^3/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(1,1,1,0)^2/(1,1,0,1)^2/(1,0,1,1)^2/(0,1,1,0)/ (0,1,0,1)/(0,0,1,1)/(1,0,0,0)^4/(0,0,0,0)^3]")
lambda1[26]=expand("[(0,1,1)/(1,0,0)^2/(2,0,0)/(0,0,0)]")
lambda2[26]=wedge2(lambda1[26])
lambda5[26]=expand("[(1,0,1)^2/(1,1,0)^2/(2,1,0)/(0,1,0)/(2,0,1)/(0,0,1)]")
lambda6[26]=expand("[(1,1,0)^2/(1,0,1)^2/(2,0,1)/(0,0,1)/(2,1,0)/(0,1,0)]")





#31&      $ (2,0,0)/(0,2,0)/$		&  $
a[27]=expand("[(0,2,2,0)/(0,2,0,2)/(0,0,2,2)/(2,0,0,0)/(0,2,0,0)^4/(0,0,2,0)^4/(0,0,0,2)^4/(1,1,1,1)^4/(0,0,0,0)^3]")
lambda1[27]=expand("[(2,0,0)/(0,2,0)/(0,0,2)/(0,0,0)^3]")
lambda2[27]=wedge2(lambda1[27])
lambda5[27]=expand("[(1,1,1)^4]")
lambda6[27]=expand("[(1,1,1)^4)]")



#33& $(2,0,0)^2/(0,2,0)/$ & $ INCOMPLETE

#In case 28 to get full Le8 restriction:
#temp=expand("[(2,0,0,0,0)/(0,2,0,0,0)/(0,0,2,0,0)/(0,0,0,2,0)/(0,0,0,0,2)/(0,2,2,0,0)/(0,2,0,2,0)/(0,2,0,0,2)/(0,0,2,2,0)/(0,0,2,0,2)/(0,0,0,2,2)/(1,1,1,1,1)^2]")
#print("THIS IS FIXING OF CASE 28")
#temp2=diagA1(temp,2,3)
temp3=expand("[(0,4,0,0)/(0,2,2,0)^2/(0,2,0,2)^2/(1,2,1,1)^2/(0,0,2,2)/(0,2,0,0)^3/(0,0,2,0)/(0,0,0,2)/(2,0,0,0)/(1,0,1,1)^2/(0,0,0,0)]")
#print("CASE 33 :dim of the new LE7 is "+str(dimChecker(temp3)))
#basistemp=[]
#basistemp.append(temp2)
#basistemp.append(temp3)
#a[28]=expand("[(2,0,0,0)/(0,2,0,0)^3/(0,0,2,0)/(0,0,0,2)/(0,4,0,0)/(0,2,2,0)^2/(0,2,0,2)^2/(0,0,2,2)/(0,0,0,0) ]")
a[28]=temp3
#print("checking if coincide with previous fact:")
#o4=order(4)
#print(classifyIncomplete(a[28],basistemp,o4))
lambda1[28]=expand("[(2,0,0)^2/(0,2,0)/(0,0,2)]")
lambda2[28]=wedge2(lambda1[28])
lambda5[28]=lambda5fct(a[28])
lambda6[28]=lambda5fct(a[28])


#34& $(1,1,0)/(0,0,2)^2$ & $
a[29]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)^7/(0,0,0,4)/(0,1,1,2)^2/(1,1,0,2)^2/(1,0,1,2)^2/(0,1,1,0)^2/(1,1,0,0)^2/(1,0,1,0)^2/(0,0,0,0)^2]")
lambda1[29]=expand("[(1,1,0)/(0,0,2)^2/(0,0,0)^2]")
lambda2[29]=wedge2(lambda1[29])
lambda5[29]=expand("[(1,0,2)/(1,0,0)/(1,0,2)/(1,0,0)/(0,1,2)/(0,1,0)/(0,1,2)/(0,1,0)]")
lambda6[29]=expand("[(1,0,2)/(1,0,0)/(1,0,2)/(1,0,0)/(0,1,2)/(0,1,0)/(0,1,2)/(0,1,0))]")


#35& $(1,1,0)/(0,1,1)$ & $
a[30]=expand("[(0,1,3,0)/(0,0,3,1)/(0,1,2,1)/(1,1,2,0)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^4/(0,0,0,2)/(1,1,1,1)/(1,1,0,0)/(0,1,1,0)^2/(0,0,1,1)^2/(0,1,0,1)/ (1,0,3,0)/(1,0,2,1)/(1,0,1,0)^2/(1,0,0,1)]")
lambda1[30]=expand("[(1,1,0)/(0,1,1)/(0,2,0)/(0,0,0)]")
lambda2[30]=wedge2(lambda1[30])
lambda5[30]=expand("[(1,1,1)/(1,2,0)/(1,0,0)/(0,3,0)/(0,1,0)^2/(0,2,1)/(0,0,1)]")
lambda6[30]=expand("[(1,1,1)/(1,2,0)/(1,0,0)/(0,3,0)/(0,1,0)^2/(0,2,1)/(0,0,1)]")


a[31]=expand("[(0,1,3,0)/(0,0,3,1)/(0,1,2,1)/(1,1,2,0)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)^4/(0,0,0,2)/(1,1,1,1)/(1,1,0,0)/(0,1,1,0)^2/(0,0,1,1)^2/(0,1,0,1)/(1,0,3,0)^2/(1,0,1,0)^4]")
lambda1[31]=expand("[(1,1,0)/(0,1,1)/(0,2,0)/(0,0,0)]")
lambda2[31]=wedge2(lambda1[31])
lambda5[31]=lambda5fct(a[31])
lambda6[31]=lambda5fct(a[31])




#36& $(1,0,0)^2/(0,1,1)$ & $
a[32]=expand("[(0,0,0,0)^3/(0,0,1,3)/(0,1,0,2)^2/(1,0,0,2)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)^3/(1,0,1,1)^2/(0,1,1,1)^2/(0,0,1,1)^2/(0,1,0,0)^2/(1,0,0,0)^2/(1,1,1,1)/(1,1,0,2)/(1,1,0,0)]")
lambda1[32]=expand("[(1,0,0)^2/(0,1,1)/(0,0,2)/(0,0,0)]")
lambda2[32]=wedge2(lambda1[32])
lambda5[32]=expand("[(0,1,1)^2/(0,0,2)^2/(0,0,0)^2/(1,1,1)/(1,0,2)/(1,0,0)]")
lambda6[32]=expand("[(0,1,1)^2/(0,0,2)^2/(0,0,0)^2/(1,1,1)/(1,0,2)/(1,0,0))]")



a[33]=expand("[(0,0,0,0)^3/(0,0,1,3)/(0,1,0,2)^2/(1,0,0,2)^2/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)^3/(1,0,1,1)^2/(0,1,1,1)^2/(0,0,1,1)^2/(0,1,0,0)^2/(1,0,0,0)^2/(1,1,1,1)^2]")
lambda1[33]=expand("[(1,0,0)^2/(0,1,1)/(0,0,2)/(0,0,0)]")
lambda2[33]=wedge2(lambda1[33])
lambda5[33]=lambda5fct(a[33])
lambda6[33]=lambda5fct(a[33])



#17 (1,1,0)^2/(0,0,1)^2
a[34]=expand("[(0,2,2,0)/(2,0,0,0)/(0,2,0,0)^3/(0,0,2,0)^3/(0,0,0,2)/(0,1,1,1)^4/(0,0,0,0)^4/(1,2,0,1)/(1,0,2,1)/(1,1,1,0)^4/(1,0,0,1)^2]")
lambda1[34]=expand("[(1,1,0)^2/(0,0,1)^2]")
lambda2[34]=wedge2(lambda1[34])
lambda5[34]=expand("[(2,0,0)^2/(0,0,0)^2/(1,1,1)^2/(0,2,0)^2/(0,0,0)^2]")
lambda6[34]=expand("[(2,0,1)/(0,0,1)/(1,1,0)^4/(0,2,1)/(0,0,1)]")

#37 110/101/100^2
a[35]=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(2,2,0,0)/(2,0,2,0)/(2,0,0,2)/(0,2,2,0)/(0,2,0,2)/(0,0,2,2)/(1,1,1,1)^4/(0,0,0,0)^3]")
lambda1[35]=expand("[(1,1,0)/(1,0,1)/(1,0,0)^2]")
lambda2[35]=wedge2(lambda1[35])
lambda5[35]=expand("[(2,0,0)^2/(0,0,0)^2/(2,0,1)/(0,0,1)/(2,1,0)/(0,1,0)/(0,1,1)^2]")
lambda6[35]=expand("[(3,0,0)/(1,0,0)^2/(1,0,1)^2/(1,1,0)^2/(1,1,1)]")

#15&      $ (1,1,0)^2/(0,1,1)$		&  $
a[36]=expand("[(0,2,2,0)/(0,1,2,1)^2/(2,0,0,0)/(0,2,0,0)^3/(0,0,2,0)^4/(0,0,0,2)/(0,1,0,1)^2/(0,0,0,0)/(1,0,3,0)/(1,2,1,0)/(1,1,1,1)^2/(1,0,1,0)^3  ]")
lambda1[36]=expand("[(1,1,0)^2/(0,1,1)]")
lambda2[36]=wedge2(lambda1[36])
lambda5[36]=expand("[(2,0,1)/(0,0,1)/(1,2,0)/(1,0,0)/(1,2,0)/(1,0,0)/(0,2,1)/(0,0,1)]")
lambda6[36]=expand("[(2,1,0)/(0,1,0)/(1,1,1)^2/(0,3,0)/(0,1,0)^2]")

#ADDITIONAL
lambda1[37]=[(2,1,1)]
lambda2[37]=[(2,2,2),(4,2,0),(4,0,2),(2,0,0),(0,2,0),(0,0,2)]
lambda5[37]=[(2,1,2),(4,1,0),(0,3,0)]
lambda6[37]=[(2,2,1),(4,0,1),(0,0,3)]


orderList5=order(5)
basisA15=[[0]]
basisA15Lambda1=[[0]]
TempLambda1=[[0]]
TempLE8=[[0]]
for i in range(1,38):
    
    LE8[i]=[]
    LE8[i]=concat([(1,1)],lambda1[i])
    LE8[i]=LE8[i]+concat([(1,0)],lambda5[i])
    LE8[i]=LE8[i]+[(2,0,0,0,0),(0,2,0,0,0)]
    LE8[i]=LE8[i]+concat([(0,0)],lambda2[i])
    LE8[i]=LE8[i]+concat([(0,1)],lambda6[i])
    TempLambda1.append(lambda1[i])
    TempLE8.append(LE8[i])
    if dimChecker(LE8[i])!=248:
        print("LE8 does not have dim 248 at i=")
        print(i)
        
    temp=checker(LE8[i],basisA15,orderList5)

    if temp==-1:
        basisA15.append(LE8[i])
        basisA15Lambda1.append(lambda1[i])





print("HERE:")
print(len(basisA15))



t1=expand("[(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)]")
t5=expand("[(1,1,1,1)^2]")
t5b=expand("[(1,1,1,1)^2]")
t2=wedge2(t1)
temp=concat([(1,1)],t1)
temp = temp+concat([(1,0)],t5)
temp = temp+[(2,0,0,0,0,0),(0,2,0,0,0,0)]
temp=temp+concat([(0,0)],t2)
f = temp+concat([(0,1)],t5b)

a=removeA1(f,1)
b=diagA1(f,1,2)

basisA15.append(a)

basisA15.append(b)

TempLambda1.append([(0,0,0),(0,0,0)])
TempLE8.append(a)
TempLambda1.append([(0,0,0),(0,0,0)])
TempLE8.append(b)

a=removeA1(basisA16[7],1)

b=diagA1(basisA16[7],1,3)



















#A15 in A16 in A1E7 with diag

pb=[1,2,3,4,5,6,7]
pb2=[[2,3,4],[2,3,5],[2,3,4,6],[2,3,5],[2,3,5,6],[2,3,5,6],[2,3]]
for j in range(0,len(pb)):
    for i in pb2[j]:
        tester = diagA1(basisA16[pb[j]],1,i)
        if checker(tester,basisA15,orderList5)==-1:
            basisA15.append(tester)




#InG2F4


#A12inG2
G2=[(2,0,0,0,0),(0,2,0,0,0),(1,3,0,0,0)]
LF4=[0,0,0,0,0,0]

LF4[1]= expand("[(1,1,1)^2/(2,0,0)/(0,2,0)/(0,0,2)/(1,1,0)/(1,0,1)/(0,1,1)/(1,0,0)^2/(0,1,0)^2/(0,0,1)^2/(0,0,0)^3]")
             
LF4[2]= expand("[(1,2,1)/(2,0,0)/(0,2,0)^3/(0,0,2)/(1,1,0)^2/(1,0,1)^2/(0,1,1)^2/(0,0,0)]")


LF4[3]= expand("[(1,4,1)/(0,4,2)/(1,0,3)/(2,0,0)/(0,2,0)/(0,0,2)]")

LF4[4]= expand("[(0,6,0)/(1,4,1)/(1,3,0)/(0,3,1)/(2,0,0)/(0,2,0)/(0,0,2)]")

LF4[5]= expand("[(2,2,0)/(2,0,2)/(0,2,2)/(2,0,0)/(0,2,0)/(0,0,2)]")

orderList5=order(5)
for i in range(3,4):
   # print("i= "+str(i))
    s=concat([(0,0)],LF4[i])
    s=s+G2

    #print(classifyIncomplete(s,basisA15,orderList5))
    if len(classifyIncomplete(s,basisA15,orderList5))==1:
       basisA15.append(s)



#In D8

lambda1=[]
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 2, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (4, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 2, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 2, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(0, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 0, 0, 0), (0, 1, 0, 0, 0), (0, 0, 2, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 2, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 2, 0, 0), (0, 0, 0, 2, 0), (0, 0, 0, 0, 2)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 4, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (1, 1, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (1, 1, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 1, 0, 1, 0), (0, 1, 0, 0, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 1, 0, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(0, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 3)])
lambda1.append([(0, 0, 0, 0, 0), (6, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 0, 0, 0), (0, 1, 0, 0, 0), (0, 0, 1, 0, 0), (0, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 0, 0, 0), (0, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 0, 0, 0), (0, 1, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 2, 0, 0), (0, 0, 0, 2, 0), (0, 0, 0, 0, 2)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 4, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 1, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (1, 1, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 1, 0, 1, 0), (0, 1, 0, 0, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 1, 0, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(1, 0, 0, 0, 0), (1, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 3)])
lambda1.append([(2, 0, 0, 0, 0), (2, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 2, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(2, 0, 0, 0, 0), (4, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(2, 0, 0, 0, 0), (0, 2, 0, 0, 0), (0, 0, 2, 0, 0), (0, 0, 0, 2, 0), (1, 0, 0, 0, 1)])
lambda1.append([(2, 0, 0, 0, 0), (0, 4, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(2, 0, 0, 0, 0), (0, 4, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(2, 0, 0, 0, 0), (0, 4, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(2, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 2, 2)])
lambda1.append([(3, 0, 0, 0, 0), (3, 0, 0, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 1, 0, 0, 0), (1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 1, 0, 0, 0), (1, 1, 0, 0, 0), (0, 0, 1, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (1, 0, 0, 1, 0), (1, 0, 0, 0, 1)])
lambda1.append([(1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (1, 0, 0, 1, 0), (0, 1, 0, 0, 1)])
lambda1.append([(1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 1, 1, 0, 0), (0, 0, 0, 1, 1)])
lambda1.append([(1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 1, 0, 1, 0), (0, 0, 1, 0, 1)])
lambda1.append([(1, 1, 0, 0, 0), (1, 0, 1, 0, 0), (0, 0, 0, 1, 3)])
lambda1.append([(1, 1, 0, 0, 0), (0, 0, 1, 1, 0), (1, 0, 0, 0, 3)])
lambda1.append([(1, 1, 0, 0, 0), (0, 0, 1, 1, 0), (3, 0, 0, 0, 1)])
lambda1.append([(1, 1, 0, 0, 0), (0, 0, 1, 1, 2)])

sol=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
for i in range(14,15):
        sol[i]= wedge2(lambda1[i])
        
j=0
orderList5=order(5)
for i in range(14,15):
        basisA15.append(sol[i])




















   








































   





#//////////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////
#A14 //////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////////////////////////////////////////////////////
print("//////////////////////////////////////////////////")
print("A14")
print("//////////////////////////////////////////////////")


#In A1E7

orderList = order(4)
a=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
lambda1=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
lambda2=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
lambda5=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
lambda6=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]
LE8=[0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,00,0,0,0,0,0,0,0,0,0,0]

additional = []

#In A1A1A12 \subseteq A1A1D6 with A12 in D6
lambda1[1]=expand("[ (2,2)/(2,0)]")
lambda5[1]=expand("[(4, 1)/(2,1)/(2, 3)/(0,3) ]")
lambda6[1]=expand("[(4, 1)/(2,1)/(2, 3)/(0,3) ]")




lambda1[2]=expand("[(8,0)/(0,2)]")
lambda5[2]=expand("[ (10,1)/(4,1)]")
lambda6[2]=expand("[(10,1)/(4,1) ]")


lambda1[3]=expand("[(3,1)/(1,1)]")
lambda5[3]=expand("[(5,0)/(3,0)/(1,2)/(3,2)/(3,0) ]")
lambda6[3]=expand("[(4,1)^2/(2,1)/(0,3)/(0,1) ]")

lambda1[4]=expand("[(3,1)/(1,1)]")
lambda5[4]=expand("[(4,1)^2/(2,1)/(0,3)/(0,1) ]")
lambda6[4]=expand("[ (5,0)/(3,0)/(1,2)/(3,2)/(3,0)]")

lambda1[5]=expand("[(3,1)/(1,0)^2]")
lambda5[5]=expand("[(4,1)/(2,1)/(4,0)^2/(0,2)^2]")
lambda6[5]=expand("[(5,0)/(3,0)/(1,2)/(3,1)^2 ]")

lambda1[6]=expand("[(3,1)/(1,0)^2]")
lambda5[6]=expand("[ (5,0)/(3,0)/(1,2)/(3,1)^2 ]")
lambda6[6]=expand("[ (4,1)/(2,1)/(4,0)^2/(0,2)^2]")

lambda1[7]=expand("[ (3,1)/(0,1)^2]")
lambda5[7]=expand("[(4,1)/(0,3)/(0,1)/(3,1)^2 ]")
lambda6[7]=expand("[ (3,2)/(3,0)/(4,0)^2/(0,2)^2]")

lambda1[8]=expand("[(3,1)/(0,1)^2]")
lambda5[8]=expand("[(4,1)/(0,3)/(0,1)/(3,1)^2  ]")
lambda6[8]=expand("[ (3,2)/(3,0)/(4,0)^2/(0,2)^2]")


lambda1[9]=expand("[(3,0)^2/(1,1)]")
lambda5[9]=expand("[  (5,0)/(1,0)^3/(3,1)^2/(3,0)]")
lambda6[9]=expand("[ (4,0)^2/(2,0)^2/(4,1)/(0,1)^3]")


lambda1[10]=expand("[ (3,0)^2/(0,1)^2]")
lambda5[10]=expand("[(3,1)^2/(4,0)^2/(0,0)^6 ]")
lambda6[10]=expand("[ (4,1)/(0,1)^3/(3,0)^4]")


lambda1[11]=expand("[ (3,1)/(2,0)/(0,0)]")
lambda5[11]=expand("[(5,0)/(3,0)/(1,2)/(4,1)/(2,1) ]")
lambda6[11]=expand("[ (5,0)/(3,0)/(1,2)/(4,1)/(2,1)]")


lambda1[12]=expand("[ (3,1)/(0,2)/(0,0)]")
lambda5[12]=expand("[ (3,2)/(3,0)/(4,1)/(0,3)/(0,1)]")
lambda6[12]=expand("[ (3,2)/(3,0)/(4,1)/(0,3)/(0,1)]")



lambda1[13]=expand("[ (3,0)^2/(0,2)/(0,0)]")
lambda5[13]=expand("[ (3,1)^2/(4,1)/(0,1)^3]")
lambda6[13]=expand("[ (3,1)^2/(4,1)/(0,1)^3]")



lambda1[14]=expand("[ (3,1)/(0,0)^4]")
lambda5[14]=expand("[ (3,1)^2/(4,0)^2/(0,2)^2]")
lambda6[14]=expand("[ (3,1)^2/(4,0)^2/(0,2)^2]")


lambda1[15]=expand("[ (6,0)/(0,4)]")
lambda5[15]=expand("[ (6,3)/(0,3)]")
lambda6[15]=expand("[ (6,3)/(0,3)]")


lambda1[16]=expand("[  (6,0)/(1,1)/(0,0)]")
lambda5[16]=expand("[ (7,0)/(6,1)/(5,0)/(1,0)/(0,1)]")
lambda6[16]=expand("[ (7,0)/(6,1)/(5,0)/(1,0)/(0,1)]")



lambda1[17]=expand("[ (6,0)/(0,1)^2/(0,0)]")
lambda5[17]=expand("[ (6,1)/(6,0)^2/(0,1)/(0,0)^2]")
lambda6[17]=expand("[  (6,1)/(6,0)^2/(0,1)/(0,0)^2]")


lambda1[18]=expand("[ (6,0)/(0,2)/(0,0)^2]")
lambda5[18]=expand("[ (6,1)^2/(0,1)^2]")
lambda6[18]=expand("[(6,1)^2/(0,1)^2]")


lambda1[19]=expand("[ (4,0)/(0,4)/(0,0)^2]")
lambda5[19]=expand("[ (3,3)^2]")
lambda6[19]=expand("[ (3,3)^2]")



lambda1[20]=expand("[ (4,0)/(1,1)/(2,0)]")
lambda5[20]=expand("[ (4,1)/(2,1)/(5,0)/(3,0)^2/(1,0)]")
lambda6[20]=expand("[ (4,1)/(2,1)/(5,0)/(3,0)^2/(1,0)]")




lambda1[21]=expand("[ (4,0)/(1,1)/(0,2)]")
lambda5[21]=expand("[ (4,1)/(2,1)/(3,2)/(3,0)]")
lambda6[21]=expand("[ (4,1)/(2,1)/(3,2)/(3,0)]")


lambda1[22]=expand("[ (4,0)/(0,1)^2/(2,0)]")
lambda5[22]=expand("[ (4,1)/(2,1)/(4,0)^2/(2,0)^2]")
lambda6[22]=expand("[(4,1)/(2,1)/(4,0)^2/(2,0)^2 ]")

lambda1[23]=expand("[  (4,0)/(0,1)^2/(0,2)]")
lambda5[23]=expand("[ (3,2)/(3,0)/(3,1)^2]")
lambda6[23]=expand("[(3,2)/(3,0)/(3,1)^2 ]")

lambda1[24]=expand("[  (4,0)/(1,0)^2/(0,2)]")
lambda5[24]=expand("[ (4,1)/(2,1)/(3,1)^2]")
lambda6[24]=expand("[(4,1)/(2,1)/(3,1)^2 ]")

lambda1[25]=expand("[ (4,0)/(1,1)/(0,0)^3]")
lambda5[25]=expand("[ (4,0)^2/(2,0)^2/(3,1)^2]")
lambda6[25]=expand("[ (4,0)^2/(2,0)^2/(3,1)^2]")


lambda1[26]=expand("[  (4,0)/(0,1)^2/(0,0)^3]")
lambda5[26]=expand("[ (3,1)^2/(3,0)^4]")
lambda6[26]=expand("[ (3,1)^2/(3,0)^4]")

lambda1[27]=expand("[ (4,0)/(0,2)^2/(0,0)]")
lambda5[27]=expand("[ (3,2)^2/(3,0)^2]")
lambda6[27]=expand("[(3,2)^2/(3,0)^2 ]")

lambda1[28]=expand("[ (4,0)/(0,2)/(2,0)/(0,0)]")
lambda5[28]=expand("[ (4,1)^2/(2,1)^2]")
lambda6[28]=expand("[(4,1)^2/(2,1)^2 ]")

lambda1[29]=expand("[ (4,0)/(0,2)/(0,0)^4]")
lambda5[29]=expand("[ (3,1)^4]")
lambda6[29]=expand("[(3,1)^4 ]")


lambda1[30]=expand("[ (1,1)^3]")
lambda5[30]=expand("[ (2,1)^3/(0,1)^5/(0,3)]")
lambda6[30]=expand("[(3,0)/(1,2)^3/(1,0)^5 ]")

lambda1[31]=expand("[  (1,1)^2/(0,1)^2]")
lambda5[31]=expand("[ (2,1)/(0,1)/(1,1)^4/(0,3)/(0,1)^2]")
lambda6[31]=expand("[(2,0)^2/(0,0)^4/(1,2)^2/(1,0)^2/(0,2)^2 ]")

lambda1[32]=expand("[ (1,1)^2/(0,1)^2]")
lambda5[32]=expand("[ (2,0)^2/(0,0)^4/(1,2)^2/(1,0)^2/(0,2)^2]")
lambda6[32]=expand("[(2,1)/(0,1)/(1,1)^4/(0,3)/(0,1)^2 ]")

lambda1[33]=expand("[ (1,1)/(0,1)^4]")
lambda5[33]=expand("[ (1,1)^4/(0,1)^4/(0,3)/(0,1)^2]")
lambda6[33]=expand("[(1,0)^4/(1,2)/(1,0)/(0,2)^4/(0,0)^4 ]")


lambda1[34]=expand("[ (1,1)/(0,1)^2/(1,0)^2]")
lambda5[34]=expand("[ (2,0)^2/(0,0)^2/(1,1)^2/(1,2)/(1,0)/(0,1)^4]")
lambda6[34]=expand("[(2,1)/(0,1)/(1,0)^4/(1,1)^2/(0,2)^2/(0,0)^2]")



lambda1[35]=expand("[ (1,0)^4/(0,1)^2]")
lambda5[35]=expand("[ (2,0)^2/(0,0)^2/(1,1)^4/(0,0)^8]")
lambda6[35]=expand("[(2,1)/(0,1)/(1,0)^8/(0,1)^4 ]")




lambda1[36]=expand("[ (1,1)^2/(0,0)^4]")
lambda5[36]=expand("[ (2,0)^2/(0,0)^4/(1,1)^4/(0,2)^2]")
lambda6[36]=expand("[(2,0)^2/(0,0)^4/(1,1)^4/(0,2)^2 ]")


lambda1[37]=expand("[ (1,1)/(1,0)^2/(0,0)^4]")
lambda5[37]=expand("[ (2,0)^2/(0,0)^2/(1,0)^4/(1,1)^2/(0,1)^4]")
lambda6[37]=expand("[ (2,0)^2/(0,0)^2/(1,0)^4/(1,1)^2/(0,1)^4]")



lambda1[38]=expand("[ (1,0)^2/(0,1)^2/(0,0)^4]")
lambda5[38]=expand("[ (0,1)^4/(0,0)^8/(1,1)^2/(1,0)^4]")
lambda6[38]=expand("[(0,1)^4/(0,0)^8/(1,1)^2/(1,0)^4]")



lambda1[39]=expand("[  (1,1)/(0,0)^8]")
lambda5[39]=expand("[ (1,0)^8/(0,1)^8]")
lambda6[39]=expand("[ (1,0)^8/(0,1)^8 ]")




lambda1[40]=expand("[ (1,1)/(0,2)^2/(0,0)^2]")
lambda5[40]=expand("[ (1,2)^2/(1,0)^2/(0,3)^2/(0,1)^4]")
lambda6[40]=expand("[(1,2)^2/(1,0)^2/(0,3)^2/(0,1)^4]")



lambda1[41]=expand("[(1,1)/(2,0)/(0,2)/(0,0)^2]")
lambda5[41]=expand("[ (2,1)^2/(0,1)^2/(1,2)^2/(1,0)^2)]")
lambda6[41]=expand("[(2,1)^2/(0,1)^2/(1,2)^2/(1,0)^2) ]")



lambda1[42]=expand("[ (1,0)^2/(2,0)/(0,2)/(0,0)^2]")
lambda5[42]=expand("[ (1,1)^4/(2,1)^2/(0,1)^2]")
lambda6[42]=expand("[(1,1)^4/(2,1)^2/(0,1)^2 ]")




lambda1[43]=expand("[(1,0)^2/(0,2)^2/(0,0)^2]")
lambda5[43]=expand("[ (1,2)^2/(1,0)^2/(0,2)^4/(0,0)^4]")
lambda6[43]=expand("[(1,2)^2/(1,0)^2/(0,2)^4/(0,0)^4 ]")



lambda1[44]=expand("[(1,1)/(2,0)/(0,0)^5]")
lambda5[44]=expand("[ (1,1)^4/(2,0)^4/(0,0)^4]")
lambda6[44]=expand("[(1,1)^4/(2,0)^4/(0,0)^4 ]")





 
lambda1[45]=expand("[(1,0)^2/(0,2)/(0,0)^5]")
lambda5[45]=expand("[ (1,1)^4/(0,1)^8]")
lambda6[45]=expand("[(1,1)^4/(0,1)^8]")






lambda1[46]=expand("[ (2,0)^3/(0,2)]")
lambda5[46]=expand("[ (3,1)^2/(1,1)^4]")
lambda6[46]=expand("[(3,1)^2/(1,1)^4 ]")


lambda1[47]=expand("[(2,0)^2/(0,2)^2]")
lambda5[47]=expand("[ (2,2)^2/(2,0)^2/(0,2)^2/(0,0)^2]")
lambda6[47]=expand("[(2,2)^2/(2,0)^2/(0,2)^2/(0,0)^2 ]")


lambda1[48]=expand("[(2,0)^2/(0,2)/(0,0)^3]")
lambda5[48]=expand("[ (2,1)^4/(0,1)^4]")
lambda6[48]=expand("[(2,1)^4/(0,1)^4]")



lambda1[49]=expand("[(2,0)/(0,2)/(0,0)^6]")
lambda5[49]=expand("[ (1,1)^8]")
lambda6[49]=expand("[(1,1)^8 ]")



lambda1[50]=expand("[(1,1)/(2,0)/(0,1)^2/(0,0)]")
lambda5[50]=expand("[ (1,1)^2/(1,2)/(1,0)/(2,1)/(0,1)/(2,0)^2/(0,0)^2]")
lambda6[50]=expand("[(1,2)/(1,0)/(1,1)^2/(2,0)^2/(0,0)^2/(2,1)/(0,1) ]")



lambda1[51]=expand("[(0,2)/(1,0)^2/(0,1)^2/(0,0)]")
lambda5[51]=expand("[ (1,1)^2/(1,2)/(1,0)/(0,2)^2/(0,0)^2/(0,1)^4]")
lambda6[51]=expand("[(1,1)^2/(1,2)/(1,0)/(0,2)^2/(0,0)^2/(0,1)^4 ]")


lambda1[52]=expand("[(1,1)/(2,0)(1,0)^2/(0,0)]")
lambda5[52]=expand("[ (1,1)^2/(2,1)/(0,1)/(3,0)/(1,0)^2/(2,0)^2/(0,0)^2]")
lambda6[52]=expand("[ (1,1)^2/(2,1)/(0,1)/(3,0)/(1,0)^2/(2,0)^2/(0,0)^2]")


lambda1[53]=expand("[(1,1)^2/(2,0)(0,0)]")
lambda5[53]=expand("[ (3,0)/(1,0)^2/(2,1)^2/(0,1)^2/(1,2)/(1,0)]")
lambda6[53]=expand("[(3,0)/(1,0)^2/(2,1)^2/(0,1)^2/(1,2)/(1,0) ]")

lambda1[54]=expand("[(1,0)^4/(0,2)/(0,0)]")
lambda5[54]=expand("[ (2,1)/(0,1)/(1,1)^4/(0,1)^4]")
lambda6[54]=expand("[(2,1)/(0,1)/(1,1)^4/(0,1)^4 ]")

lambda1[55]=expand("[(2,1)^2]")
lambda5[55]=expand("[ (2,2)^2/(0,0)^4/(4,0)^2]")
lambda6[55]=expand("[(2,1)^3/(4,1)/(0,3) ]")


lambda1[56]=expand("[(2,1)^2]")
lambda5[56]=expand("[(2,1)^3/(4,1)/(0,3) ]")
lambda6[56]=expand("[ (2,2)^2/(0,0)^4/(4,0)^2]")


lambda1[57]=expand("[(5,1)]")
lambda5[57]=expand("[ (8,1)/(4,1)/(0,3)]")
lambda6[57]=expand("[(5,2)/(9,0)/(3,0) ]")

lambda1[58]=expand("[(5,1)]")
lambda5[58]=expand("[(5,2)/(9,0)/(3,0) ]")
lambda6[58]=expand("[ (8,1)/(4,1)/(0,3)]")

lambda1[59]=expand("[(2,2)/(0,0)^3]")
lambda5[59]=expand("[ (3,1)^2/(1,3)^2]")
lambda6[59]=expand("[ (3,1)^2/(1,3)^2 ]")



frank=[[(0,0)]]
frank.append([(2, 0), (2, 0), (2, 0), (0, 2)])
frank.append([(2, 0), (2, 0), (0, 2), (0, 2)])
frank.append([(2, 0), (2, 0), (0, 2), (0, 0), (0, 0), (0, 0)])
frank.append([(2, 0), (2, 0), (0, 4), (0, 0)])
frank.append([(2, 0), (2, 0), (0, 1), (0, 1), (0, 0), (0, 0)])
frank.append([(2, 0), (2, 0), (1, 1), (0, 0), (0, 0)])
frank.append([(2, 0), (0, 2), (4, 0), (0, 0)])
frank.append([(2, 0), (0, 2), (1, 0), (1, 0), (0, 0), (0, 0)])
frank.append([(2, 0), (0, 2), (1, 1), (0, 0), (0, 0)])
frank.append([(2, 0), (0, 2), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)])
frank.append([(2, 0), (4, 0), (0, 1), (0, 1)])
frank.append([(2, 0), (4, 0), (1, 1)])
frank.append([(2, 0), (0, 4), (1, 0), (1, 0)])
frank.append([(2, 0), (0, 4), (0, 1), (0, 1)])
frank.append([(2, 0), (0, 4), (1, 1)])
frank.append([(2, 0), (0, 4), (0, 0), (0, 0), (0, 0), (0, 0)])
frank.append([(2, 0), (0, 6), (0, 0), (0, 0)])
frank.append([(2, 0), (0, 8)])
frank.append([(2, 0), (1, 0), (1, 0), (0, 1), (0, 1), (0, 0)])
frank.append([(2, 0), (1, 0), (1, 0), (1, 1), (0, 0)])
frank.append([(2, 0), (0, 1), (0, 1), (0, 1), (0, 1), (0, 0)])
frank.append([(2, 0), (0, 1), (0, 1), (1, 1), (0, 0)])
frank.append([(2, 0), (0, 1), (0, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)])
frank.append([(2, 0), (0, 3), (0, 3), (0, 0)])
frank.append([(2, 0), (1, 1), (1, 1), (0, 0)])
frank.append([(2, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)])
frank.append([(2, 0), (1, 3), (0, 0)])
frank.append([(2, 0), (3, 1), (0, 0)])
frank.append([(2, 0), (2, 2)])
frank.append([(4, 0), (0, 4), (0, 0), (0, 0)])
frank.append([(4, 0), (0, 6)])
frank.append([(4, 0), (0, 1), (0, 1), (0, 0), (0, 0), (0, 0)])
frank.append([(4, 0), (1, 1), (0, 0), (0, 0), (0, 0)])
frank.append([(6, 0), (0, 1), (0, 1), (0, 0)])
frank.append([(6, 0), (1, 1), (0, 0)])
frank.append([(1, 0), (1, 0), (1, 0), (1, 0), (0, 1), (0, 1)])
frank.append([(1, 0), (1, 0), (1, 0), (1, 0), (1, 1)])
frank.append([(1, 0), (1, 0), (0, 1), (0, 1), (1, 1)])
frank.append([(1, 0), (1, 0), (0, 1), (0, 1), (0, 0), (0, 0), (0, 0), (0, 0)])
frank.append([(1, 0), (1, 0), (0, 3), (0, 3)])
frank.append([(1, 0), (1, 0), (1, 1), (1, 1)])
frank.append([(1, 0), (1, 0), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0)])
frank.append([(1, 0), (1, 0), (1, 3)])
frank.append([(1, 0), (1, 0), (3, 1)])
frank.append([(3, 0), (3, 0), (1, 1)])
frank.append([(1, 1), (1, 1), (1, 1)])
frank.append([(1, 1), (1, 1), (0, 0), (0, 0), (0, 0), (0, 0)])
frank.append([(1, 1), (1, 3)])
frank.append([(1, 1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)])
frank.append([(1, 2), (1, 2)])
frank.append([(1, 3), (0, 0), (0, 0), (0, 0), (0, 0)])
frank.append([(2, 2), (0, 0), (0, 0), (0, 0)])

##orderList2=order(2)
##l1=[[0]]
##for i in range(1,56):
##    print(i)
##    print(checker(lambda1[i],l1,orderList2))
##    l1.append(lambda1[i])
##    
##
##print("Checking with Frank")
##for i in range(1,len(frank)):
##    print("i= "+str(i))
##    t=checker(frank[i],l1,orderList2)
##    if t==-1:
##        print("There is a problem, you are missing:")
##        print(latex(frank[i]))


basisA14=[[0]]
basisA14Lambda1=[[0]]
orderList4=order(4)

for i in range(1,60):
    #print(i)
    lambda2[i]=wedge2(lambda1[i])
    #print(dimChecker(lambda1[i]))
    if dimChecker(lambda1[i])!=12:
        print("Problem1")
    if dimChecker(lambda2[i])!=66:
        print("Problem1")
    if dimChecker(lambda5[i])!=32:
        print("Problem5")
    if dimChecker(lambda6[i])!=32:
        print("Problem6")

for i in range(1,60):
    #print(latex(lambda1[i]))
    #print(latex(lambda2[i]))
    #print(latex(lambda5[i]))
    LE8[i]=[]
    LE8[i]=concat([(1,1)],lambda1[i])
    LE8[i]=LE8[i]+concat([(1,0)],lambda5[i])
    LE8[i]=LE8[i]+[(2,0,0,0),(0,2,0,0)]
    LE8[i]=LE8[i]+concat([(0,0)],lambda2[i])
    LE8[i]=LE8[i]+concat([(0,1)],lambda6[i])
    #print("case "+str(i))
    #print(dimChecker(LE8[i]))
    for j in range(0,len(LE8[i])):
        if len(LE8[i][j])!=4:
            print("length is wrong, it is "+str(len(LE8[i][j])))
    if dimChecker(LE8[i])!=248:
        print("LE8 does not have dim 248 at i=")
        print(i)
        
    temp=checker(LE8[i],basisA14,orderList4)
#    print("i = "+str(i))
    #print("is it equal to any of the previous ones?")
    #print(temp)
    if temp==-1:
        basisA14.append(LE8[i])
        basisA14Lambda1.append(lambda1[i])
    else:
      print("This A15: "+latex(lambda1[i]))
      print("is conjugate to "+latex(basisA14Lambda1[temp]))
##    else:
##        print("This is :")
##        print(latex(lambda1[i]))
##        print("cpnjugate to")
##        print(latex(basisA15Lambda1[temp]))



#LATEX
#print("A14 for latex")
for i in range(1,1):
    print(str(i)+"&$(1,1,"+latexWithoutDollar(lambda1[i])+")$ \\\\ \\hline")
for i in range(1,1):
    print(" ")
    print(" ")
    print(str(i)+latexWithoutDollar(lambda1[i]))
    print(latex(basisA14[i]))


for i in range(1,1):
    #test=[(1,2,3),(3,4,5),(1,2,3)]
    lat=latex(basisA14[i])
    Lie=[]
    i2=1
    while i2<len(lat)-1:
        temp=""
        while lat[i2]!="/" and i2<len(lat)-1:
            temp=temp+lat[i2]
            i2=i2+1
        i2=i2+1
        Lie.append(temp)

    lat=latex(basisA14Lambda1[i])
    lambda1=[]
    i2=1
    while i2<len(lat)-1:
        temp=""
        while lat[i2]!="/" and i2<len(lat)-1:
            temp=temp+lat[i2]
            i2=i2+1
        i2=i2+1
        lambda1.append(temp)
    
    j=0
    j2=0
    p=str(i)+"&"
    while j<len(Lie):
        t=0
        t2=0
        tester = False
        c=0
        while j2+t2<len(lambda1) and t2<2:
            if tester==False:
                p=p+"$"
            tester=True
            p=p+lambda1[j2+t2]
            if j2+t2!=len(lambda1)-1:
                p=p+"/"
            t2=t2+1
        if tester:
            p=p+"$ & "
        else :
            p=p+"&"
            
        while j+t<len(Lie) and t<6:
            if t==0:
                p=p+"$"
            p=p+Lie[j+t]
            if j+t!=len(Lie)-1:
                p=p+"/"
            t=t+1
            
        j=j+4
        j2=j2+2
        print(p+"$  \\\\ " )
        
        p="&"
    print("\\hline")
    print(" ")



#print("CHECKER")
#print(len(basisA14))

#In A1 A12 \subseteq A1 D6 with A12 in D6 (embedding (0,1,(---)) in A1A1D6)
temp=[]
#57
temp=removeA1(basisA15[7],2)
#print("57:"+latex(basisA15Lambda1[7]))
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

basisA14.append(temp)
basisA14Lambda1.append(basisA15Lambda1[7])

#58
temp=removeA1(basisA15[8],2)
#print("58:"+latex(basisA15Lambda1[8]))
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

basisA14.append(temp)
basisA14Lambda1.append(basisA15Lambda1[8])

#59
temp=removeA1(basisA15[12],2)
#print("59:"+latex(basisA15Lambda1[12]))
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

basisA14.append(temp)
basisA14Lambda1.append(basisA15Lambda1[12])

#60
temp=removeA1(basisA15[15],2)
#print("60:"+latex(basisA15Lambda1[15]))
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

basisA14.append(temp)
basisA14Lambda1.append(basisA15Lambda1[15])


#61
temp=removeA1(basisA15[16],2)
#print("61:"+latex(basisA15Lambda1[16]))
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

basisA14.append(temp)
basisA14Lambda1.append(basisA15Lambda1[16])


#62
temp=removeA1(basisA15[18],2)
#print("62:"+latex(basisA15Lambda1[18]))
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

basisA14.append(temp)
basisA14Lambda1.append(basisA15Lambda1[18])

#63
temp=removeA1(basisA15[21],2)
#print("63:"+latex(basisA15Lambda1[21]))
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

basisA14.append(temp)
basisA14Lambda1.append(basisA15Lambda1[21])


#64
temp=removeA1(basisA15[22],2)
#print("64:"+latex(basisA15Lambda1[22]))
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

basisA14.append(temp)
basisA14Lambda1.append(basisA15Lambda1[22])



#print("CHECKER")
#print(len(basisA14))


#A14=A1A13 \subseteq A1A14 \subseteq A1A1D6 with A13 \subseteq A14 \subseteq A1D6 with diag


#65
temp=diagA1(basisA15[7],2,3)
#print("65:"+latex(basisA15Lambda1[7])+" diag btw 2 and 3")
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[7])
#print("It is now number: "+str(checker(temp,basisA14,orderList4)))
#print(latex(temp))
#print(" ")

#Extra case with diag 211
temp=diagA1(basisA15[7],2,4)
#print("65bis:"+latex(basisA15Lambda1[7])+" diag btw 2 and 4")
#print(checker(temp,basisA14,orderList4))
if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[7])
#print("It is now number: "+str(checker(temp,basisA14,orderList4)))
#print(latex(temp))
#print(" ")



#66
temp=diagA1(basisA15[7],2,5)
#print("66:"+latex(basisA15Lambda1[7])+" diag btw 2 and 5")
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[7])
    print("added")
#print("It is now number: "+str(checker(temp,basisA14,orderList4)))
#print(" ")


#67
temp=diagA1(basisA15[8],2,3)
#print("67:"+latex(basisA15Lambda1[8])+" diag btw 2 and 3")
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[8])
#print("It is now number: "+str(checker(temp,basisA14,orderList4)))
#print(" ")

68
temp=diagA1(basisA15[8],2,5)
#print("68:"+latex(basisA15Lambda1[8])+" diag btw 2 and 5")
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[8])
#print("It is now number: "+str(checker(temp,basisA14,orderList4)))
#print(" ")

#69
temp=diagA1(basisA15[9],2,5)
#print("69:"+latex(basisA15Lambda1[9])+" diag btw 2 and 5")
##
print(checker(temp,basisA14,orderList4))
#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[9])
#print("It is now number: "+str(checker(temp,basisA14,orderList4)))
#print(" ")

#70
temp=diagA1(basisA15[9],2,5)
#print("70:"+latex(basisA15Lambda1[9])+" diag btw 2 and 5")
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[9])

#print("conjugate to")
#print(latex(basisA14Lambda1[checker(temp,basisA14,orderList4)]))


#71
temp=diagA1(basisA15[10],2,5)
#print("71:"+latex(basisA15Lambda1[10])+" diag btw 2 and 5")
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[10])

#print("It is now number: "+str(checker(temp,basisA14,orderList4)))
#print(" ")

#72
temp=diagA1(basisA15[12],2,3)
#print("72:"+latex(basisA15Lambda1[12])+" diag btw 2 and 3")
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[12])
##
#print("It is now number: "+str(checker(temp,basisA14,orderList4)))
#print(" ")


#73
temp=diagA1(basisA15[12],2,4)
#print("73:"+latex(basisA15Lambda1[12])+" diag btw 2 and 4")
#print(checker(temp,basisA14,orderList4))
#print("conjugate to")
#print(latex(basisA14Lambda1[checker(temp,basisA14,orderList4)]))

#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[12])
##
#print("It is now number: "+str(checker(temp,basisA14,orderList4)))
#print(" ")



#74
temp=diagA1(basisA15[12],2,5)
#print("74:"+latex(basisA15Lambda1[12])+" diag btw 2 and 5")
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[12])

#print("It is now number: "+str(checker(temp,basisA14,orderList4)))
#print(" ")



#75
temp=diagA1(basisA15[15],2,4)
#print("75:"+latex(basisA15Lambda1[15])+" diag btw 2 and 4")
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[15])


#print("conjugate to")
#print(latex(basisA14Lambda1[checker(temp,basisA14,orderList4)]))

#76 
a=expand("[(1, 1, 1, 1, 0)/(1, 1, 0, 2, 0)/(1, 1, 0, 0, 2)/(1, 1, 0, 0, 0)^2/(1, 0, 1, 1, 1)^2/(1, 0, 0, 2, 1)^2/(1, 0, 0, 0, 1)^2/(2, 0, 0, 0, 0)/(0, 2, 0, 0, 0)/(0, 0, 2, 0, 0)/(0, 0, 0, 2, 0)^4/(0, 0, 1, 3, 0)/(0, 0, 1, 1, 0)^3/(0, 0, 1, 1, 2)/(0, 0, 0, 2, 2)/(0, 0, 0, 0, 2)^3/(0, 0, 0, 0, 0)/(0, 1, 1, 1, 1)^2/(0, 1, 0, 2, 1)^2/(0, 1, 0, 0, 1)^2]")
temp = diagA1(a,2,3)
#print("76"+latex(basisA15Lambda1[3])+" diag btw 2 and 5")
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[3])

#print("It is now number: "+str(checker(temp,basisA14,orderList4)))
#print(" ")



#77
temp=diagA1(basisA15[18],2,5)
#print("77:"+latex(basisA15Lambda1[18])+" diag btw 2 and 3")
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[18])


#print("conjugate to")
#print(latex(basisA14Lambda1[checker(temp,basisA14,orderList4)]))

#78
temp=diagA1(basisA15[22],2,3)
#print("78:"+latex(basisA15Lambda1[22])+" diag btw 2 and 3")
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[22])
#print("It is now number: "+str(checker(temp,basisA14,orderList4)))
#print(" ")


#79
temp=diagA1(basisA15[22],2,5)
#print("78:"+latex(basisA15Lambda1[22])+" diag btw 2 and 5")
#print(checker(temp,basisA14,orderList4))
#print(latex(temp))

if checker(temp,basisA14,orderList4)==-1:
    basisA14.append(temp)
    basisA14Lambda1.append(basisA15Lambda1[22])

#print("It is now number: "+str(checker(temp,basisA14,orderList4)))
#print(" ")




#Case 80: in A1A2A5 with embedding(1,2,(2,0)/(0,2))
temp=expand("[(1,2,2,0)^2/(1,2,0,2)^2/(1,0,2,2)^2/(1,0,0,0)^2/(2,0,0,0)/(0,2,2,0)^2/(0,4,0,0)/(0,2,0,0)/(0,0,4,0)/(0,0,2,0)/(0,0,2,2)^2/(0,0,0,4)/(0,0,0,2)/(0,0,0,0)]")
temp=expand("[(1,2,2,0)^2/(1,2,0,2)^2/(1,0,2,2)^2/(1,0,0,0)^2/(2,0,0,0)/(0,2,2,0)^2/(0,2,0,2)^2/(0,2,2,2)^2/(0,4,0,0)/(0,2,0,0)/(0,0,4,0)/(0,0,2,0)/(0,0,2,2)^2/(0,0,0,4)/(0,0,0,2)/(0,0,0,0)]")

#print("A1A2A5")
#print(checker(temp,basisA14,orderList4))
#print(dimChecker(temp))
basisA14.append(temp)




#Case 80: in A1G2C3 with embedding(1,6,(2,1))

temp=expand("[(1,6,2,1)/(1,0,4,1)/(1,0,0,3)/(2,0,0,0)/(0,6,2,2)/(0,6,4,0)/(0,10,0,0)/(0,2,0,0)/(0,0,4,2)/(0,0,0,2)/(0,0,2,0)]")
basisA14.append(temp)

#print("Length of the basis: ")
#print(len(basisA14))


orderList4=order(4)

#A14 in E7
print("A14 in E7")
end=len(TempLambda1)
end=1
for i in range(1, end):
    print("//////////////////////")
    print(i)
    print(latex(TempLambda1[i]))
    temp=removeA1(TempLE8[i],1)
    print(checker(temp,basisA14,orderList4))

#print("For latex:")
end=len(TempLambda1)
end=1
for i in range(1, end):
    p=""
    p=p+str(i)+"& $ (1,"+latexWithoutDollar(TempLambda1[i])+") $ &"
    temp=removeA1(TempLE8[i],1)
    if i==38:
        temp=removeA1(TempLE8[i],2)
    p=p+str(checker(temp,basisA14,orderList4)) +"\\\\ \\hline "
    print(p)
    if i==37 or i==38:
        print(latex(temp))

print("For latex:")
end=len(TempLambda1)
end=1
for i in range(1, end):
    p=""
    
    temp=removeA1(TempLE8[i],1)
    if i==38:
        temp=removeA1(TempLE8[i],2)
    p=p+str(checker(temp,basisA14,orderList4))+"& $\\bar{A_1} \\bar{A_1}D_6$ & $ (1,"+latexWithoutDollar(TempLambda1[i])+") $ & \\\\"
    print(p)
    if i==37 or i==38:
        print(latex(temp))

#print("We add these two")


temp=expand("[(2, 0, 0, 0)^5/(0, 2, 0, 0)^5/(0, 0, 2, 0)^5/(0, 0, 0, 2)^5/(1, 1, 1, 1)^8/(0, 0, 0, 0)^6/(2, 2, 0, 0)/(2, 0, 2, 0)/(2, 0, 0, 2)/(0, 2, 2, 0)/(0, 2, 0, 2)/(0, 0, 2, 2)]")
#print("nb1")
#print(str(checker(temp,basisA14,orderList4)))
basisA14.append(temp)


tempt2=expand("[(2, 0, 0, 0)^5/(0, 0, 0, 0)^6/(2, 2, 0, 0)/(0, 2, 0, 0)^5/(2, 0, 2, 0)/(0, 0, 2, 0)^5/(2, 0, 0, 2)/(0, 0, 0, 2)^5/(1, 1, 1, 1)^8/(0, 2, 2, 0)/(0, 2, 0, 2)/(0, 0, 2, 2)]")
temp=expand("[(2, 0, 0, 0)^2/(0, 0, 0, 0)^3/(2, 2, 0, 0)/(0, 2, 0, 0)/(2, 0, 2, 0)/(0, 0, 2, 0)/(2, 0, 0, 2)/(0, 0, 0, 2)/(1, 1, 1, 1)^4/(0, 2, 2, 0)/(0, 2, 0, 2)/(0, 0, 2, 2)/(3,0,0,0)^2/(1,0,0,0)^2/(1,2,0,0)^2/(1,0,2,0)^2/(1,0,0,2)^2/(2,1,1,1)^2/(0,1,1,1)^2]")
#print("nb2")
#print(dimChecker(temp))
#print(str(checker(temp,basisA14,orderList4)))
basisA14.append(temp)


#A14 in A15 in A1E7 with diag
#temp=expand("[(1,1,1,1)/(1,1,0,2)/(3,1,0,0)/(1,1,0,0)^3/(2,0,1,1)^2/(0,0,1,1)^2/(2,0,0,2)^2/(0,0,0,2)^2/(2,0,0,0)^3/(0,0,0,0)^2/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)^4/(0,0,1,3)/(0,0,1,1)^3/(2,0,1,1)/(2,0,0,2)/(2,0,0,0)^3/(0,0,0,0)/(1,1,1,1)^2/(1,1,0,2)^2/(1,1,0,0)^2]")
#print(dimChecker(temp))
#basisA14.append(temp)
end = len(basisA15Lambda1)
end=1
for i in range(1,end):
    print("////////////////////")
    print(i)
    print(latex(basisA15Lambda1[i]))
    for j in range(2,6):
        print("Diag of 1rst and jth A1 with j= "+str(j))
        temp=diagA1(basisA15[i],1,j)
        print(checker(temp,basisA14,orderList4))

end = len(basisA15Lambda1)
#end=1
add=[7,8,12,15,16,18,22]
for i in range(1,end):
    for j in range(2,6):
        temp=diagA1(basisA15[i],1,j)
        p=" "
##        if j==2:
##            print("\\thickhline")
##            p=p+str(i)+" & (i) "
##        if j==3:
##            p=p+"& (ii) "
##        if j==4:
##            p=p+"& (iii) "
##        if j==5:
##            p=p+"& (iv) "
##        p=p+"& $(\\underline{1},1,"
##        p=p+latexWithoutDollar(basisA15Lambda1[i])+")$& "
##        p=p+str(checker(temp,basisA14,orderList4))
##        p=p+"\\\\ \\hline"
##        print(p)
        if checker(temp,basisA14,orderList4)==-1 and i in add:
            #print("We are adding")
            basisA14.append(temp)
            #print(latex(temp))

print("WTF?")
print(len(basisA14))

#print(latex(basisA14[67]))

#print(latex(basisA14[68]))


list=[7,8,12,15,16,18,22]
list=[]
for i in list:
    #print(i)
    temp=diagA1(basisA15[i],1,2)
    basisA14.append(temp)
    #print("lambda1= "+latex(basisA15Lambda1[i]))
    #print(checker(temp,basisA14,orderList4))
    #print(latex(temp))




#In E6A2
print("In E6A2:")
LE6=[[(0)]]
LE6.append(expand("[(2,0,0)/(0,4,2)/(0,4,0)/(0,2,2)/(0,2,0)/(0,0,2) ]"))



LE6.append(expand("[(1,2,2)^2/(1,0,0)^2/(2,0,0)/(0,4,0)/(0,0,4)/(0,2,0)/(0,0,2)/(0,2,2)^2/ (0,0,0)]"))


LE6.append(expand("[(1,2,1)^2/(1,2,0)^2/(1,0,0)^2/(2,0,0)/(0,4,0)/(0,2,1)^2/(0,2,0)^3/(0,0,2)/(0,0,1)^2/(0,0,0)^2]"))

LE6.append(expand("[(1,1,1)^2/(1,3,0)/(1,1,0)/(1,1,2)/(2,0,0)/(0,2,2)/(0,2,0)^2/(0,0,2)/ (0,2,1)^2/(0,0,1)^2/(0,0,0)]"))


LE6.append(expand("[(1,1,1)^2/(1,2,0)^2/(1,0,2)^2/(2,0,0)/(0,2,0)/(0,0,2)/(0,2,2)/(0,1,1)^4/ (0,0,0)^4]"))


LE6.append(expand("[(1,1,2)/(2,0,0)/(0,2,0)/(0,0,2)^4/(1,1,0)^3/(1,0,1)^4/(0,1,1)^4/(0,0,0)^4]"))


LE6.append(expand("[(2,0,0)/(0,2,0)/(0,0,2)/(1,1,1)^2/(1,1,0)^2/(1,0,1)^2/(0,1,1)^2/(1,0,0)^4/ (0,1,0)^4/(0,0,1)^4/(0,0,0)^5]"))

LE6.append(expand("[(0,6,0)/(1,4,1)/(0,4,0)/(1,3,0)^2/(0,3,1)^2/(2,0,0)/(0,2,0)/(0,0,2)/(1,0,1)/(0,0,0)]"))


LE6.append(expand("[(1,1,1)^4/(2,2,0)/(2,0,2)/(0,2,2)/(0,2,0)^2/(0,0,2)^2/(2,0,0)^2/(0,0,0)]"))


LE6.append(expand("[(2,2,2)^2/(4,0,0)/(0,4,0)/(0,0,4)/(2,0,0)/(0,2,0)/(0,0,2)]"))


LE6.append(expand("[(2,0,0)/(0,2,0)/(0,0,2)/(2,2,0)/(2,0,2)/(0,2,2)/(2,0,0)/(0,2,0)/(0,0,2)]"))

print(len(basisA14))
end =len(LE6)
end=1
for i in range(1,end):
    print("////////////////////")
    print("case "+str(i))
    l1=[(4,0,0,0),(2,0,0,0)]
    l2=[(2,0,0,0),(1,0,0,0),(1,0,0,0),(0,0,0,0)]
    a=concat([(0,)],LE6[i])
    b=concat([(0,)],LE6[i])
    for j in range(0,len(l1)):
        a.append(l1[j])
    for j in range(0,len(l2)):
        b.append(l2[j])
    print("First A1 in A2:")
    print(classifyIncomplete(a,basisA14,orderList4))
    print("Second A1 in A2:")
    print(classifyIncomplete(b,basisA14,orderList4))

#Case 21 checking if conjugate to no other cases:
case21=expand("[(2,2,0,0)^2/(2,0,2,0)^2/(2,0,0,2)^2/(2,0,0,0)^2/(2,1,1,1)^4/(2,0,0,0)^2/(0,2,0,0)^2/(0,0,2,0)^2/(0,0,0,2)^2/(0,2,2,0)/(0,2,0,2)/(0,0,2,2)/(0,1,1,1)^4/(0,0,0,0)/(4,0,0,0)/(2,0,0,0)]")
#print("case 21:")
#print(dimChecker(case21))
#print(checker(case21,basisA14,orderList4))


#print("Adding A14in A2A23 in A2E6")
temp = expand("[(0,2,2,2)^2/(2,0,2,2)^2/(2,0,2,2)^2/(2,2,2,0)^2/(4,0,0,0)/(0,4,0,0)/(0,0,4,0)/(0,0,0,4)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(2,0,0,0)]")
#print(dimChecker(temp))
#print(checker(temp,basisA14,orderList4))
basisA14.append(temp)

print("Length of Basis after A14inE6A2")
print(len(basisA14))


#InE6
L1=expand("[(1,1,1,0)/(1,2,0,1)/(1,0,2,1)/(1,1,1,0)/(2,0,0,0)/(0,2,2,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,1,1,1)^2/(0,0,0,0)]")
L2=expand("[(1,0,1,0)^2 / (1,0,0,1)^2/(1,1,0,0)^2/(0,1,1,0)^2/ (0,1,0,1)^2/(0,0,1,1)^2/(1,1,1,1)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,0,0,0)^2]")
l1=[(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,0,0,0),(0,0,0,0)]
l2=[(2,0,0,0),(1,0,0,0),(1,0,0,0),(0,0,0,0)]
a=concat([(0,)],L1)
b=concat([(0,)],L2)
for j in range(0,len(l1)):
        L1.append(l1[j])
for j in range(0,len(l1)):
        L2.append(l1[j])
#print("First A14 in E6:")
#print(classifyIncomplete(L1,basisA14,orderList4))
#print("Second A14 in E6:")
#print(classifyIncomplete(L2,basisA14,orderList4))


#With diag
print("with diag")
L1=expand("[(1,1,1,0)/(1,2,0,1)/(1,0,2,1)/(1,1,1,0)/(2,0,0,0)/(0,2,2,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,1,1,1)^2/(0,0,0,0)]")
L2=expand("[(1,0,1,0)^2 / (1,0,0,1)^2/(1,1,0,0)^2/(0,1,1,0)^2/ (0,1,0,1)^2/(0,0,1,1)^2/(1,1,1,1)/(2,0,0,0)/(0,2,0,0)/(0,0,2,0)/(0,0,0,2)/(0,0,0,0)^2]")


print("CASE3")
l1=[(4,0,0,0,0),(2,0,0,0,0)]
l2=[(2,0,0,0,0),(1,0,0,0,0),(1,0,0,0,0),(0,0,0,0,0)]
a=concat([(0,)],L2)
b=concat([(0,)],L2)
for j in range(0,len(l1)):
        a.append(l1[j])
for j in range(0,len(l2)):
        b.append(l2[j])
#print("with 2 in A2")

t1=diagA1(a,1,2)
#print(classifyIncomplete(t1,basisA14,orderList4))
t1=diagA1(a,1,3)
#print(classifyIncomplete(t1,basisA14,orderList4))
t1=diagA1(a,1,5)
#print(classifyIncomplete(t1,basisA14,orderList4))


#print("with 1+0 in A2")

t1=diagA1(b,1,2)
#print(classifyIncomplete(t1,basisA14,orderList4))
t1=diagA1(b,1,3)
#print(classifyIncomplete(t1,basisA14,orderList4))
t1=diagA1(b,1,5)
#print(classifyIncomplete(t1,basisA14,orderList4))





#D8
print(len(basisA14))
print("In D8")

D8=[[0],[(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2)],[(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 1, 0), (2, 0, 0, 0), (0, 0, 0, 2)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 1, 0), (0, 0, 0, 2), (0, 0, 0, 2)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (2, 0, 0, 0), (2, 0, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (2, 0, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (2, 0, 0, 0), (0, 0, 2, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (2, 0, 0, 0), (0, 0, 2, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 2, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 2, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (1, 1, 0, 0)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (1, 0, 1, 0)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 0, 6)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 4, 0), (0, 0, 0, 4)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 4)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 1, 1, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 3)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 6, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 4)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 1, 1, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 1, 3)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (4, 0, 0, 0)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (0, 4, 0, 0)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 3), (0, 0, 0, 3)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 1, 0, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 1, 0, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0),(0, 2, 0, 0), (0, 0, 2, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1), (0, 1, 1, 0)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 1, 0, 1), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 1, 0, 1), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 0, 0, 3)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 1, 0, 3)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (3, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 3, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (6, 0, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 6, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 6, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 6, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 6, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (4, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 4, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 4, 0, 0), (0, 0, 4, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 4, 0, 0), (0, 0, 4, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 4, 0, 0), (0, 0, 2, 2)],[(2, 0, 0, 0), (2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2)],[(2, 0, 0, 0), (2, 0, 0, 0), (2, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (4, 0, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (1, 0, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 2)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 3, 0, 0), (0, 3, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (0, 1, 1, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 3)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (1, 0, 0, 3)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 3)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (3, 0, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (0, 3, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 2)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (4, 0, 0, 0), (1, 0, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (4, 0, 0, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 4), (1, 1, 0, 0)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 4), (1, 0, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 8)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (2, 0, 0, 2)],[(2, 0, 0, 0), (0, 2, 0, 0), (3, 0, 0, 0), (3, 0, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 3, 0), (0, 0, 3, 0), (1, 0, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 3, 0), (0, 0, 3, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (0, 0, 0, 6)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (0, 0, 1, 3)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 1, 0), (1, 0, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 1, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1), (0, 1, 1, 0)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 1, 1, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 0, 3)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 1, 0, 3)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 0, 1, 3)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (3, 0, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 3, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 0, 3, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (1, 3, 0, 0)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (1, 0, 3, 0)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 1, 3)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (3, 0, 1, 0)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 2), (0, 0, 1, 2)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 5)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 2)],[(2, 0, 0, 0), (0, 2, 0, 0), (2, 0, 1, 1)],[(2, 0, 0, 0), (0, 4, 0, 0), (0, 0, 4, 0), (0, 0, 0, 4)],[(2, 0, 0, 0), (6, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (6, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (0, 1, 1, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (0, 0, 1, 3)],[(4, 0, 0, 0), (4, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(4, 0, 0, 0), (4, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(4, 0, 0, 0), (0, 4, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(4, 0, 0, 0), (0, 4, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],[(4, 0, 0, 0), (0, 4, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],[(4, 0, 0, 0), (0, 4, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)],[(4, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],[(4, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 3)],[(4, 0, 0, 0), (0, 8, 0, 0), (0, 0, 1, 1)],[(4, 0, 0, 0), (1, 1, 0, 0), (0, 0, 2, 2)],[(4, 0, 0, 0), (0, 1, 1, 0), (2, 0, 0, 2)],[(4, 0, 0, 0), (0, 1, 1, 0), (0, 2, 0, 2)],[(6, 0, 0, 0), (0, 6, 0, 0), (0, 0, 1, 1)],[(2, 2, 0, 0), (0, 0, 2, 2)]]

[[0],[(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2)],[(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 1, 0), (2, 0, 0, 0), (0, 0, 0, 2)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 1, 0), (0, 0, 0, 2), (0, 0, 0, 2)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (2, 0, 0, 0), (2, 0, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (2, 0, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (2, 0, 0, 0), (0, 0, 2, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (2, 0, 0, 0), (0, 0, 2, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 2, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 2, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (1, 1, 0, 0)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (1, 0, 1, 0)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 0, 6)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 1, 0, 0), (0, 1, 0, 0), (0, 0, 4, 0), (0, 0, 0, 4)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 4)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 1, 1, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 3)],[(1, 0, 0, 0), (1, 0, 0, 0), (2, 0, 0, 0), (0, 6, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 4)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 1, 1, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 1, 3)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (4, 0, 0, 0)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2), (0, 4, 0, 0)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 3), (0, 0, 0, 3)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 1, 0, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 1, 0, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0),(0, 2, 0, 0), (0, 0, 2, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1), (0, 1, 1, 0)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 0, 0, 1), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 1, 0, 1), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 1, 0, 1), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (1, 0, 0, 3)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 1, 0, 3)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (3, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 3, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (6, 0, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 6, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 6, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 6, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 2, 0, 0), (0, 0, 6, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (4, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 4, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 4, 0, 0), (0, 0, 4, 0), (1, 0, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 4, 0, 0), (0, 0, 4, 0), (0, 1, 0, 1)],[(1, 0, 0, 0), (1, 0, 0, 0), (0, 4, 0, 0), (0, 0, 2, 2)],[(2, 0, 0, 0), (2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2)],[(2, 0, 0, 0), (2, 0, 0, 0), (2, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (4, 0, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (1, 0, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 2)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 3, 0, 0), (0, 3, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (0, 1, 1, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 3)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (1, 0, 0, 3)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 3)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (3, 0, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 0), (0, 3, 0, 1)],[(2, 0, 0, 0), (2, 0, 0, 0), (0, 1, 1, 2)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (4, 0, 0, 0), (1, 0, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (4, 0, 0, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 4), (1, 1, 0, 0)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 4), (1, 0, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 8)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (2, 0, 0, 2)],[(2, 0, 0, 0), (0, 2, 0, 0), (3, 0, 0, 0), (3, 0, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 3, 0), (0, 0, 3, 0), (1, 0, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 3, 0), (0, 0, 3, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 4, 0), (0, 0, 0, 6)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 1, 0, 0), (0, 0, 1, 3)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 1, 0), (1, 0, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 1, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1), (0, 1, 1, 0)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 1, 1, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (1, 0, 0, 3)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 1, 0, 3)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 0, 1, 3)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (3, 0, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 3, 0, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 0), (0, 0, 3, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (1, 3, 0, 0)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (1, 0, 3, 0)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (0, 0, 1, 3)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 1), (3, 0, 1, 0)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 2), (0, 0, 1, 2)],[(2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 1, 5)],[(2, 0, 0, 0), (0, 2, 0, 0), (1, 0, 1, 2)],[(2, 0, 0, 0), (0, 2, 0, 0), (2, 0, 1, 1)],[(2, 0, 0, 0), (0, 4, 0, 0), (0, 0, 4, 0), (0, 0, 0, 4)],[(2, 0, 0, 0), (6, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (6, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (0, 1, 1, 0), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],[(2, 0, 0, 0), (0, 6, 0, 0), (0, 0, 1, 3)],[(4, 0, 0, 0), (4, 0, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(4, 0, 0, 0), (4, 0, 0, 0), (0, 1, 1, 0), (0, 1, 0, 1)],[(4, 0, 0, 0), (0, 4, 0, 0), (1, 1, 0, 0), (0, 0, 1, 1)],[(4, 0, 0, 0), (0, 4, 0, 0), (1, 0, 1, 0), (1, 0, 0, 1)],[(4, 0, 0, 0), (0, 4, 0, 0), (1, 0, 1, 0), (0, 1, 0, 1)],[(4, 0, 0, 0), (0, 4, 0, 0), (1, 0, 1, 0), (0, 0, 1, 1)],[(4, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 1), (0, 0, 1, 1)],[(4, 0, 0, 0), (0, 4, 0, 0), (0, 0, 1, 3)],[(4, 0, 0, 0), (0, 8, 0, 0), (0, 0, 1, 1)],[(4, 0, 0, 0), (1, 1, 0, 0), (0, 0, 2, 2)],[(4, 0, 0, 0), (0, 1, 1, 0), (2, 0, 0, 2)],[(4, 0, 0, 0), (0, 1, 1, 0), (0, 2, 0, 2)],[(6, 0, 0, 0), (0, 6, 0, 0), (0, 0, 1, 1)],[(2, 2, 0, 0), (0, 0, 2, 2)]]
print(len(D8))

sol=[0]
for i in range(0,157):
    sol.append(0)

for i in range(1,1):
        print(i)
        #print(D8[i])
        sol[i]= wedge2(D8[i])
        
j=0
orderList5=order(5)
for i in range(1,1):
        #print("/////////////////////////////////////////////////////")
        #print(i)
        
        p=" "
        p=p+str(i)+" & "
        p=p+latex(D8[i])+ "& "
        t=classifyIncomplete(sol[i],basisA14,orderList4)
        p=p+str(t) +"\\\\ \\hline"
        print(p)
       # print("This is the wedge2:")
       # print(latex(sol[i]))
       # print(t)
    



#In G2F4
print("In G2F4")
#A1A13
#(1,10/01/00^2)
a=expand("[(1,1,1)^2/(2,0,0)/(0,2,0)/(0,0,2)/(1,1,0)/(1,0,1)/(0,1,1)/(1,0,0)^2/(0,1,0)^2/(0,0,1)^2/(0,0,0)^3]")
a=concat([(0,)],a)

#1,10^2/01
b=expand("[(1,2,1)/(2,0,0)/(0,2,0)^3/(0,0,2)/(1,1,0)^2/(1,0,1)^2/(0,1,1)^2/(0,0,0)]")
b=concat([(0,)],b)

#1,21
c=expand("[(2,0,0)/(0,2,0)/(0,0,2)/(0,4,2)]")
#c=expand("[(1,4,1)/(1,0,3)/(2,0,0)]")
c=concat([(0,)],c)

#1,30 / 01
d=expand("[(0,6,0)/(1,4,1)/(1,3,0)/(0,3,1)/(2,0,0)/(0,2,0)/(0,0,2)]")
d=concat([(0,)],d)

#200/020/002 in b4
e=expand("[(2,2,0)/(2,0,2)/(0,2,2)/(2,0,0)/(0,2,0)/(0,0,2)]")
e=concat([(0,)],e)

g2=[]
g2.append([(2,),(1,),(1,),(1,),(1,),(0,),(0,),(0,)])
g2.append([(3,),(3,),(2,),(0,),(0,),(0,)])
g2.append([(10,),(2,)])
g2.append([(4,),(2,),(2,),(2,)])
##print("LEN:")
##print(len(basisA14))
##end=len(g2)
#end=1
##print("first one")
##for i in range(0,end):
##    temp = concat(g2[i],[(0,0,0)])
##    for x in a:
##        temp.append(x)
##    print(latex(temp))
##    print(classifyIncomplete(temp,basisA14,orderList4))
##print("second one")
##for i in range(0,end):
##    temp = concat(g2[i],[(0,0,0)])
##    for x in b:
##        temp.append(x)
##    print(latex(temp))
##    print(classifyIncomplete(temp,basisA14,orderList4))
##
##print("third one")
##for i in range(0,end):
##    temp = concat(g2[i],[(0,0,0)])
##    for x in c:
##        temp.append(x)
##    print(latex(temp))
##    print(classifyIncomplete(temp,basisA14,orderList4))
##
##print("fourth one")
##for i in range(0,end):
##    temp = concat(g2[i],[(0,0,0)])
##    for x in d:
##        temp.append(x)
##    print(latex(temp))
##    print(classifyIncomplete(temp,basisA14,orderList4))
##
##print("fifth one")
##for i in range(0,end):
##    temp = concat(g2[i],[(0,0,0)])
##    for x in e:
##        temp.append(x)
##    print(latex(temp))
##    print(classifyIncomplete(temp,basisA14,orderList4))

temp = expand("[(6,2, 0, 0)/(6,0,2,0)/(6,0,0,2)/(6,1,1,1)^2/(6,0,0,0)/(10,0,0,0)/(2,0,0,0)/(0,1,1,1)^2/(0,2, 0, 0)/(0, 2, 2, 0)/(0, 2, 0, 2)/(0, 0, 2, 2)/(0, 0, 2, 0)/(0, 0, 0, 2)]")
print("Adding conjugacy class A14 in G2B4 in G2F4 with 2,200/020/002")
print(dimChecker(temp))
print(checker(temp,basisA14,orderList4))
basisA14.append(temp)


#A12A12
print(len(basisA14))
a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
#1,5
a[1]=expand("[(0,10)/(1,9)/(0,6)/(1,3)/(2,0)/(0,2)]")


#1.3/1
a[2]=expand("[(0,6)/(1,5)/(0,4)/(1,3)^2/(2,0)/(0,2)^3]")

#3/0^2
a[3]=expand("[(0,6)/(1,4)^2/(1,3)/(0,3)^2/(2,0)/(0,2)/(0,0)^3]")

#2^2                                                                                                                                                                                     
a[4]=expand("[(1,4)^2/(0,4)^3/(2,0)/(0,2)/(1,0)^4/(0,0)^3]")

a[5]=expand("[(1,3)/(2,0)/(0,2)^6/(1,1)^5/(0,0)^3]")

a[6]=expand("[(1,2)^2/(2,0)/(0,2)^3/(1,1)^2/(1,0)^4/(0,1)^4/(0,0)^4]")

a[7]=expand("[(2,0)/(0,2)/(1,1)^5/(1,0)^4/(0,1)^4/(0,0)^{10}]")

a[8]=expand("[(4,2)/(2,0)/(0,2)/(0,0)^3]")

a[9]=expand("[(2,2)/(2,0)^4/(0,2)^4/(1,1)^4/(0,0)^3]")

a[10]=expand("[(4,2)/(2,0)^2/(0,2)]")

a[11]=expand("[(2,4)/(2,0)^2/(0,2)]")

a[12]=expand("[(0,6)/(2,4)/(0,4)/(1,3)^2/(2,0)^2/(0,2)]")

a[13]=expand("[(4,2)/(2,4)/(0,2)/(2,0)/(3,1)/(1,3)]")

a[14]=expand("[(2,2)^2/(2,1)^2/(2,0)^3/(4,0)/(0,2)/(0,1)^2/(0,0)]")

a[15]=expand("[(0,10)/(4,6)/(2,0)/(0,2)]")

A12G2=[(2,0),(0,2),(1,3)]
A12G2=concat(A12G2,[(0,0)])
end = 16
end = 1
for i in range(1,end):
    temp=concat([(0,0)],a[i])
    for x in A12G2:
        temp.append(x)
    p=" "
    p=p+latex(a[i])+" & "+str(classifyIncomplete(temp,basisA14,orderList4))+" \\\\ \\hline"
    print("/////////////////////////////")
    print(i)
    print(latex(temp))
    print(classifyIncomplete(temp,basisA14,orderList4))
print("Case 13:")
case13=expand("[(2,0,0,0)/(0,2,0,0)/(1,3,0,0)/(0,0,4,2)/(0,0,2,4)/(0,0,2,0)/(0,0,0,2)/(0,0,3,1)/(0,0,1,3)]")
print(classifyIncomplete(case13,basisA14,orderList4))


#in G2F4 with diag
print("With Diag")
L=expand("[ (0, 0, 1, 4, 1)/(0, 0, 0, 4, 2)/(0, 0, 1, 0, 3)/(0, 0, 2, 0, 0)/(0, 0, 0, 2, 0)/(0, 0, 0, 0, 2)/(2, 0, 0, 0, 0)/(0, 2, 0, 0, 0)/(1, 3, 0, 0, 0)]")

print("diag with first one")
end=6
end=1
for i in range(3,end):
    print(i)
    print(latex(diagA1(L,1,i)))
    t=classifyIncomplete(diagA1(L,1,i),basisA14,orderList4)
    print(t)
    if len(t)==1:
        basisA14.append(diagA1(L,1,i))

print("diag with second one")
end=6
end=1
for i in range(3,end):
    print(i)
    print(latex(diagA1(L,2,i)))
    t=classifyIncomplete(diagA1(L,2,i),basisA14,orderList4)
    print(t)
    if len(t)==1:
        basisA14.append(diagA1(L,2,i))




#In A42

l1=[[0]]
l1.append([(1,1),(0,0)])
l1.append([(1,0),(0,1),(0,0)])
l1.append([(2,0),(0,1)])

l2=[[0]]
for i in range(1,4):
    l2.append(wedge2(l1[i]))

lie=[[0]]

for i in range(1,4):
    lie.append(tensor(l1[i],l1[i]))
    
    lie[i].pop()
    print(lie[i])

l3=l2
l4=l1
#lie.append([(2,2),(2,0),(0,2),(0,0),(1,1),(1,1),(0,0)])
L=[0,0,0,0]
end=4
end=1
print("The first one is 11/00")
for i in range(1,end):
    print("\\\\\\\\\\\\\\")
    print(i)
    L[i]=[]
    temp=concat(l1[1],l2[i])
    L[i]=L[i]+temp
    temp=concat(l2[1],l1[i])
    L[i]=L[i]+temp
    temp=concat(l2[1],l1[i])
    L[i]=L[i]+temp
    temp=concat(l1[1],l2[i])
    L[i]=L[i]+temp
    temp=concat(lie[1],[(0,0)])
    L[i]=L[i]+temp
    temp=concat([(0,0)],lie[i])
    L[i]=L[i]+temp
    t=checker(L[i],basisA14,orderList4)
    print(dimChecker(L[i]))
    print(t)

print("The first one is 10/01/00")
for i in range(1,end):
    print("\\\\\\\\\\\\\\")
    print(i)
    L[i]=[]
    temp=concat(l1[2],l2[i])
    L[i]=L[i]+temp
    temp=concat(l2[2],l1[i])
    L[i]=L[i]+temp
    temp=concat(l2[2],l1[i])
    L[i]=L[i]+temp
    temp=concat(l1[2],l2[i])
    L[i]=L[i]+temp
    temp=concat(lie[2],[(0,0)])
    L[i]=L[i]+temp
    temp=concat([(0,0)],lie[i])
    L[i]=L[i]+temp
    t=checker(L[i],basisA14,orderList4)
    print(dimChecker(L[i]))
    print(t)

print("The first one is 20/01")
for i in range(1,end):
    print("\\\\\\\\\\\\\\")
    print(i)
    L[i]=[]
    temp=concat(l1[3],l2[i])
    L[i]=L[i]+temp
    temp=concat(l2[3],l1[i])
    L[i]=L[i]+temp
    temp=concat(l2[3],l1[i])
    L[i]=L[i]+temp
    temp=concat(l1[3],l2[i])
    L[i]=L[i]+temp
    temp=concat(lie[3],[(0,0)])
    L[i]=L[i]+temp
    temp=concat([(0,0)],lie[i])
    L[i]=L[i]+temp
    t=checker(L[i],basisA14,orderList4)
    print(dimChecker(L[i]))
    print(t)


#InA8
print("In A8")

lam1=[[0]]
lt=[[0]]
l3=[[0]]

lam1.append(expand("[(1,1,0,0)/(0,0,1,1)/(0,0,0,0)]"))
lt.append(expand("[(2,0,0,0)/(0,2,0,0)/(2,2,0,0)/(0,0,0,0)/(1,1,1,1)^2/(0,0,2,2)/(0,0,2,0)/(0,0,0,2)/(0,0,0,0)/(1,1,0,0)^2/(0,0,1,1)^2]"))
l3.append(expand("[(1,1,0,0)/(2,0,1,1)/(2,0,0,0)/(0,2,1,1)/(0,2,0,0)/(1,1,2,0)/(1,1,0,2)/(1,1,1,1)/(0,0,1,1)/(0,0,2,0)/(0,0,0,2)]"))

lam1.append(expand("[(1,1,0,0)/(0,0,1,0)/(0,0,0,1)/(0,0,0,0)]"))
lt.append(expand("[(2,0,0,0)/(0,2,0,0)/(2,2,0,0)/(0,0,0,0)/(1,1,1,0)^2/(1,1,0,1)^2/(1,1,0,0)^2/(0,0,2,0)/(0,0,0,0)/(0,0,1,1)^2/(0,0,1,0)^2/(0,0,0,2)/(0,0,0,0)/(0,0,0,1)^2]"))
l3.append(expand("[(1,1,0,0)/(2,0,0,0)/(0,2,0,0)/(2,0,1,0)/(2,0,0,1)/(0,2,1,0)/(0,2,0,1)/(1,1,1,0)/(1,1,0,1)/(1,1,0,0)^2/(1,1,1,1)/(0,0,0,0)^2/(0,0,1,1)/(0,0,1,0)/(0,0,0,1)]"))

lam1.append(expand("[(1,1,0,0)/(0,0,1,0)/(0,0,0,2)]"))
lt.append(expand("[(2,0,0,0)/(0,2,0,0)/(2,2,0,0)/(0,0,0,0)/(1,1,1,0)^2/(1,1,0,2)^2/(0,0,2,0)/(0,0,0,0)/(0,0,1,2)^2/(0,0,0,4)/(0,0,0,2)]"))
l3.append(expand("[(1,1,0,0)/(2,0,1,0)/(2,0,0,2)/(0,2,1,0)/(0,2,0,2)/(1,1,0,0)/(1,1,1,2)/(1,1,0,2)/(0,0,0,0)/(0,0,1,2)/(0,0,0,2)]"))

lam1.append(expand("[(1,0,0,0)/(0,1,0,0)/(0,0,1,0)/(0,0,0,1)/(0,0,0,0)]"))
lt.append(expand("[(2,0,0,0)/(0,0,0,0)^3/(1,1,0,0)^2/(1,0,1,0)^2/(1,0,0,1)^2/(1,0,0,0)^2/(0,2,0,0)/(0,1,1,0)^2/(0,1,0,1)^2/(0,1,0,0)^2/(0,0,2,0)/(0,0,1,1)^2/(0,0,1,0)^2/(0,0,0,2)/(0,0,0,1)^2/(0,0,0,0)]"))
l3.append(expand("[(1,0,0,0)/(0,1,0,0)/(1,1,1,0)/(1,1,0,1)/(1,1,0,0)/(0,0,1,0)^2/(0,0,0,1)^2/(0,0,0,0)^2/(1,0,1,1)/(1,0,1,0)/(1,0,0,1)/(1,0,0,0)^2/(0,1,0,0)^2/(0,1,1,1)/(0,1,1,0)/(0,1,0,1)/(0,0,1,1)/(0,0,1,0)/(0,0,0,1)/(0,0,0,0)^2]"))

lam1.append(expand("[(1,0,0,0)/(0,1,0,0)/(0,0,1,0)/(0,0,0,2)]"))
lt.append(expand("[(2,0,0,0)/(0,0,0,0)^3/(1,1,0,0)^2/(1,0,1,0)^2/(1,0,0,2)^2/(0,2,0,0)/(0,1,1,0)^2/(0,1,0,2)^2/(0,0,2,0)/(0,0,1,2)^2/(0,0,0,4)/(0,0,0,2)]"))
l3.append(expand("[(1,0,0,0)/(0,1,0,0)/(1,1,1,0)/(1,1,0,2)/(0,0,1,0)^2/(0,0,0,2)^2/(1,0,0,0)/(1,0,1,2)/(1,0,0,2)/(0,1,0,0)/(0,1,1,2)/(0,1,0,2)/(0,0,0,0)/(0,0,1,2)/(0,0,0,2)]"))

for i in range(1,len(l3)):
            print(dimChecker(l3[i]))


print("Get right dim for lie algebra")
L=[0,0,0,0,0,0,0]
for i in range(1,len(l3)):
    L[i]=[]
    L[i]=L[i]+l3[i]
    L[i]=L[i]+l3[i]
    L[i]=L[i]+lt[i]
    t=checker(L[i],basisA14,orderList4)
    print(latex(lam1[i]))
    print(dimChecker(L[i]))
    print(t)
    


print(order(2))








print(len(basisA14))
##print(len(basisA15))
##print(latex(basisA15[30]))
##x=expand("[(1,1,1,0,0)^2/(1,1,0,1,1)/(1,1,0,0,2)/(1,1,0,0,0)/(2,0,0,0,0)/(0,2,0,0,0)/(0,0,2,0,0)/(0,0,0,0,0)^2/(0,0,1,1,1)^2/(0,0,1,0,2)^2/(0,0,1,0,0)^2/(0,0,0,2,0)/(0,0,0,0,2)^3/(0,0,0,1,3)/(0,0,0,1,1)]")
##print(latex(basisA16[7]))
x=diagA1(basisA16[7],2,3)
##print("x = "+latex(x))
##a=diagA1(x,1,2)
b=diagA1(x,2,3)
##
##print(dimChecker(basisA15[30]))
##print(checker(a, basisA14,orderList4))
##print(checker(b, basisA14,orderList4))
##print("ADD: "+latex(b))
basisA14.append(b)
##print(latex(basisA14[81]))
##x=expand("[(1,1,1,0,0)^2/(1,1,0,1,1)/(1,1,0,0,2)/(1,1,0,0,0)/(2,0,0,0,0)/(0,2,0,0,0)/(0,0,2,0,0)/(0,0,0,0,0)^2/(0,0,1,1,1)^2/(0,0,1,0,2)^2/(0,0,1,0,0)^2/(0,0,0,2,0)/(0,0,0,0,2)^3/(0,0,0,1,3)/(0,0,0,1,1)]")
##
##a=diagA1(x,1,2)
##b=diagA1(x,1,3)
##c=diagA1(x,1,4)
##c=diagA1(x,1,5)
##print(dimChecker(x))
##print(classifyIncomplete(x, basisA14,orderList4))
##print(classifyIncomplete(x, basisA14,orderList4))
##print(classifyIncomplete(x, basisA14,orderList4))
##print(classifyIncomplete(x, basisA14,orderList4))


print(len(basisA14))

with open("basis", "wb") as f: 
  pickle.dump(basisA14, f)

with open("basis2", "wb") as f: 
  pickle.dump(basisA14Lambda1, f)















